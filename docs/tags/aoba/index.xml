<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aoba on だるろぐ - だるやなぎのブログ</title>
    <link>https://blog.daruyanagi.jp/tags/aoba/</link>
    <description>Recent content in Aoba on だるろぐ - だるやなぎのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 03 Sep 2016 20:21:59 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/aoba/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aoba 1.5.0：艦これキャプチャーツールに アニメーション GIF 録画機能をつけた</title>
      <link>https://blog.daruyanagi.jp/entry/2016/09/03/202159/</link>
      <pubDate>Sat, 03 Sep 2016 20:21:59 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/09/03/202159/</guid>
      <description>  りあえずほしい機能は全部付けたので、あとは自分で使いながら改良するだけかも。
 ダウンロード GitHub で ClickOnce するのは、思った以上に制約が多いのでやめて、代わりに Azure Blob Storage に置いてみたよ。初めて使ってみたけど、そんなに難しくなかった。お金はちょっとかかるっぽいけど、割と安いみたい。   UI クライアントをいくつか比較してみたけど、CloudBerry Explorer というのが一番使いやすかったかも。コマンドラインだったら AzCopy ってのもあるみたいで、自分みたいに ClickOnce のファイルを Azure Blob Storage に置くだけだったらそっちの方が楽かもしれない。
### 更新点  Twitter 投稿画面の改善 Gif キャプチャー機能 設定の保存 コードのリファクタリング Twitter の投稿画面では、フリップビューのパチモノみたいなのをつけて（アニメーションないし、フリックではめくれない劣化版）、過去の写真も選択できるようにした。連写機能で撮った決定的瞬間をうｐしたいときとかに使えるかも。作り方は簡単で、  スクショをリスト List&amp;lt;string でもっておく ViewModel で int SelectedIndex をもつ Image に List[SelectedIndex] をバインド ボタンに SelectedIndex を ++/-- するコマンドをバインドしていい感じに配置 するだけ。ユーザーコントロールにして、切り替えのアニメーションぐらい付けたいけど、自分の XAML 力でそこまでできるかどうかはわからない。  </description>
    </item>
    
    <item>
      <title>Aoba 1.4.4：艦これキャプチャーツールに CoreTweet で Twitter 投稿機能をつけた</title>
      <link>https://blog.daruyanagi.jp/entry/2016/09/01/204619/</link>
      <pubDate>Thu, 01 Sep 2016 20:46:19 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/09/01/204619/</guid>
      <description>  じさんでも簡単に Twitter を組み込めると人気の CoreTweet で投稿機能を組み込んだよ。メッセージの文字数制限チェックが甘いとか、細部でダメなところも多いけど、気を付けていれば問題ない（ぁCoreTweet については酢酸先生のまとめを参考にするとよいかも。必要なことはすべて酢酸先生（たち）が教えてくれた。あと、Tokens.Create() で作成したトークンがログイン可能なのかを調べる手段がわからなかったのだけど、以下のサイトが参考になった。Tokens.Create() はいろいろ組み立てるだけ。検証は Account.VerifyCredentials() を使う、と（頭にメモメモほかには
 Properties.Default.Settings を書き込んだら Save() しなきゃ保存されない。すっかり忘れてて悩んだ Twitter から取得したトークンを Properties.Default.Settings に書き込んだら設定ファイルを .gitignore しとかないと GitHub で全裸公開しちゃうことになる（キーをリセットしたよ ViewModel からウィンドウを閉じる方法はいろいろあるが、ボタンに CommandParameter={Binding Window1} して Command 側で (Window1 as Window).Close() するのが一番簡単っぽい というあたりが今回の気付き。マイナーバージョンがインクリメントされているのは、GitHub に置いたファイルを ClickOnce で配布できないかを試したから。結論的には、「自動更新機能は使えないかもだけど、インストーラーで配布することはできる。毎回 ZIP を作るのよりはマシだし、使う側も便利かな」って感じ。自動更新機能は次回からは削除する。ちなみに、今回からは ZIP での配布はない。ほしいかな？　この前のプロ生＋わんくま大阪で PowerShell を少し学んだので、パッケージするスクリプトでも書いてみるか。アプリのダウンロードは【こちら】から。 ### 主な変更点  Twitter投稿機能を付けた ClickOnce での配布 ちょっとコードを整理した（今度真面目にやる） タブレットモードで利用したときのちょっとした不具合を修正 GIF キャプチャー機能をつけたら、だいたいやりたいことは終わりだな。  </description>
    </item>
    
    <item>
      <title>Aoba 1.3.0：艦これの画面をビデオキャプチャーできるようにした / Screna っていうライブラリが超便利</title>
      <link>https://blog.daruyanagi.jp/entry/2016/08/29/175526/</link>
      <pubDate>Mon, 29 Aug 2016 17:55:26 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/08/29/175526/</guid>
      <description>これの画面を音声付きで動画キャプチャーできるようにしたよ。それに伴い、UI をいろいろ変更。
  画は My Video\Aoba に保存される。もちろん、ボタン一発で開けるようにしてある。フレームレートは弄れるけど、今のところフォーマットは AVI（MotionJPEG）で固定。 設定画面作るのめんどいからね、しょうがないね。
#### スクリーンキャプチャー用のライブラリ Screna 今回は Screna というライブラリのお世話になった。NuGet で簡単にインストールできる点、動画キャプチャーをサポートしている点などがいい感じ。C# でキャプチャーする方法はいろいろ紹介されてるけど、現時点ではこれが割とモダンだと思った。FFmpeg で MP4 圧縮もできるみたいだけど、今回はそこまでは試していない。基本的な使い方はこんな感じ（公式のサンプルそのまま）。まず AVI サポートのために Screna.SharpAvi を NuGet でインストール。 ``` Install-Package Screna.SharpAvi ```次にネームスペースを追加。 ```cs using Screna; using Screna.Avi; ```cs // どの画像をとってくるかを決める IImageProvider を初期化 var provider = new ScreenProvider(); // デスクトップ全体をキャプチャー // 動画を書き込む AviWriter を初期化 var VideoWriter = new AviWriter(&amp;quot;output.avi&amp;quot;, AviCodec.MotionJpeg); // レコーダーを作って録画開始 var Recorder = new Recorder(VideoWriter, provider, 10); Recorder.Start(); // なにかの処理 Recorder.</description>
    </item>
    
    <item>
      <title>Aoba 1.2.0：連射モードの追加と通知の改善 / GitHub で Pull Request を Merge できなくなった</title>
      <link>https://blog.daruyanagi.jp/entry/2016/08/29/045312/</link>
      <pubDate>Mon, 29 Aug 2016 04:53:12 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/08/29/045312/</guid>
      <description>  射モードを追加。指定したインターバルでタイマーが動き、取得済みのゲームエリアをパシャパシャするヤツ。タイマーが動いていることを示すインジケーターがいいの思いつかなかったので、とりあえずアイコンをオレンジにしておいた。この辺りは永遠に適当。
  ューに Brush をバインドしたつもりが動かずに悩んだけど、System.Windows.Media ではなく System.Drawing になっていた orz
  知もいい感じにしておいた。通知は切ることもできるけど、ゲームエリアの取得に失敗したときだけはでるようにしている。
#### Git の使い方わからん GitHub の Visual Studio 拡張機能を使っていたのだけど、操作をミスって Pull Request を Merge できなくなった。GitHub で「コマンドラインでコンフリクトをなんとかしろやボケ」と言われてしまう（スクショとり忘れた）。とりあえず閉じておいた。ローカルの master とリモートの master に齟齬ができたみたいだなぁ。   したいのだけど、やり方がさっぱりわからなかったのだが、「GitHub for Windows」を起動してごちゃごちゃしていると……
  んかコンフリクトのあるファイルが表示されたので、当該部分を消してコミットして Sync しておいた（Sync がなにやってんのかはイマイチよくわからんが）。なんかよくわからんけど助かった……。Visual Studio 拡張機能にもいいところがあるんだろうけど、_ブランチ切って*1、コードをしこしこ書いて、終わったらプルリクエスト作って、GitHub で Merge して、Release を作成する（、ブランチを削除する）_っていうのがシームレスにできる「GitHub for Windows」の方が自分はいいかも。手を動かしてるうちに、いろいろ分かってくるかもだし（ただし、Sync はイマイチよくわからん）。
*1:今回はここで間違ったみたい。remote と local が同期されていないのに remote からブランチをきって local にコミットしたのか？  </description>
    </item>
    
    <item>
      <title>艦これのスクリーンショットを撮れるツールを自作した</title>
      <link>https://blog.daruyanagi.jp/entry/2016/08/28/155619/</link>
      <pubDate>Sun, 28 Aug 2016 15:56:19 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/08/28/155619/</guid>
      <description>  休み中にオンラインストレージの掃除やツールのアップデートをやっていたのだけど、愛用していた艦これのキャプチャーツールが動かなくなったので、WPF で自作した。一応自分ところでは動いているのだけど（Windows 10 version 1607＋Visual Studio 2015 Update 3で動作確認）、参照の不足なんかで動かないことがあるかもしれない。使い方は
 一番左の検知ボタンを押してゲーム画面の範囲を検出する 検出に成功すると、キャプチャーボタンが有効化される キャプチャーボタンを押す だけ。キャプチャーが成功すると、トーストが出る（なので、Windows 8 以降じゃないと動かないと思う）。   ーストをクリックすると、キャプチャーした画像にアクセスできる。
  応、頑張った点としては
 マルチモニター対応（自分が Surface 3 or サブディスプレイで遊んでるので スケーリングとか拡大表示にも対応してるかも（大きさは決め打ちにしていない  ゲーム画面の左上ピクセルかなーって感じのピクセルを探して、そこからある程度デカい矩形を検出 そんな感じで割と適当なのと、ちょっと処理が遅いかなって感じなので、気が向いたら改善するかも  みたいな感じ。簡易なロジック自体は割と簡単にできたけど、UI を整えたりなんだかんだで（WPF でトーストのだしかたわかんねぇ……ぐちゃぐちゃ参照を追加したけど、ここでちょっと間違ってる気がする）、半日ぐらいかかった（  #### 追伸 Visual Studio の GitHub 拡張を使ってみたけど、やっぱり自分には GitHub アプリの方が使いやすいかな……。  #### 追記 タブレットモードでも最前面表示されるように改修。  WindowStyle を ToolWindow にする ShowTaskbar を false にする でいけるっぽい。  </description>
    </item>
    
  </channel>
</rss>