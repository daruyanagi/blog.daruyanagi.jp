<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.net Web Pages on blog.daruyanagi.jp</title>
    <link>https://blog.daruyanagi.jp/tags/asp.net-web-pages/</link>
    <description>Recent content in ASP.net Web Pages on blog.daruyanagi.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 15 Aug 2017 03:20:10 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/asp.net-web-pages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Visual Studio 2017.3 が出たっぽいので、ASP.NET Core Razor Pages をチラ見してみる</title>
      <link>https://blog.daruyanagi.jp/entry/2017/08/15/032010/</link>
      <pubDate>Tue, 15 Aug 2017 03:20:10 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/08/15/032010/</guid>
      <description>Visual Studio 2017 Version 15.3 ReleasedVisual Studio 2017.3 に合わせて .NET Core 2.0 などもリリースされたみたいなので、かねてからやってみたかった Razor Pages をチラ見してみました。ASP.NET Core Razor Pages は、とっても単純にいうと、C# で PHP みたいにサクッと Web ページ（CSHTML、名前の通り HTML に C# を埋め込んだ感じ）を書くためのフレームワークです。_MVC とかめんどくせえ、ペライチのサイト（でも、サーバーサイドでの処理はちょっと必要）を作りたいだけなんじゃー！　_というときに便利。むかしは ASP.NET Web Pages という技術があったのですが、ASP.NET Core ではこれを使うようですね、よく知らんけど。
### プロジェクトの作成  ず、［新しいプロジェクト］コマンドで .NET Core、ASP.NET Core Web アプリケーションと辿ってソリューションを作ります。上の方に“.NET Framework 4.7”とか書いてあるのは気にしない。
  リューションを作成するとアプリケーションのタイプを選択するダイアログが現れるので、今度は上部のプルダウンメニューから“.NET Core”、“ASP.NET Core 2.0”を選択し、“Web アプリケーション”を作成。これで ASP.NET Core Razor Page のサンプルページが出力されるはずです。今回は“チラ見”なのでそのまま進みますが、一度“空”のアプリケーションから Razor Pages を使うまでもやってみたいですね。
  りあえず［F5］キーで実行。Twitter Bootstrap＋jQuery ベースの割とごついサンプルページをブラウザーで表示することができました。</description>
    </item>
    
    <item>
      <title>Azure Web App＋Job＋Table Storage ：Twitter の位置情報を拾ってマッピングする</title>
      <link>https://blog.daruyanagi.jp/entry/2017/04/15/170659/</link>
      <pubDate>Sat, 15 Apr 2017 17:06:59 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/04/15/170659/</guid>
      <description>前 WebMatrix＋SQL CE で作っていたものを Visual Studio 2017 で編集したら、ランタイムだかライブラリのバージョンの食い違いで起動不能になった＆いろいろ試行錯誤したけど Visual Studio 2017 から SQL CE（WebMatrix.Data）がうまく扱えなかったので、データを Azure Table Storage へ保存するように書き換えた。
Daruyanagi API : Check-insぶっちゃけよくわかっていないのだけど、ちゃんと動いているみたいなのでよしとする（ぉ### Twitter の位置情報  witter の位置情報は
Place：大まかな位置を共有（矩形）Coordinates：経度・緯度を正確に共有（点）の2つがあるみたい。面倒な話だが Coordinates はアプリで明示的に・共有する都度［正確な位置情報を共有］オプションを有効にしなければ共有されない（Foursquare/Swarm などのチェックインアプリでは共有されることもあるみたいだが、それはアプリの意図した動作だと思うので問題ない）。今回ほしいのは Coordinates なので、これを定期的に収集することにした。```cspublic static void CollectCheckIns(){// CONNECTION_STRING は Azure Table Storage の接続文字列//// Web Jobs プロジェクトを作成// ・単なるコンソールアプリみたい//// NuGet で// ・CoreTweet：Twitter のライブラリ// ・WindowsAzure.</description>
    </item>
    
    <item>
      <title>はてなブログのドメインを daruyanagi.jp から blog.daruyanagi.jp へ引越しした</title>
      <link>https://blog.daruyanagi.jp/entry/2017/03/26/234347/</link>
      <pubDate>Sun, 26 Mar 2017 23:43:47 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/03/26/234347/</guid>
      <description>まり気付かれてない気がしますが（こっそりやったので！）、はてなブログのドメインをお引越ししました。はてなブログを独自ドメインにする話はよく見かけますが、独自ドメインで運用していたはてなブログを別のドメインへ移動させた例はあまりないかもしれないので、メモがてら残しておきます。とはいえ、心配したようなトラブルもとくに起こりませんでした。1時間ちょっと はてなブログ がダウンしたのと、AdSense がちょっと減ったような気がする程度です。
### 以前の状態と解決すべき課題以前はdaruyanagi**.net**：メインのブログ（WordPress）daruyanagi**.jp**：はてなブログという運用をしていたのですが（こういうちょっと謎な構造になっていたのは、もっぱら歴史的な事情によります）、WordPress よりも はてなブログの方が管理が楽だったこともあり、いつしか daruyanagi.jp がメインに。持て余していた daruyanagi.net をポートフォリオサイト（というか自己紹介サイト）っぽい感じにして使っていたのですが、とある日、ドメインの延長手続きを失念してしまい、daruyanagi.net を失ってしまいました。  在は水素水を布教するサイトになっています。そんなわけで、
daruyanagi.jp：はてなブログ**about.**daruyanagi.jp：自己紹介サイトというよくわからない構造になってしまい、ちょっと困っていました。できればこれを**blog.**daruyanagi.jp：はてなブログdaruyanagi.jp：自己紹介サイトという感じに整理したかった。あと、トップドメインで はてなブログ を運用するのはあまりよくないので直したかった、というのもあります。&amp;gt;※はてなブログでは、サブドメインを使用しないexample.comでブログを運用すると、ドメイン名の仕組み上、トラブルの原因になることがあります。取得したドメインの前に、必ずサブドメイン（wwwやblogなど）を付加してください。はてなブログを独自ドメインで利用する - はてなブログ ヘルプ Twitter で煽られるのも悲しいですしね！
RFC 違反ドメイン
&amp;mdash; しばやん (@shibayan) March 25, 2017  br/&amp;gt;
### WebMatrix × ASP.NET Web Pages で自己紹介サイトを構築し、Azure へ配置するというわけで、サイトのお引越し処理です。やらなければいけないのは以下の2つになります。はてなブログを daruyanagi.jp から blog.daruyanagi.jp へ移動独自ドメインの割り当てを解除し、daruyanagi.hatenablog.com に戻すDNS設定を行うはてなブログに新しい独自ドメインを割り当てる自己紹介サイトを daruyanagi.</description>
    </item>
    
    <item>
      <title>WebMatrix とおさらばして、Visual Studio 2015 で ASP.NET Web Pages をはじめる</title>
      <link>https://blog.daruyanagi.jp/entry/2017/02/12/100000/</link>
      <pubDate>Sun, 12 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/02/12/100000/</guid>
      <description>年愛用してきた「WebMatrix」ですが、昨年10月に2017年11月1日 でのサポート終了がアナウンスされました。
&amp;gt;Hi everyoneAfter a long and successful run, Microsoft has decided to end formal support of WebMatrix. Formal support will end on November 1st, 2017. Community support will continue on the WebMatrix forums Please take a look at Visual Studio Code, our new, free, open source, multi-platform editor! VS Code support git integration, extensions and a whole bunch of other great features!Thanks!The WebMatrix teamWebMatrix formal support ends November 1st, 2017 : The Official Microsoft IIS Forums   でにテンプレートをダウンロードする際に 404 が発生することが多くなったほか、拡張機能のダウンロード提供が終了しており、第一線で使うにはつらい状況になっています。そろそろ乗り換えを検討すべきでしょう。Microsoft は後継ソフトとして「Visual Studio Code」を推奨していますが、これは統合ターミナルでバリバリとコマンドを打つ感じなので、GUI に甘やかされた僕にはしんどい感じ（最近「Express」を少し触っているのですが、そっちの文化にあわせるなら割と使いやすいですけどねー）。いずれ慣れないといけないなーとは思うんですが、APS.</description>
    </item>
    
    <item>
      <title>WebMatrix：フィードを読み込むときに System.Xml.XmlException が発生する</title>
      <link>https://blog.daruyanagi.jp/entry/2016/06/03/190631/</link>
      <pubDate>Fri, 03 Jun 2016 19:06:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/06/03/190631/</guid>
      <description>ASP.NET Web Pages 製の BOT が、ある日を境に突然、System.Xml.XmlException エラーを吐くようになった。
&amp;gt;The element with name &amp;amp;#39;RDF&amp;amp;#39; and namespace &amp;amp;#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;amp;#39; is not an allowed feed format.  某サイトのリニューアルで、RSS 2.0 が RSS 1.0 になったせいでフィードが読めなくなったらしい／(^o^)＼
&amp;gt;Classes That Model Syndication Feeds and Items SyndicationFeed - represents a syndication feed. Has properties like Title, Description, Links, and Items. The Items property represents the collection of content items expressed in the feed. SyndicationItem - represents a specific syndication feed item and includes properties like Title, Summary, PublishDate, Authors, and so on.</description>
    </item>
    
    <item>
      <title>WebMatrix：改修工廠の早見表がほしかったので作ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2015/09/19/203816/</link>
      <pubDate>Sat, 19 Sep 2015 20:38:16 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/09/19/203816/</guid>
      <description>  週は超忙しい＆体調がよろしくなかった“ので”、合間を見つけて前々からほしかった改修工廠の早見表を作ってみた。接続詞が間違っているというツッコミが入りそうだけど、こういうのって、そういうときにこそやりたくならない？
### 最初に作ったヤツ  SP.NET Web Pages ＋ SQL Server Compact で作ってみたけど、だいぶ遅かった。遅いのは多分、自分が SQL わかってないせいだと思う（SELECT でごっそりとってきたデータを LINQ で加工するとかいうわけのわからないことをやっていた）。SQL が分かんないのは一朝一夕に改善できないので、とりあえずデータベースへの問い合わせ結果をキャッシュしまくってみたけれど、スタートアップの遅さは改善できない。Web サイトがスタンバイ（スリープ？　なに？）したら、キャッシュを一から再構築しなきゃいけないのも困った。――というわけで、廃棄する予定。
http://akashi.azurewebsites.net/### 二番目に作ったヤツ  、ちょっと考えてみたんだけど、こういうデータっていうのは稀にあるサーバーのメンテナンスのときにしか更新されないわけだ。だったら、なにもデータベースに入れる必要はなかった（CURD のうち R しかやらへんやん？）。JSON か何かでデータを用意しておいて、サーバーのスタートアップ時に読み込めばいい。俺ってアホだなーと思いながら、ぐちゃぐちゃっと今日半日で作ったら（ロジック組むより、データ打ち込む方がよっぽど時間かかった）、最初に作ったヤツよりだいぶ早くて満足。コードを整理しながらロジック見直せばもうちょっと早くなりそう。なんせ今のは cshtml に foreach が腐るほど埋まってるという正真正銘のクソコードだし……ちょうどいいから今度 GitHub にあげて、GitHub Flow ってのを勉強するネタにしようと思う。
http://akashiarsenal.azurewebsites.net/ほんとうはこれを Windows Phone に移植しておでコンに出したかったけれど、いつの間にか締め切り過ぎてたみたい。残念。艦これ Android 版が出るらしいし、Android アプリにするのもアリかなぁ？　</description>
    </item>
    
    <item>
      <title>WebMatrix： URL にドットを含めたい</title>
      <link>https://blog.daruyanagi.jp/entry/2015/09/13/032922/</link>
      <pubDate>Sun, 13 Sep 2015 03:29:22 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/09/13/032922/</guid>
      <description>  iki エンジンなんかを作るときなど、「ドット（.）」を URL に含めたい場合は、Web.config に一行、以下のように加えるといいみたい。
&amp;lt;!--?--&amp;gt;xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;.webServer&amp;gt;runAllManagedModulesForAllRequests=&amp;#34;true&amp;#34; /&amp;gt;.webServer&amp;gt;```静的リソースまでアプリケーションで処理するようになる（？）ので、効率が悪そうだけど。もっとちゃんと対策したければ、以下の URL が参考になりそう。&amp;lt;iframe src=&amp;#34;//hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F11728846%2Fdots-in-url-causes-404-with-asp-net-mvc-and-iis&amp;#34; title=&amp;#34;Dots in URL causes 404 with ASP.NET mvc and IIS&amp;#34; class=&amp;#34;embed-card embed-webcard&amp;#34; scrolling=&amp;#34;no&amp;#34; frameborder=&amp;#34;0&amp;#34; style=&amp;#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;</description>
    </item>
    
    <item>
      <title>「Visual Studio Community」で ASP.NET Web Pages をはじめる</title>
      <link>https://blog.daruyanagi.jp/entry/2015/07/05/220634/</link>
      <pubDate>Sun, 05 Jul 2015 22:06:34 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/07/05/220634/</guid>
      <description>んなも大好きな「WebMatrix」ですが、そろそろ本格的に“なかったこと”になっているような気がしてならない今日この頃。代わりとなるのはおそらく「Visual Studio Code」なのでしょうが、まだちょっとベータ版なので、今回は定評のありまくる「Visual Studio Community」で ASP.NET Web Pages をはじめる方法を調べてみました。「WebMatrix」で“空のサイト”に相当するものを作るのが今回の目標です。
### とりあえずプロジェクトを作成する  ずはプロジェクトを作成する必要があります。プロジェクトの新規作成ダイアログで［Templates］－［Visual C#］－［Web］－［Visual Studio 2012］とツリーを辿り、「ASP.NET Empty Web Application」を選択します。Visual Basic じゃないと死んでしまう病に冒されている人は、［Visual C#］の代わりに［Visual Basic］を選択するとよいでしょう。
  なみに、［Templates］－［Visual C#］－［Web］にある「ASP.NET Web Application」テンプレートを使っても構いません。
  のテンプレートを選択すると、プロジェクトの種類なんかを選べるダイアログが現れるので、ここで「Empty」を選択すればさっきと同じ結果になると思います（厳密にくらべたわけじゃないから知らんけど）。このダイアログからプロジェクトを作ると Azure Web Sites も同時に作れるので、必要な場合はこっちを選ぶと手間が省けるかも。
### ページの追加  ロジェクトを作成したら、ページの追加。コンテストメニューを開いて［Add］－［MVC 5 View Page (Razor)］を選択します。
  とは名前を付けると、cshtml ファイルが生成されます。ASP.NET（Web Pages）の流儀にしたがって、最初のファイルの名前は Default.cshtml にしておきましょうか。中身はこんな感じです。
@{Layout = null;}&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;&amp;amp;lt;div&amp;gt;&amp;amp;lt;/div&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```body が空っぽなので、ついでにこんな感じでサンプルコードを加えておきます。```cs@{Layout = null;var message = &amp;#34;Hello!</description>
    </item>
    
    <item>
      <title>WebMatrix：フィードを読み込んでデータベースへつっこむときに System.Data.SqlServerCe.SqlCeException が発生する。</title>
      <link>https://blog.daruyanagi.jp/entry/2015/06/25/050342/</link>
      <pubDate>Thu, 25 Jun 2015 05:03:42 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/06/25/050342/</guid>
      <description>だいぶ悩んで、Visual Studio まで立ち上げていろいろデバッグしていたのだけど、原因は簡単だった。
&amp;gt;### datetime300 分の 1 秒、つまり 3.33 ミリ秒の精度で、**1753 年 1 月 1 日から 9999 年 12 月 31 日まで**の日付と時刻のデータを格納するデータ型です。値は .000、.003、または .007 ミリ秒の単位になるように丸められます。2 つの 4 バイト整数として格納されます。最初の 4 バイトは、base date である 1900 年 1 月 1 日からの日数、またはこの日までの日数を格納します。基準日とは、システムが参照する日付です。datetime 型の値には、1753 年 1 月 1 日より前の日付を使用できません。もう一方の 4 バイトは、午前 0 時から数えた時間をミリ秒単位で格納します。秒の有効範囲は 0 から 59 までです。データ型   方、C# の default(DateTime) は 0001/01/01 0:00:00。つまり、SyndicationFeed オブジェクトの LastUpdateTime プロパティあたりにちゃんと値がセットされてなくて（そういうフィードを配信しているサイトは割とある）、default(DateTime) を返してくるとき、それをそのまま SQL CE データベースに格納しようとするとエラーになる。</description>
    </item>
    
    <item>
      <title>WebMatrix 3：oEmbed ヘルパーを作ってみた（２）</title>
      <link>https://blog.daruyanagi.jp/entry/2014/08/12/194954/</link>
      <pubDate>Tue, 12 Aug 2014 19:49:54 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/08/12/194954/</guid>
      <description>WebMatrix 3：oEmbed ヘルパーを作ってみた - だるろぐ の続き。今回は Flickr の埋め込みをやってみようかと思う。
### ~/App_Code/OEmbed.cshtml```cs@helper Flickr(string url) {const string API_ENDPOINT = &#34;http://www.flickr.com/services/oembed/&#34;;using (var downloader = new WebClient()){try{// URL を組み立てて JSON の oEmbed データを取得var request = string.Format(&amp;quot;{0}?url={1}&amp;amp;amp;format={2}&amp;quot;, API_ENDPOINT, url, &amp;quot;json&amp;quot;);var oembed_data = downloader.DownloadString(request);var oembed_json = Json.Decode(oembed_data);@ObjectInfo.Print(oembed_json) // デバッグのためvar embed_type = oembed_json.type as string;switch (embed_type) // photo と video の二種類がある{case &amp;quot;photo&amp;quot;: &amp;lt;figure&amp;gt; &amp;lt;img src=&#39;@oembed_json.</description>
    </item>
    
  </channel>
</rss>