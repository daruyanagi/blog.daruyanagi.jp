<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PowerShell on blog.daruyanagi.jp</title>
    <link>https://blog.daruyanagi.jp/tags/powershell/</link>
    <description>Recent content in PowerShell on blog.daruyanagi.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 03 Nov 2018 20:24:17 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PowerShall：VPN 接続をセットアップする</title>
      <link>https://blog.daruyanagi.jp/entry/2018/11/03/202417/</link>
      <pubDate>Sat, 03 Nov 2018 20:24:17 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/11/03/202417/</guid>
      <description>OS をクリーンアップするたびに GUI で VPN をセットアップするのが面倒くさくなったので、PowerShell でできないかなーと思って少し調べた。Pow</description>
    </item>
    
    <item>
      <title>6月23日：貝殻本で PowerShell のお勉強をした</title>
      <link>https://blog.daruyanagi.jp/entry/2018/06/29/185504/</link>
      <pubDate>Fri, 29 Jun 2018 18:55:04 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/06/29/185504/</guid>
      <description>第1章だけ読んで、ちょっと手を動かしてみた。6月5日：『PowerShell実践ガイドブック』 - だるろぐ 今回の目標は PowerShell ISE から Visual Studio Code への移行が</description>
    </item>
    
    <item>
      <title>6月5日：『PowerShell実践ガイドブック』</title>
      <link>https://blog.daruyanagi.jp/entry/2018/06/05/030249/</link>
      <pubDate>Tue, 05 Jun 2018 03:02:49 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/06/05/030249/</guid>
      <description>6月1日（金）：お仕事お休み。でも、1日中業務改善のための Trello ＆ Slack 設定や環境のセットアップをしていた。 Trello：メールでカードを追加する -</description>
    </item>
    
    <item>
      <title>PowerShell：陸上自衛隊のイラク派遣日報をまとめてダウンロードする</title>
      <link>https://blog.daruyanagi.jp/entry/2018/04/17/114152/</link>
      <pubDate>Tue, 17 Apr 2018 11:41:52 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/04/17/114152/</guid>
      <description>$source = &amp;#34;https://www.asahi.com/articles/ASL4J669JL4JUEHF016.html&amp;#34; $folder = &amp;#34;C:\Users\Hideto\pdf&amp;#34; $result = Invoke-WebRequest $source -UseBasicParsing $urls = $result.Links.href | Get-Unique | where { $_ -match &amp;#34;.pdf&amp;#34; } foreach ($url in $urls) { $file = ($url -split &amp;#34;/&amp;#34;)[-1] Invoke-WebRequest -Uri $url -OutFile (Join-Path $folder $file) } 構量があるんだなぁ……（終わらねぇ。文学作品として割と楽し</description>
    </item>
    
    <item>
      <title>Omawari 1.2.0.0：いわゆる Web 更新チェッカーだけど、細かいところを改善した</title>
      <link>https://blog.daruyanagi.jp/entry/2017/09/23/140731/</link>
      <pubDate>Sat, 23 Sep 2017 14:07:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/09/23/140731/</guid>
      <description>br/&amp;gt; メインリストビューに Last Update 欄を設ける それに伴うコード整理 Refresh ボタンは不要になったので廃止 通知トレイで DEBUG モードなのがわかるように ファイル操作の非</description>
    </item>
    
    <item>
      <title>PowerShell：環境構築を（なるべく）自動化する</title>
      <link>https://blog.daruyanagi.jp/entry/2017/05/17/073339/</link>
      <pubDate>Wed, 17 May 2017 07:33:39 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/05/17/073339/</guid>
      <description>Windows 10 は［回復］オプションで割と簡単に初期化できるので、なんか調子悪くなったときは気軽にキレイサッパリにしているのだけど、そのあとの環境構築を</description>
    </item>
    
    <item>
      <title>PowerShell：String を String で分割する</title>
      <link>https://blog.daruyanagi.jp/entry/2017/05/12/003539/</link>
      <pubDate>Fri, 12 May 2017 00:35:39 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/05/12/003539/</guid>
      <description>まだまだ PowerShell がカタコトしかしゃべれないチンカスですが、皆様はいかがお過ごしでしょうか。さて、この間こんな感じのコードを書いたんですよ。 $text = &amp;amp;#39;Microsoft Edge</description>
    </item>
    
    <item>
      <title>PowerShell：スクレイピングすると“HRESULT からの例外:0x800A01B6”が発生する</title>
      <link>https://blog.daruyanagi.jp/entry/2017/04/30/155040/</link>
      <pubDate>Sun, 30 Apr 2017 15:50:40 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/04/30/155040/</guid>
      <description>メインに使っているデスクトップ端末を Windows 10 Creators Update へアップデートしたのだけど、PowerShell：ストアアプリのセール情報を取得する - だるろぐ 以</description>
    </item>
    
    <item>
      <title>PowerShell：メールが文字化けする</title>
      <link>https://blog.daruyanagi.jp/entry/2017/03/05/090000/</link>
      <pubDate>Sun, 05 Mar 2017 09:00:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/03/05/090000/</guid>
      <description>PowerShell で SmtpClient を使ってメールを送ったのだけど、件名が化けてしまった。 &amp;gt; NET 4.5 では内部でエンコードされた件名をデコードして持つように実装が変わったので、</description>
    </item>
    
    <item>
      <title>PowerShell：ストアアプリのセール情報を取得する</title>
      <link>https://blog.daruyanagi.jp/entry/2017/03/04/220000/</link>
      <pubDate>Sat, 04 Mar 2017 22:00:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/03/04/220000/</guid>
      <description># スクリプトと同じパスにある StoreApps.txt から URL を読み込む $path = $PSScriptRoot | Join-Path -ChildPath &amp;#34;StoreApps.txt&amp;#34; $urls = (Get-Content $path) -as [string[]] # デバッグ用のサンプル # $urls =@( # &amp;#34;https://www.microsoft.com/ja-jp/store/p/nextgen-reader/9wzdncrfj262&amp;#34; # ) foreach ($url in $urls) { try { $request = Invoke-WebRequest $url # アプリ名</description>
    </item>
    
  </channel>
</rss>