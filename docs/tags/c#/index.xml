<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on blog.daruyanagi.jp</title>
    <link>https://blog.daruyanagi.jp/tags/c#/</link>
    <description>Recent content in C# on blog.daruyanagi.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 09 Jun 2018 16:35:00 +0000</lastBuildDate><atom:link href="https://blog.daruyanagi.jp/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UWP：FullTrustProcessLauncher で起動したプログラムに引数を渡す</title>
      <link>https://blog.daruyanagi.jp/entry/2018/06/09/163500/</link>
      <pubDate>Sat, 09 Jun 2018 16:35:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/06/09/163500/</guid>
      <description>できないのかなーと思ってたのだけど、イケるっぽい。 stackoverflow.com こんな風に desktop:ParameterGroup をあらかじめ登録して…… &amp;lt;?xml version=&amp;quot;1.0&amp;quot;encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;Package …… xmlns:desktop=&amp;quot;http://schemas.microsoft.com/appx/manifest/desktop/windows10&amp;quot; &amp;gt; &amp;lt;Applications&amp;gt; &amp;lt;Application Id=&amp;quot;App&amp;quot;Executable=&amp;quot;$targetnametoken$.exe&amp;quot;EntryPoint=&amp;quot;$targetentrypoint$&amp;quot;&amp;gt; &amp;lt;Extensions&amp;gt; &amp;lt;desktop:Extension Category=&amp;quot;windows.fullTrustProcess&amp;quot; Executable=&amp;quot;Yakitori.Console\Yakitori.Console.exe&amp;quot;&amp;gt; &amp;lt;desktop:FullTrustProcess&amp;gt; &amp;lt;desktop:ParameterGroup GroupId=&amp;quot;Desktop&amp;quot;Parameters=&amp;quot;/d&amp;quot;/&amp;gt; &amp;lt;desktop:ParameterGroup GroupId=&amp;quot;Active&amp;quot;Parameters=&amp;quot;/a&amp;quot;/&amp;gt; &amp;lt;/desktop:FullTrustProcess&amp;gt; &amp;lt;/desktop:Extension&amp;gt; &amp;lt;/Extensions&amp;gt; &amp;lt;/Application&amp;gt; &amp;lt;/Applications&amp;gt; &amp;lt;/Package&amp;gt; そ</description>
    </item>
    
    <item>
      <title>WPF ＋ PhantomJS で Web ページの内容を取得してみる</title>
      <link>https://blog.daruyanagi.jp/entry/2017/03/21/195845/</link>
      <pubDate>Tue, 21 Mar 2017 19:58:45 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/03/21/195845/</guid>
      <description>「AngularJS で作られた Web サイトの内容がとれないよ……」って Twitter で泣いてたら、@nakaji 先生が「PhantomJS 使えばええやろ」的</description>
    </item>
    
    <item>
      <title>Visual Studio 2017 で Windows サービスを作った</title>
      <link>https://blog.daruyanagi.jp/entry/2017/03/10/214227/</link>
      <pubDate>Fri, 10 Mar 2017 21:42:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/03/10/214227/</guid>
      <description>まぁ、この程度のことであれば、今までとあんまり変わらんと思うけどね。ちょこちょこ便利になってる感じはある。 今回の目標 実行ファイルが書き換わっ</description>
    </item>
    
    <item>
      <title>UWP：はてなの oAuth 認証</title>
      <link>https://blog.daruyanagi.jp/entry/2016/09/19/224430/</link>
      <pubDate>Mon, 19 Sep 2016 22:44:30 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/09/19/224430/</guid>
      <description>プログラミングの秋……なのかな？ 最近、またプログラミングをちょろちょろとやっています。今回は、UWP。一つ新しいのができたのでストアに提出し</description>
    </item>
    
    <item>
      <title>C#：非同期なイベント？</title>
      <link>https://blog.daruyanagi.jp/entry/2016/09/15/123548/</link>
      <pubDate>Thu, 15 Sep 2016 12:35:48 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/09/15/123548/</guid>
      <description>たとえばこんなコードがあるとする。ラムダ式でイベントハンドラを実装する、よくあるヤツ。 public void Run(IBackgroundTaskInstance taskInstance) { taskInstance.Canceled += (sender, reason) =&amp;gt; { Hoge(); }; } イベントハンドラ内で非同期</description>
    </item>
    
    <item>
      <title>引数で匿名型を受け取る</title>
      <link>https://blog.daruyanagi.jp/entry/2014/11/03/184149/</link>
      <pubDate>Mon, 03 Nov 2014 18:41:49 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/11/03/184149/</guid>
      <description>string クラスのためにこんな拡張機能があれば便利かなぁ、と思った。指定した要素タグでソーステキストを括って、HTML タグを出力できる。 public static string Wrap(this string source,</description>
    </item>
    
    <item>
      <title>VirusTotal API を使ってみる</title>
      <link>https://blog.daruyanagi.jp/entry/2014/10/24/025219/</link>
      <pubDate>Fri, 24 Oct 2014 02:52:19 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/10/24/025219/</guid>
      <description>WPF で VirusToral API を利用するサンプルを書いてみました（書いた後に気付いたのですが、あんまり WPF 要素なかったです）。 VirusTotal とは 指定したファイルをいろんなウイル</description>
    </item>
    
    <item>
      <title>Windows Store Apps：Cookie を取得して、ログインが必要なページを閲覧する（はてなフォトライフ）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/01/031148/</link>
      <pubDate>Wed, 01 May 2013 03:11:48 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/01/031148/</guid>
      <description>さてはて、Widows Store Apps: WSSE &amp;#x8A8D;&amp;#x8A3C;&amp;#xFF08;&amp;#x306F;&amp;#x3066;&amp;#x306A;&amp;#x30D5;&amp;#x30A9;&amp;#x30C8;&amp;#x30E9;&amp;#x30A4;&amp;#x30D5;&amp;#xFF09; - &amp;#x3060;&amp;#x308B;&amp;#x308D;&amp;#x3050; で AtomPub API（&amp;#x306F;&amp;#x3066;&amp;#x306A;&amp;#x30D5;&amp;#x30A9;&amp;#x30C8</description>
    </item>
    
    <item>
      <title>Widows Store Apps: WSSE 認証（はてなフォトライフ）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/30/190004/</link>
      <pubDate>Tue, 30 Apr 2013 19:00:04 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/30/190004/</guid>
      <description>Surface RT（Windows RT）で“はてなブログ”を書くのが微妙にめんどくさいので、“はてなフォトライフ”のクライアントでも作ろうかと思い、@k</description>
    </item>
    
    <item>
      <title>--&amp;gt; 演算子</title>
      <link>https://blog.daruyanagi.jp/entry/2013/02/26/210221/</link>
      <pubDate>Tue, 26 Feb 2013 21:02:21 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/02/26/210221/</guid>
      <description>C++ で新しい演算子“--” が採用されたそうだが、これは C# ですでに利用可能である。この演算子は、左辺の変数を右辺値まで 1 ずつ減算する。 @{ int x = 10;</description>
    </item>
    
  </channel>
</rss>
