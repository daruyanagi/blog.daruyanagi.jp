<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET Core on だるやなぎ</title>
    <link>https://daruyanagi.net/tags/asp.net-core/</link>
    <description>Recent content in ASP.NET Core on だるやなぎ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 23 Jun 2018 20:45:20 +0000</lastBuildDate>
    
	<atom:link href="https://daruyanagi.net/tags/asp.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASP.NET Core：daruyanagi.jp を ASP.NET Core 2.1 へ移行させた</title>
      <link>https://daruyanagi.net/entry/2018/06/23/204520/</link>
      <pubDate>Sat, 23 Jun 2018 20:45:20 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/06/23/204520/</guid>
      <description>今まで「2.1？　あ、そぅ」と聞き流していた俺氏、移行作業をせざるを得ない模様 / “「.NET Core 2.0」のサポートは9月1日で終了 ～「.NET Core 2.1」への移行を - 窓の杜” https://t.co/3qCA4Fnozt— だるやなぎ 帝国元帥 (@daruyanagi) 2018年6月21日Current とか LTS とかよくわかんないんですが、ASP.NET Core 2.0 のサポートが終わるそうなので、daruyanagi.jp の移行作業を行いました。
 ### SDK のインストール   とりあえずターゲット フレームワークを切り替えとくか、と思ったのですが 2.1 がプルダウンに出てこないので、SDK のインストールを行います。[ASP.NET - Get started in 10 minutes](https://www.microsoft.com/net/learn/apps/web/get-started/windows)なんとなくインストーラーをダウンロードしちゃったのですが、2.0 のインストールは chocolatey でやった気がするからコマンドラインでもよかった。    ちゃんとプルダウンに 2.1 がでてきたので切り替えました。    ### とりあえずデバッグ → エラー   とりあえず［F5］してみると、エラーが発生。エラーメッセージの意味はよくわかんなかったのですが、IIS Express がダメだというのはわかったので、それ以外に切り替えました。  それ以外にもいろいろ警告が出ていた気がするけど、キレイさっぱりなくなって、見慣れた daruyanagi.jp が「Microsoft Edge」で実行されました。IIS Express じゃなくても、ASP.NET Core に内蔵の Webrick みたいなサーバーが使えるんだな（何度聞いても名前が覚えられないんだけど、Kestrel っていうらしい？）。  ### NuGet パッケージの入れ替え このままデプロイしちゃおうかなって思ったのですが、変なところでハマると嫌だなーと思い、しばやんのブログでもう一度いろいろ確かめました。[ASP.</description>
    </item>
    
    <item>
      <title>2018年1月18日の日記：松山～札幌便復活！　なぜかラジカセを買う、Torello で Flow、GitHub に上納、動かねぇ……の5本立て</title>
      <link>https://daruyanagi.net/entry/2018/01/18/195531/</link>
      <pubDate>Thu, 18 Jan 2018 19:55:31 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/01/18/195531/</guid>
      <description>おとんが食いもしない生パスタを大量に購入、冷凍庫にしまったまま出張に出かけて早幾星霜。たいして美味しくないパスタを少しでもおいしく食べる方法はないかと日々悩んでるのですが、この前、Twitter で「キムチ＋ケチャップ＋パスタ」という謎のレシピを見かけたので、適当に作ってみました。とくにレシピをメモったりはしてなかったので、ツイートを目にした時のふわっとしたイメージをベースに作ってみたのですが……まぁ、食えんことはないけど、普通にナポリタン作った方がよかったかもしれない。美味しくないことはないんだけど、味に統一感がないというか、雑多な感じで、B 級としてはなきにしもあらず、な感じでした。ちゃんとレシピ通りに作ったらもう少しカッチリした味になったのかもしれないけど。
### 松山～札幌便復活！ &amp;gt; およそ６年半ぶりの運航再開。松山と札幌を結ぶ直行便がアイベックスエアラインズと全日空の共同運航で今年３月から就航することになった。就航が決まったのは松山空港と北海道・新千歳空港を結ぶ直行便で、アイベックスエアラインズが全日空と共同運航する。 ３月２５日就航開始 松山〜札幌直行便復活 | NNNニュース  2011年11月に運休して以来、およそ6年半ぶりの運航再開なのだそう。今年3月25日から1日1往復が設定されるのだそう。
 松山発：11:35発、14:30着 千歳発：14:20発、16:45着 ちょっと使いにくいかなって思わないでもないですが、一本で行けるのは超便利。札幌で勉強会があるなら、今年は1度ぐらい顔を出してもいいなーって思います。搭乗率75％いかないと、また運休しちゃう＞＜ちなみに、機材は“ボンバルディア社製の７０人乗りジェット機”。ってことはプレミアクラスとかないんだよな。 #### 追記 &amp;gt; 一方、現在、全日空が１日４往復を運航する、松山空港と中部空港を結ぶ路線は、ことし３月２５日から、アイベックスエアラインズとの共同運航を含めて１日３往復に減少することになりました。 松山ー千歳線６年半ぶり就航へ｜NHK 愛媛のニュース    ### Torello で Flow   相変わらず睡眠が不規則なので、夜中3時に「Microsoft Flow」で仕事用のワークフローを作ったりしてました。知らなかったんだけど、「Microsoft Flow」って「Torello」が使えるんだね。コネクターを検索しても出てこない（バグ？）から気が付かなかった。今回やったのは  フィードで記事を取得 全文を取得して、謎ロジックで記事をフィルター 新しいフィードを生成（← ここまでを ASP.NET Core で作成） 結果を Torello のカードとして登録して、チームメンバーと共有 って感じのことです。Torello の API を調べて自分で実装すれば、すべて ASP.NET Core アプリで完結できるんですけど、正直調べるのが面倒。使えるところだけ「Microsoft Flow」（IFTTT でもいいけど）で使うっていう使い方もありじゃないかな？　って思います。  ### GitHub でプライベートリポジトリを作成 上納することにした pic.twitter.com/aBshzku5pd— 平成という一時代を独身で駆け抜けただるやなぎ (@daruyanagi) 2018年1月17日API キーを埋め込んだ Web アプリを GitHub で管理すると、どうやってキーの露出を抑えればいいんだろうって悩んじゃいますよね。僕もさんざん悩んだんですが……おカネの力で解決することにしました。なぜかクレカが通らなかったのだけど、PayPal 経由だと問題なく有償プランにアップデートできました。同じカードなのに、なぜなんだぜ？これでプライベートレポジトリが作れるようになったので、さっそく daruyanagi.</description>
    </item>
    
    <item>
      <title>2018年1月14日の日記：マンガ漬け、新年初うどん、愛媛の人っぽいイベント</title>
      <link>https://daruyanagi.net/entry/2018/01/15/000833/</link>
      <pubDate>Mon, 15 Jan 2018 00:08:33 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/01/15/000833/</guid>
      <description>    昨日の夜は眠れなかったので、ASP.NET Core アプリを作ってるときに戯れに登録した『恋愛ラボ』をまとめ買い（たぶん7,000円）して、朝までずっと読んでた。お正月に『僕らはみんな河合荘』もまとめ買いしたので、今月は15,000円もマンガに使ったことになる。しかも、すべてラブコメに――神よ、この哀れな萌えブタを許したまえ。いつもは今まで買ってたマンガの続巻を買う程度だったのに、最近はなんかやたらまとめ買いをしているような気がする。でもな。おっさんな、もういろいろしんどくてな、かわいい女の子が仲良くしてるマンガでも読まんかったら、この先一秒たりとも生きていけんのや。僕らはみんな河合荘(9) (ヤングキングコミックス)作者: 宮原るり出版社/メーカー: 少年画報社発売日: 2017/04/28メディア: Kindle版この商品を含むブログ (3件) を見るちなみに『僕らはみんな河合荘』は、和風古民家アパート“河合荘”での共同生活を描いたラブコメや。個性的なキャラがドタバタを演じるのがおもろいけど、メインはやっぱり本好きな無表情・不愛想少女とそれを慕う童貞の後輩君との恋物語やな。わいは登場人物の麻弓さんと一緒に「爆発しろ！！」と思いながら読んどるクチやけど、それでいて、こう、不思議と見守りたくなってしまうんやな（そこも麻弓さんと一緒やな）。途中までの話はアニメにもなってて、そっちも……個人的にウサの声があまり好きじゃない（でも、ヘタレ具合っていうか、夢見具合は出てると思う）けど、割とおすすめ。Amazon Prime あたりで観れたんじゃないかな。お気に入りのキャラクターは元霊感少女・林さん。恋愛ラボ(13) (まんがタイムコミックス)作者: 宮原るり出版社/メーカー: 芳文社発売日: 2017/09/07メディア: コミックこの商品を含むブログ (2件) を見る『恋愛ラボ』は、恋に恋する女子中学生どもを描いた傑作や。生徒会室でガキどもが恋愛妄想して、斜め上の特訓して、いろいろ事件になる……みたいな感じのアレや。ガッチガチに恋愛禁止のお嬢様校のはずやのに、巻を経るにしたがって塾やら他校交流会やら文化祭やらで男女交際がゆるゆるになっていくところが気になるが、それに比例してキュンキュン度もましていくんやで。最新刊ではとうとう色気づきやがって……わいは男子校やったから、羨ましさで血の涙を流しそうや。最初の感はアニメに比べて作画が期待外れだったけど、だんだんうまくなってる感じある。かわいい。お気に入りのキャラクターは、副会長。それにしても Activite Pop*1 は優秀やな。マンガ読んでる時間を睡眠時間と誤認してる（5時間15分のヤツがそう）んだけど、一度おしっこで布団を這い出たこともちゃんと記録されている。朝方寝て、少し出かけて、また寝て、合計9時間寝たこともな。これがなかったら、自分のクズっぷりを振り返るチャンスがゼロだったわけで、すごく重宝するわ。なお、振り返ったからといって、生活態度を改めるわけではない模様。あー、書いてたらだんだんテンションが低まってきたわ。創造主はなぜ俺のような駄作をお造りになったのか。  昼は R さんと約束をしていたので、ちょっと眠いけど頑張って11時に起きた。NHK 将棋をみながら（山ちゃんつえー！）、出かける支度をして、久しぶりにバイクのカバーを取っ払い、エンジンに火を入れた。少し寒めだけど、革ジャンを着ていればそれほどでもない。三津までかっ飛ばして、『踊るうどん』で肉玉ぶっかけうどんを食べて、少し R さんと大将と話をした。  んで、R さんからリュックいっぱいに柑橘類をもらった。S さんからもあずかってるとのことで、すごい大量になった……でも、ありがたい。なんか愛媛の人っぽいイベントを味わった気がする。――来月で、引っ越してきて4年目を迎えます。今年はもう振り返り記事は書かないつもり。こっちにいることが普通になったし、あえて書くことも減ってきた。それはそれで大変いいことだと思う。
### 開発 うどん屋さんから帰ってきたあとは、また爆睡して、起きて少しだけアプリ開発もした。今日はあまりやる気がないので、こまごまとしたところだけ。  メモで Markdown 記法を使えるようにしたり……いくつか画面を新設したり。TagHelperSamples っていう NuGet パッケージが緒と便利というか、Tag Helper を便利に使う上での参考になった。   Bootstrap のごちゃごちゃしたマークアップをスッキリさせるための独自タグを定義したり、&amp;lt;markdown / タグで CommonMark に展開したり……そんな感じ。Tag Helper はだいぶ慣れてきたので、これからもガンガン使いこなしたいと思う。インテリセンスで補完できるのがいいなー。 *1:ヘルスウォッチってやつや。運動や睡眠を記録してくれる。GPS とかスマホ通知とか余計な機能なくて、ボタン電池で半年持つのがいい  </description>
    </item>
    
    <item>
      <title>2018年1月13日の日記：TagHelper と「あえて言おう、独身はカスである！」と</title>
      <link>https://daruyanagi.net/entry/2018/01/13/205239/</link>
      <pubDate>Sat, 13 Jan 2018 20:52:39 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/01/13/205239/</guid>
      <description>目が覚めたのは明け方だったと思う。今日は何もしないと決めていたので、冷蔵庫からビールを取り出し、ガビガビ飲みながら Civilization 6 で遊んでた……のだけど、そんなに興が乗らない。というわけで、Visual Studio を広げてちょろちょろとコードをいじってた。こっちもあまりやる気がないので、今日はビューコンポーネントの再利用にでも取り組もうかと、TagHelper を作ってみた。TagHelper については公式のドキュメントもあるし、@miso_soup3 さんの手引きもあるので、それほど難しくないと思う。ASP.NET MVC 6 Tag Helper について - miso_soup3 Blogただ、個人的に２、３ハマってしまったのでメモしておこう。
### @addTagHelper で指定するのはアセンブリ名 TagHelper をビューで利用するには @addTagHelper でロードしておかなくちゃいけないんだけど（_ViewStart.cshtml に書いておくと複数のビューに一括指定できて便利）、ロードの指定は**アセンブリ名**で行う。自分はなぜかネームスペースだと勘違いしてしまっていて、ちゃんと書いたはずなのに動かねーなー、クソだなーと悩んでしまった。クソなのは僕の頭でした。申し訳ない。  TagHelper がちゃんとロードされるとインテリセンスの補完を受けることができるが（タグが太字にもなる）、プロジェクトをリビルドしないと反映されないかもしれない。なお、TagHelper の読み込みは @addTagHelper *, Tsundoku でも @addTagHelper &#34;*, Tsundoku&#34; でもよいみたい。知らんけど。  ### HTML タグを SetContent() するとサニタイズされる → SetHtmlContent() を使う   タグの中身は SetContent() で書き換えるのが基本だけど、HTML タグはエスケープされる。エスケープなしでコンテンツにセットしたい場合は、SetHtmlContent() で「HTML だよ！」と明示すればおっけ。このあたりは string と HtmlString の関係に似ているかもしれない。  ### 書き換え対象のタグは  にしない、Attributes.Clear() は要らないかも &amp;lt;hoge / って書いたタグを TabHelper でいじると、いろいろ謎なことが起こるっぽい。ちゃんと開いて書いといたほうが無難。この前もこれでハマったのにまたやらかすとはな。あと、Attributes はわざわざクリアしなくてもいいっぽい？　Clear() をコメントアウトしてもへんな属性は出力されなかった。変なタイミングでクリアしちゃうと属性ベースで受け渡しされた情報にアクセスできなくなることがあるみたいなので、要らないことはしない方がいいかもね。  これで無事、アクティブティパネル（読書進捗のタイムラインのアイテム）のデザインを共通化することができてスッキリ。でも、TagHelper にするとデバッグ時にコードがいじれなくなるのはちょっと面倒だね。ビューなら変更が効くのに……あらかじめビューでいろいろ試して、デザインが固まったら TagHelper にまとめるって感じにした方がいいかも。  ### インターネットが切れる Visual Studio でちょっと遊んだ後、布団でゴロゴロしているとそのまま爆睡してしまった……たぶん6時間ぐらい、本格的に。再び目を覚ましたのは夕方前だった。クロネコヤマトの配達指定を2時にしていたのに、ビデオを垂れ流しにしていた iPhone の電池が切れていて、アラームが鳴らず……再配達させてしまって、すごく申し訳ないことをした。それはそうと、布団からのそのそ這い出て Surface Bool 2 の電源を入れると、またインターネットがダウンしていた。今週2回目でいい加減うっとうしいので Wi-Fi Analyzer で電波状況をチェックしてみると……  DIRECT-D*** という SSID がモロかぶりしている。ググってみると Direct Wi-Fi 関連のものらしいのだけど……隣近所で電波ビンビンしてんのかな。  しょうがないので、自分とこの Wi-Fi の設定をいじって、チャンネルを少しずらした。接続の不具合も解消されて、いい気分。スマートネットワークリモコン eRemote mini が 5GHz 対応になってくれたら、混線で悩んだりせずに済むのにな。ちなみに、今回使った Wi-Fi Analyzer は Windows ストア アプリで、今はほぼ実質死んでいる Windows 10 Mobile でも使える優れもの。アプリ内課金はあるけど、基本無料だしおススメできると思う。[無線LANの状況をビジュアル表示できる診断ツール「WiFi Analyzer」NOT SUPPORTED](https://forest.</description>
    </item>
    
    <item>
      <title>2018年1月10日の日記：「光あれ！」「インターネットに接続できません」</title>
      <link>https://daruyanagi.net/entry/2018/01/11/020337/</link>
      <pubDate>Thu, 11 Jan 2018 02:03:37 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/01/11/020337/</guid>
      <description>夜中に目を覚ました。「アレクサ、照明をつけて」と闇に呼び掛けた。アレクサが答えた。_「インターネットに接続できません。アレクサアプリのヘルプをご確認ください」ここ最近、Amazon Echo Dot と eRemote に頼りっきりで、照明のリモコンなど戸棚の奥にしまってしまっている。せめてメガネがあれば夜目も効くのだが、灯りがないとメガネを探すことすらできない。メガネは灯りを求め、灯りはメガネを求め……その堂々巡りの中、尿意だけが果てしなく高まっていく。インターネットはインフラだな、と実感させられた。まぁ、それはともかく。昨日はなぜかルーターの調子が悪く、2.4GHz 帯が使えなかった。パソコンのネットは 5GHz 帯でつなげばいいのでなんら問題ないし、むしろそっちの方が輻輳がなく快適なのだと思うけれど、eRemote――説明し忘れていたが、こいつはネットワークに接続できる学習リモコンのようなもので、Amazon Eco Dot（アレクサ）につないで音声で家電をコントロールできる――が 2.4GHz 帯にしか対応していない関係で、2.4GHz 帯をメインに使っていたのだ。おかげで無線でつないでいたプリンターも応答してくれなくなるし……昼過ぎからはなぜか問題が解消されたけど*1、いろいろ踏んだり蹴ったりだった。LinkJapan eRemote mini IoTリモコン 家でも外からでもいつでもスマホで自宅の家電を操作 【AmazonAlexa対応製品】 MINI出版社/メーカー: LinkJapanメディア: エレクトロニクスこの商品を含むブログ (1件) を見るでも、このことが逆に Amazon Echo Dot＋eRemote の最強っぷりを改めて証明してくれたと思う。お布団でぬくぬくしたまま「アレクサ、エアコンつけて」「アレクサ、10分後に教えて（← 部屋が温まるまで二度寝）」「アレクサ、照明つけて」ができるの、ほんまサイコー*2。「スマートスピーカー？　どうせすぐ飽きるだろ」_と思っていたのに、この1カ月ですっかり信者になってしまったよ。eRemote は 5GHz 対応の後継機種が出たら買い足してもいい。仕事部屋だけでなく、リビングにも置いてやる。  ほんとは iPad の修理に出かけたり、サンドイッチ買ったり、温泉や飲みにも出かけたかったけど、軽く雨が降っていたので引きこもり。アプリの開発は、読書の進捗メモ（のユーザーインターフェイスだけ）が実装できた。JavaScript は苦手＆久しぶりでサッパリだったけど、Bootstrap の Modal Dialog を組み込んだり、input の値に応じて Bootstrap の Progress を操作できるようにしてみたり……数値のアップダウンコントロールは Touch Spin というサードパーティ製コンポーネントが使いやすそうで、これも組み込んでみた。Bootstrap TouchSpinちなみに、ASP.NET Core MVC/Razor Page でちょっとしたスクリプトを組み込みたい場合は、Scripts セクションに書いてしまえばいいと思う。ここだったら jQuery のロードが終わってるはずなので。というか、他のところに書いてたら jQuery が全然動かなくて……はじめは仕方なくバニラで書いてた。Touch Spin を組み込んだら開発者ツールのコンソールに「jQuery が未定義」みたいなエラーが出てきて、はじめて jQuery がロードされていないことに気づいた。
@section Scripts { @{ await Html.</description>
    </item>
    
    <item>
      <title>2018年1月9日の日記：ASP.NET Core Razor Page アプリを作るのが楽しくなってきてしまった。</title>
      <link>https://daruyanagi.net/entry/2018/01/10/025302/</link>
      <pubDate>Wed, 10 Jan 2018 02:53:02 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/01/10/025302/</guid>
      <description>狂風、窓を叩き、昼間っから近所のババアがマンションのベランダから向かいのサンドウィッチ屋さんをヒステリックにディスるカオスな日だった。どんな事情があるのかは知らんが、サンドイッチ屋のおばさんはオマケにパンの耳を恵んでくれる天使だ。大方、猿叫喧しいババアが精神でも病んでるんだろう。お節介かもしれんが、これが続くなら警察でも呼ぼうかと思った。関係ないけど、ワサビ入りサンドイッチ食べたくなったので、明日のお昼はサンドイッチを買いに行こうかと思う。Web アプリケーション（仮称：Tsundoku。ヘボン式だとこの綴りでいいのだけど、個人的には Tshumdoku の方がしっくりくる？）の方は、パブリックタイムライン、書籍の検索画面、書籍の個別ページ、ユーザーページが完成した。  パブリックタイムライン。画面はこれだけあるけど、データベースのテーブルは（ユーザー管理と書籍情報のキャッシュ代わりに使っているテーブルを除けば）ユーザーアクティビティを管理するのが1つあるだけで、これは単にそれを引っ張ってきてる。Entity Framework のリレーションシップ回りも慣れてきて、Include()、IncludeThen() が使えるようになってきた。  書籍の検索画面。ちなみに Amazon 関連は Nager.AmazonProductAdvertising というのを使わせてもらっている。
   var authentication = new AmazonAuthentication(); authentication.AccessKey = &amp;#34;accesskey&amp;#34;; authentication.SecretKey = &amp;#34;secretkey&amp;#34;; var wrapper = new AmazonWrapper(authentication, AmazonEndpoint.US, &amp;#34;nager-20&amp;#34;); var result = wrapper.Lookup(&amp;#34;B00BYPW00I&amp;#34;); ```あまり自由度はないけれど、シンプルですごくいいと思った。Amazon アソシエイトのキーも久しぶりにもらったけど、UI がシンプルになってて昔よりハードルがだいぶ下がってる感じがある。  書籍の個別画面。書籍情報と本に紐づいたアクティビティをタイムラインで表示。読書ステータスの更新もここから可能で、積読 → 読中 → 読了（→ 再読）のサイクルをボタンでぷちぷち変更できる。コメントをつけたり、進捗管理もできるようにするつもり。  ユーザーページ。Twitter みたいにフォローできるようにするつもり。フォロー・フォロワーの表現だけならいいけど、フォロワーのタイムラインとか作るの割と大変そうな感じする？このアプリは作って遊んでるだけで公開するかどうか微妙だけど、どうにも開発が楽しくなってきちゃって（なんかやっとこさ掌の上でくるくるできる感覚になってきたわけですよ！）、当分は止まらないかなって感じある。 &amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt; ### ToDo &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;MVC と Razor Page の混在についてちょっと調べる。謎のルーティングエラーで30分無駄にされた&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;IEnumerable&amp;lt;string&amp;gt; を string にするスマートな拡張メソッドを作りたいけど名前が決まらん件について&amp;lt;/string&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;enum の拡張メソッドをはやしておくとビューがスマートになるなぁ&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>日記：2018年1月8日～ASP.NET Core MVC で読書管理アプリを作って遊ぶ</title>
      <link>https://daruyanagi.net/entry/2018/01/08/153033/</link>
      <pubDate>Mon, 08 Jan 2018 15:30:33 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2018/01/08/153033/</guid>
      <description>お正月は ASP.NET Core MVC で読書管理アプリを作って遊んでいた。最初は Razor Page で作っていたのだけど、CRUD 処理やるんだったら MVC の方がスキャフォールド使えて楽かなーと。
### Entity Framework Core モデルは Entity Framework Core の Code First で作ったけど、相変わらず簡単だった。基本的には  モデルクラスを作り、 Add-Migration {Migration Name} して、（なぜか NuGet パッケージコンソールで！） Update-Database する だけで、モデルクラス通りにデータベーススキーマを作ってくれる。はるか昔、Rails 2.0 を触ってた時に rake db:migrate とかやってた気がするけど、あの時代からあまり変わってない感じがする。  けれど、ちょっと困ったのがコレ。モデルクラスを変更したときにたまに Build failed. と言われて詰まってしまう。カラムを消したときとかによくなるんだけど、どうやって解消すればいいのかな。エラーメッセージがシンプル過ぎて、とっかかりがない感じがつらい。おかげで、エラーで詰まるたびに新規プロジェクトを作る感じで、ちょっとげんなりしてる。まぁ、趣味で遊んでるだけなのでそれでもいいんだけど……Include() の使い方とかはネットをうろうろしてるうちに身につけられたけど、ちゃんと Entity Framework Core の本を一冊（日本語で）読んで系統だって理解したいなって思った。  ### Tag Helper   enum で表したデータをそのまま表示すると味気ない（上の表示）ので、少しリッチにしたい（下の表示）のだけど、Razor でごてごて分岐を書くのは面倒だし管理が大変だ。そこで今回は Tag Helper というのを使ってみた。これが超便利……。たとえば、こんな感じに ```html &amp;lt;reading-status@Mode.Status&amp;lt;/reading-status ```html &amp;amp;lt;span class=&amp;quot;reading-status&amp;quot;&amp;gt;{日本語表記}&amp;amp;lt;/span&amp;gt; ```みたいに展開できる（スクリーンショットの部分は、もともと &amp;lt;reading-status&amp;gt;@Mode.Status&amp;lt;/reading-status&amp;gt; という簡素な記述だった）。Web Components みたいなのをサーバーサイドで処理できるイメージかな？  公式ドキュメントに &amp;amp;lt;email&amp;gt; を &amp;amp;lt;a&amp;gt; に書き換えるサンプルがあるので、それを見ながら作るといい感じ。[ASP.</description>
    </item>
    
    <item>
      <title>ASP.NET Core 2.0 なサイトを放置してたら死んでた → 復旧</title>
      <link>https://daruyanagi.net/entry/2017/11/23/233720/</link>
      <pubDate>Thu, 23 Nov 2017 23:37:20 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/11/23/233720/</guid>
      <description>今日見たら daruyanagi.jp が死んでた。
&amp;gt; HTTP Error 502.5 - Process Failure  Common causes of this issue:
The application process failed to start The application process started but then stopped The application process started but failed to listen on the configured port Troubleshooting steps:
Check the system event log for error messages Enable logging the application process&#39; stdout messages Attach a debugger to the application process and inspect
昨日あたりまでは生きていた気がするんだが……彼に何が起こったのか。&amp;gt;せやな— しばやん (@shibayan) 2017年11月23日赤い帽子のヤツは助けてくれないし（役立たずめ！）、とりあえずソースコードを探して Visual Studio で開いて実行してみたけど、とくに問題はないみたい。念のため、NuGet を確認してみたら ASP.</description>
    </item>
    
    <item>
      <title>ASP.NET Core：特定のリクエストをミドルウェアでリダイレクトする</title>
      <link>https://daruyanagi.net/entry/2017/08/15/194636/</link>
      <pubDate>Tue, 15 Aug 2017 19:46:36 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/08/15/194636/</guid>
      <description>  旧ドメインから新ドメインへのリダイレクトを Controller でやっていたのだけど、実はミドルウェアでできることを今日知った……。情報弱者にもほどがある。URL Rewriting Middleware in ASP.NET Core具体的には、こんな感じ。
public class Startup { public void ConfigureServices(IServiceCollection services) { services.AddMvc(); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } var options = new RewriteOptions() .AddRedirect(&amp;#34;entry/(.*)&amp;#34;, &amp;#34;http://blog.daruyanagi.jp/entry/$1&amp;#34;) .AddRedirect(&amp;#34;category/(.*)&amp;#34;, &amp;#34;http://blog.daruyanagi.jp/category/$1&amp;#34;) .AddRedirect(&amp;#34;entries/(.*)&amp;#34;, &amp;#34;http://blog.daruyanagi.jp/entries/$1&amp;#34;) .AddRedirect(&amp;#34;search/(.*)&amp;#34;, &amp;#34;http://blog.daruyanagi.jp/search/$1&amp;#34;) .AddRedirect(&amp;#34;touch/(.*)&amp;#34;, &amp;#34;http://blog.daruyanagi.jp/touch/$1&amp;#34;) .AddRedirect(&amp;#34;embed/(.*)&amp;#34;, &amp;#34;http://blog.daruyanagi.jp/embed/$1&amp;#34;); app.UseRewriter(options); app.UseStaticFiles(); app.UseMvc(); } } ```今まで自分がやってきたやり方はクソなので、もう忘れようと思う。[ASP.NET Core MVC：特定のリクエストを他のサイトにリダイレクトする - だるろぐ](http://blog.daruyanagi.jp/entry/2017/07/17/143323)[ASP.NET Core MVC：特定のリクエストを他のサイトにリダイレクトする - だるろぐ](http://blog.daruyanagi.jp/entry/2017/07/17/143323)そのほかにも URL リライトを行ったり、IIS や Apache のリライトルールを読み込んで利用したり、ルールをメソッドで記述したり、IRule インターフェースでリライトを定義したりできるみたいですね。　 </description>
    </item>
    
    <item>
      <title>ASP.NET Core アプリを発行したら HTTP Error 502.5 - Process Failure で止まった</title>
      <link>https://daruyanagi.net/entry/2017/08/15/121303/</link>
      <pubDate>Tue, 15 Aug 2017 12:13:03 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/08/15/121303/</guid>
      <description>ASP.NET Core 2.0 がリリースされたので、http://darunagai.jp/ を Razor Page で書き直しました。大したサイトではないので、MVC よりも Razor Pages にした方がシンプルでいい感じ。ローカルでいい感じに動いていたので、さっそく Azure に発行してみました。  死にました／(^o^)＼　HTTP Error 502.5 - Process Failure だそうです。見たことないエラーページでちょっと焦る……。いろいろガチャガチャいじっていたのですが、どうやらゴミが残っていたようで。Web 発行のときに消すようにしてみたらうまくいきました。    発行先の追加ファイルを削除するという日本語がイマイチよくわからなかったのですが、動いたからこれでいいんだろうと思う。</description>
    </item>
    
    <item>
      <title>Visual Studio 2017.3 が出たっぽいので、ASP.NET Core Razor Pages をチラ見してみる</title>
      <link>https://daruyanagi.net/entry/2017/08/15/032010/</link>
      <pubDate>Tue, 15 Aug 2017 03:20:10 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/08/15/032010/</guid>
      <description>Visual Studio 2017 Version 15.3 ReleasedVisual Studio 2017.3 に合わせて .NET Core 2.0 などもリリースされたみたいなので、かねてからやってみたかった Razor Pages をチラ見してみました。ASP.NET Core Razor Pages は、とっても単純にいうと、C# で PHP みたいにサクッと Web ページ（CSHTML、名前の通り HTML に C# を埋め込んだ感じ）を書くためのフレームワークです。_MVC とかめんどくせえ、ペライチのサイト（でも、サーバーサイドでの処理はちょっと必要）を作りたいだけなんじゃー！　_というときに便利。むかしは ASP.NET Web Pages という技術があったのですが、ASP.NET Core ではこれを使うようですね、よく知らんけど。
### プロジェクトの作成   まず、［新しいプロジェクト］コマンドで .NET Core、ASP.NET Core Web アプリケーションと辿ってソリューションを作ります。上の方に“.NET Framework 4.7”とか書いてあるのは気にしない。  ソリューションを作成するとアプリケーションのタイプを選択するダイアログが現れるので、今度は上部のプルダウンメニューから“.NET Core”、“ASP.NET Core 2.0”を選択し、“Web アプリケーション”を作成。これで ASP.NET Core Razor Page のサンプルページが出力されるはずです。今回は“チラ見”なのでそのまま進みますが、一度“空”のアプリケーションから Razor Pages を使うまでもやってみたいですね。  とりあえず［F5］キーで実行。Twitter Bootstrap＋jQuery ベースの割とごついサンプルページをブラウザーで表示することができました。    ### ファーストインプレッション   詳しいことは以下のサイトで学べるので、今回は省略。自分もまだ斜め読みしかしていません（汗[Getting started with Razor Pages in ASP.</description>
    </item>
    
    <item>
      <title>ASP.NET Core MVC：特定のリクエストを他のサイトにリダイレクトする</title>
      <link>https://daruyanagi.net/entry/2017/07/17/143323/</link>
      <pubDate>Mon, 17 Jul 2017 14:33:23 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/07/17/143323/</guid>
      <description>6月末、事情があって急遽 daruyanagi.jp を ASP.NET Core MVC で書き直した。空の ASP.NET Core プロジェクトからとりあえず Web サイトのトップページを書いて Azure にデプロイするまで - だるろぐしかし、このとき daruyanagi.jp → blog.daruyanagi.jp へのリダイレクト機能を実装していなかった。はてなブログのドメインを daruyanagi.jp から blog.daruyanagi.jp へ引越しした - だるろぐGoogle Search Console から“「404」ページの増加”というメールが来た - だるろぐリンク先を読むのがめんどくさい人のために、事情をかいつまんでいうと、
 むかし、はてなブログを daruyanagi.jp で運営していた はてなブログをサブドメインなしで運用するのは非推奨だったので、blog.daruyanagi.jp へ移した 当然ながら大量のリンク切れが発生 これを解消するため、daruyanagi.jp にリダイレクト機能を組み込んでいた（ASP.NET Web Pages 製） ASP.NET Web Pages 製 daruyanagi.jp を ASP.NET Core MVC 製にする過程で、リダイレクト機能を省略した Visual Studio 2017 Update 3 が正式版になれば、ASP.NET Web Pages のような機能が IDE 側でサポートされるという話を聞いたので、それを待ってから実装してもいいかなと思っていたのだけど、なかなかこない＆ブログにリンク切れが多くて使いにくかったので、とりあえずやっつけの対策を施した。まず、ルーティングの書き換え。今回は /entry だけを対策しておく（ほんとは他の URL にも対策を施さないといけないけれど、今回は一番困るやつだけ対策）。 ```cs // {Root}/startup.</description>
    </item>
    
    <item>
      <title>ASP.NET Core MVC で RSS を出力する（適当版）</title>
      <link>https://daruyanagi.net/entry/2017/06/29/030457/</link>
      <pubDate>Thu, 29 Jun 2017 03:04:57 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/06/29/030457/</guid>
      <description>空の ASP.NET Core プロジェクトからとりあえず Web サイトのトップページを書いて Azure にデプロイするまで - だるろぐ前回は ASP.NET Web Pages のサイトを、付け焼き刃で ASP.NET Core MVC に移植しました。でも、WebMatrix で作ったフィード配信機能が動作しない……。WebMatrix 3: RSS フィードを出力する - だるろぐWebMatrix 3: RSS フィードを出力する（解決編） - だるろぐというわけで、こっちも簡易的な対策を行いました。ちょっと調べた限りでは、
 Response は使えない → Context.Response を代わりに使う System.ServiceModel.Syndication は .NET Core 1.1 で実装されていない → 自分で XML を組み立てる でイケそう。というわけで、まずはモデルっぽいもの（/Models/FeedItem.cs）を準備。 ```cs public class FeedItem { public string Link { get; set; } public string Title { get; set; } public HtmlString Content { get; set; } public DateTime PublishDate { get; set; } } ```cs public class FeedController : Controller { public async Task&amp;amp;lt;IActionResult&amp;gt; Index() { var feeds = new List&amp;amp;lt;FeedItem&amp;gt;(); // FeedItem を適当に Add() してね！ return View(feeds); } } ```最後にビュー（/Views/Feed/Index.</description>
    </item>
    
    <item>
      <title>空の ASP.NET Core プロジェクトからとりあえず Web サイトのトップページを書いて Azure にデプロイするまで</title>
      <link>https://daruyanagi.net/entry/2017/06/27/021736/</link>
      <pubDate>Tue, 27 Jun 2017 02:17:36 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2017/06/27/021736/</guid>
      <description>ウチの Web サイトは Microsoft Azure の Bizspark を使わせてもらっていたのですが、いつのまにかサブスクリプションが切れていて（そういえばいろいろメールがきてた気がしないでもない）、アクセスできなくなってしまいました。あれ、データもサルベージできないのかな……。というわけで、一からサイトを作り直すことにしました。とりあえず、今回の目標は web.archive.org からサルベージしたトップページの復旧です。もう一度 ASP.NET で組みなおしてもいいのですが、いい機会なので、ずっと挑戦してみたかった ASN.NET Core を利用してみることにしましょう（よく知らんけど、今後はこっちが主流になりそうな匂いがするので）。右も左も分からんけど、大丈夫やろうか。
### 前提条件と大まかな流れ まず Visual Studio 2017 Community の「ASP.NET と Web 開発」というワークロードがインストールされている環境を用意（これだけで足りんかったらごめんな、正直よくわかってないんや）。空のテンプレートを作成し、トップページの Index.cshtml を表示するところまで頑張ります。  ### 実装 #### 空のテンプレートを作成   まず、「ASP.NET Core Web アプリケーション」のプロジェクトを新規に作成します（名前は Sample にしました）。  .NET Core .NET Framework の 2 つのバージョンがありますが、今回は前者（.NET Core）を選択。  .NET Core はクロスプラットフォームなので、Linux サーバーでも運用できるはず。いずれは Docker なんかも試してみたいなー。  プロジェクトを作成するとテンプレート画面が現れるので、「空」を選択。いきなり訳の分からんファイルをブリブリ生成されても泣いてしまうからね、仕方ないね。ちなみに ASP.NET Core のバージョンは 1.1 でした。そろそろ 2.0 なんじゃなかったっけ？　また変わったら嫌だなー。  #### 空のテンプレートを概観   プロジェクトが作成されたら、さらっと中身を見てみましょう。ファイル構造はこんな感じです  wwwroot フォルダー Program.</description>
    </item>
    
    <item>
      <title>ASP.NET Core なるものを Visual Studio Code でしてみむとするなり（2）</title>
      <link>https://daruyanagi.net/entry/2016/07/02/204626/</link>
      <pubDate>Sat, 02 Jul 2016 20:46:26 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2016/07/02/204626/</guid>
      <description>### .NET Core SDK for Windows のインストール   .NET Core SDK Installer をダウンロードしてインストールする。  GitHub - dotnet/cli: This repo contains the .NET Core command-line (CLI) tools, used for building .NET Core apps and libraries through your development flow (compiling, NuGet package management, running, testing, ...). これで dotnet コマンドが利用できるようになる。    ### プロジェクトの作成と実行 今回は %USERPROFILE%\Projects にサンプルというプロジェクトを作成する。 #### プロジェクトフォルダーの作成と移動 ``` C:\Users\Hidetoshi\Projectsmkdir Sample C:\Users\Hidetoshi\Projects&amp;gt;cd Sample
&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt; #### プロジェクトの作成　dotnet new -t web ``` C:\Users\Hidetoshi\Projects\Sample&amp;gt;dotnet new -t web Created new C# project in C:\Users\Hidetoshi\Projects\Sample.</description>
    </item>
    
    <item>
      <title>ASP.NET Core なるものを Visual Studio Code でしてみむとするなり</title>
      <link>https://daruyanagi.net/entry/2016/07/02/142117/</link>
      <pubDate>Sat, 02 Jul 2016 14:21:17 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2016/07/02/142117/</guid>
      <description>をのこもすなる ASP.NET Core といふものを、だるやなぎも Visual Studio Code でしてみむとてするなり。ちなみに、ここでの作業内容は
 Introduction to ASP.NET Core — ASP.NET documentation にほぼ書かれているので、そっちを読む方がよい。 ### .NET Core SDK for Windows のインストール   まずはこれが必要らしい。“Preview 2”とか書いてあるけど気にせずインストールした。  .NET - Powerful Open Source Development セットアップは一瞬で終わる。 #### 追記   これをインストールすると dnvm（DotNet Version Manager）コマンドが利用できるようになるのかな？   ### Chocolatey のインストール   ここからは node.js や npm のセットアップに入るのだが、コマンドラインでやってしまいたいので、Chocolatey をインストールする。  Chocolatey Chocolatey というのは Linux で言うところの yum や apt-get みたいなもの（Linux はあんまり知らんけど）。管理者権限で「コマンド プロンプト」を起動し、Chocolatery の公式サイトに書いてある呪文を入力する。 ``` Microsoft Windows [Version 10.</description>
    </item>
    
  </channel>
</rss>