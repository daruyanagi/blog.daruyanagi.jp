<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on だるろぐ - だるやなぎのブログ</title>
    <link>https://blog.daruyanagi.jp/tags/windows/</link>
    <description>Recent content in Windows on だるろぐ - だるやなぎのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 24 Jul 2019 17:31:51 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>なぜ iOS のアップデートより Windows のアップデートは鬱陶しい・面倒くさいのか？</title>
      <link>https://blog.daruyanagi.jp/entry/2018/09/24/101737/</link>
      <pubDate>Mon, 24 Sep 2018 10:17:37 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/09/24/101737/</guid>
      <description>OS のアップデートもたいがい鬱陶しいと思うのだけど、巷では Windows のアップデートほど嫌われていない気がする（独断と偏見）。これはなぜなんだろう――と常々思っていたのだけど、単に思うだけではいつまで経っても答えが出ないので、現時点での考えをまとめておこうと思う。本当はなぜ鬱陶しい・面倒くさいのかもきっちり分析するべき（プロセスが悪い、頻度が高すぎる、アップデート後のトラブルが怖い）なのだろうけど、今回はそういうのもひっくるめて、ざっくり3つの視点でまとめてみた。
### OS の使い方iOS デバイスをシャットダウンするのは、相当稀なことだろう。実際、シャットダウンのやり方を知らずに iPhone を使っている人は相当数いる（シャットダウン方法を解説して PV を稼ぐブログの数を見よ）。なかにはシャットダウンができると知らない――シャットダウンはバッテリーが尽きたときだけに行われると思い込んでいるヒトだっているかもしれない。それだけ iOS はスリープ主体の使い方が根付いている。電源につないでおけば深夜にアップデートされて終わり。一方、Windows はそういう使い方が根付いていない。PC を利用しない深夜は OS がシャットダウンされていて、アップデートが行えない。自然、どうしても作業中の時間からアップデートの時間を捻出してもらう必要があるのだが……まぁ、そういうところが嫌われるのはわかる。帰ろうと思って会社の PC をシャットダウンしたらアップデート始まったりね（まぁ、放置でいいんだが）。 Win8 いれようとシャットダウンしたらこれやで pic.twitter.com/FI4eI2PV— だるやなぎ准将 (@daruyanagi) 2012年3月2日
 あと、「作業中なのに勝手に再起動された！！」とかね。一応 Windows 10 には「アクティブ時間」っていう概念があってそれをコントロールしたら防げたりするんだけど、それを理解して設定できるほど人類の知能は発達していないし、またそれほど規則正しく暮らしている人類もけっして多くはない。そもそも最近の Windows を「わざわざシャットダウンする」必要はないと思ってるんだけど、その点に関しては5年以上前になんか書いてたからそっちでも読んで。Windows 8 のシャットダウン - だるろぐ
#### 対策勝手に再起動される、作業を中断しないで「アクティブ時間」をちゃんと設定するWindows Update のコントロールをしたいなら Pro を買う（ここだけの話、Home ユーザーはアップデートによるトラブルあぶり出しのための生贄なので）こまめに作業内容を保存する、またはモダンなアプリ（後述）を使うようにする寝てるときにアップデートしといてほしい：（自分の場合）PC の電源を切らない、モニターの OFF だけにしとく（あまりお勧めはしない）業務 PC なのにコンシューマー（Home）OS つかってるヤツは、文句を言う相手が間違ってると思う個人的には「勝手に（？）アップデートされる」よりも iOS みたいに「アップデートしなきゃダイアログが鬱陶しい」方が結果としてはヘイトが溜まらないのかなとも感じる。作業を失った恨みは、ダイアログの鬱陶しさ（しかも、その通りにすれば1回で済む）より深いだろうしね。### アプリが邪魔をするiOS のアプリは OS に厳重に管理されていて、自由度が低い。OS が「アップデートのために再起動するよ」といえば、それに逆らえない。一方、Windows はもともとアプリの裁量が大きくて、基本的に何でもできる。OS が「アップデートのために再起動するよ」といっても、「ちょっと待って」と言える。  indows の歴史は、「アプリに好き勝手させない、とくに危ないことをさせない」ようにしてきた（失敗の）歴史とみることもできる。Microsoft の互換性維持にかける情熱は気違いじみてるけど、ときどきヘマをやらかすのはだいたい「セキュリティを厳しくした」ときだ。OS も悪いけど、好き勝手やってるアプリもだいぶ悪い（でも、そういうアプリに限って改修されない）。そういうアプリがあると、アップデートのプロセスは複雑になるし、アップデート後に不具合が出ることも多くなる。また、アプリの文化も iOS とはかなり異なる。iOS アプリには基本的に「保存する」という概念がない――いつ中断されてもいいように常に備えている。けれど、Windows のアプリはそうなっているものがまだまだ少ない&amp;lt;a href=&amp;rdquo;#f-1861fb4d&amp;rdquo; name=&amp;quot;fn-1861fb4d&amp;rdquo; title=&amp;quot;最近は少し変わってきて、たとえば Word は OneDrive のドキュメントを扱っていると自動で保存してくれるようになってる。UWP は既存のアプリとライフサイクルが違って&amp;rdquo; サスペンド”という概念がある&amp;quot;=&amp;quot;&amp;ldquo;&amp;gt;*1。OS の管理よりもアプリの都合の方が優先されているのが当たり前な世界なので、アップデートの再起動はそれを阻む悪者になりやすい。</description>
    </item>
    
    <item>
      <title>2018年1月22日の日記：とくに何もない日だったので、最近気づいたことをば</title>
      <link>https://blog.daruyanagi.jp/entry/2018/01/23/073606/</link>
      <pubDate>Tue, 23 Jan 2018 07:36:06 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/01/23/073606/</guid>
      <description>  の前悲しい目にあった。アンケートに答えると25ドル呉れると Netflix さまがおっしゃるので、嬉々として参加したんだが、最初の選択肢で「現在、Netflix のユーザーである」みたいなのを選んだら――
  あ、お前は無理」みたいなこと言われた。_ねっとふりっくすにたいするちゅうせいしんが 1 さがった。_ついでに、関係あるようでまったくないけど、ちょっと前から Windows 版 Dropbox に共有ファイルの削除警告機能が付いたっぽい。
    分はやらかしたことないけど、まぁ、こういうのはあるといいのかもしれんね。あと、どうせだからついでに愚痴るけど、最近 Windows Defender がキビしい。なんでもかんでもウイルスと判定するようになった。
  いや、この子は多分悪い子ちゃうで」って報告したいんだけど、どこからやんのかわからんし。
  重なのは結構だけど、無実の子まで犯罪者扱いするのはいろいろ困る。困るといえば、最近 Explorer のコンテキストメニューが壊れるん。
  らんソフトをバッサバッサとアンインストールしたら、ここ数日発生してないけど……なんだったんだろう。わけのわからんフリーソフトが割と入ってる環境やから、トラブルシューティングめんどくさいなぁ。とりあえず様子見。
### 雪が積もるとかどんな田舎って話ですよ月曜日は雪で大変だったみたいだけど、うち（愛媛県松山市）は雨だった。みんな楽しそうでちょっとうらやましい。いつもはあまり暖房を付けないけれど、さすがにこの日は寒くて、エアコンに働いていただいた。ナベ洗うときもお湯を使ってしまったし……ちょっと罪悪感ある。まぁ、たまにはいいよね。### Windows Insider Meetup[Windows Insider Meetup 3 開催決定！情シス編も](https://blogs.windows.com/japan/2018/01/17/windows-insider-meetup-3/)おかんが京都連れてけというので宿をとったのだけどキャンセルされた。せっかく関西いく気満々になってたのに梯子を外しおって～（ぐぬぬ……と思ってたら、ちょうど Windows Insider Meetup を大阪・東京でやるらしい。さっそく大阪にエントリーした。  石に毎回 JR というのはしんどすぎるので（4時間以上かかるんやで……）Peach のダイヤを調べたら、最近の松山＝関空便は昼間飛んでるのな。行きしなは使えなかったから（遅刻するやし）フェリーか JR を使うとして、帰りは関空から飛行機で帰ってこようと思う。6,000円しかかからんし、LCC はすばらしい。もっと便利な時間に飛んでくれ。
</description>
    </item>
    
    <item>
      <title>Winsnap 4.0.6</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/13/195515/</link>
      <pubDate>Sat, 13 Apr 2013 19:55:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/13/195515/</guid>
      <description>  ### Version 4.0.6 (April 9, 2013)Fixed bug with copying/pasting of lines and arrowsFixed issues with Object capture on Windows 8Several other minor improvements and bug fixesWindows 8 はソフトウェアキーボードやチャームが実装された関係でデスクトップのオブジェクト構造が結構変わっちゃっていて。ながらくオブジェクト（ボタンやメニュー）を選択してキャプチャーする機能がほとんど機能しない状態だったのだけれど、とりあえずこのバージョンで治ったみたい。ありがたやありがたや。有償アプリなのでなかなか手を出しにくいと思うけれど、このツールはなかなかいいものですよ。僕みたいなキャプチャー小僧には欠かせません。WinSnap - 窓の杜ライブラリ</description>
    </item>
    
    <item>
      <title>Windows 8 のシャットダウン</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/09/080844/</link>
      <pubDate>Tue, 09 Apr 2013 08:08:44 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/09/080844/</guid>
      <description>Windows 8 をシャットダウンする方法が分からない」という声をよく聞く。そのせいか、シャットダウンの方法を解説するブログ記事をよく見かける。チャームを出して、［設定］を押して……というヤツだ。ほかにも［Ctrl］＋［Alt］＋［Delete］キーを押して画面右下のボタンからシャットダウンするという技もある。
  も、一番手っ取り早いのは_電源ボタンを押す_ことだと思う。
  なくともうちのデスクトップマシンでは電源ボタンの既定の動作が「シャットダウン」になっていて、押すと実際シャットダウンシーケンスが始まる。
  なみに Surface RT の場合はこんな感じ。電源ボタンの操作に加え、カバーを閉じた場合のアクションも指定可能になっており、既定では「スリープ」が割り当てられている。おそらくたいていのラップトップは同じ設定になっているはず。</description>
    </item>
    
    <item>
      <title>GitHub for Windows の新機能：クリップボードの内容をもとに Gist を作成する</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/27/091411/</link>
      <pubDate>Wed, 27 Mar 2013 09:14:11 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/27/091411/</guid>
      <description>1.0.39 Minor ReleaseAdded: Ability to undo operations such as discarding changes, reverts, commits, etc Added: Keyboard shortcut Ctrl-Shift-Alt-C creates a gist with the contents of the clipboard Added: Spell check for commit fields Added: Access key (ALT + L) for logging in and logging out Fixed: Credential helper fails to authenticate passwords containing certain unicode characters Fixed: Could not clone repositories with a name that starts with a hyphen Fixed: New ssh-agent.</description>
    </item>
    
    <item>
      <title>Windows 8 のセキュリティ機能 ―― Windows XP 以降と比較して</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/08/123936/</link>
      <pubDate>Fri, 08 Mar 2013 12:39:36 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/08/123936/</guid>
      <description>Windows 8 イラネ！」の大合唱に悲しくなる今日この頃ですが、皆様いかがお過ごしでしょうか。まぁ、知ってて「要らねぇ」と言っているのだったら、かなりたいしたものだと思うのですけど。たとえばセキュリティ機能だけみても、Windows 7 から Windows 8 へアップデートする意味はあると思うのですよ。
Visual C++ コンパイラの改良（enhanced /GS）ASLR の強化（実行時ランダム化）ヒープ保護の強化カーネル内部の強化マルウェアによる攻撃手法と OS による防御機能は共進化している。OS への出費をケチっても、結局おカネを出してサードパーティ製ソフトを導入するか、自分で保護と注意を徹底するか（できるものならな）、長年の怠慢の対価を支払うか、でしかないわけで。ちなみに、セキュリティ機能を Windows XP 以降と比較。実に多くの機能が追加されているのがわかる。Win XPXP SP2Vista, 7Win 8DEP（ソフトウェア）×○○○DEP（ハードウェア）×○○○ASLR（スタック）××○◎ASLR（モジュール）××○◎ASLR（ヒープ）×××○ヒープ保護××△○カーネル保護（ASLR）××△○カーネル保護（DEP）××△○カーネル保護（NULL dereferences）×××○カーネル保護（SMEP/PXN）×××○あと、32bit よりも 64bit の方が強化された ASLR の恩恵が大きい。ただし、いかにシステムを強化しようとメンテナンスされていない古いプログラムを狙うセキュリティの甘い“人間”を狙うといった攻撃は依然有効。緩和することはできるけれどネ。以下は参考資料。とくにひとつ目の PDF が日本語でありがたい。http://www.</description>
    </item>
    
    <item>
      <title>Nexus 7 を購入、第4次計算機環境改善計画はこれにて終了。</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/23/210344/</link>
      <pubDate>Fri, 23 Nov 2012 21:03:44 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/23/210344/</guid>
      <description>人間は、自分が食べたものでできている。だから、食べる時はよくよく考えなくてはならない。たぶん、買い物だってそうだろう。人間は、モノを買って生きる。だから、どう生きたかは、何を買うかによってあらかた察しが付くものだ。というわけで。噂の Nexus 7 を買いました！　これで GW の自作 PC 作りから始まった第4次（ぐらい）計算機環境改善計画は終了です。あと2年ぐらいはこの布陣で戦えるかなぁ。
### 現在の布陣旧計算機環境改善計画現計算機環境改善計画ホームサーバーAtom 機Core 2 Duo 機デスクトップCore 2 Duo 機Core i5 機（IvyBridge）ノートパソコンMac Book ProVAIO Duo 11タブレット 10インチiPad 2、Samsung Series 7 SlateVAIO Duo 11タブレット 7インチ-Nexus 7携帯電話（au）IS12TIS12T → ?携帯電話（SBM）iPhone 4iPhone 5モバイル回線b-mobile ルーターiPhone 5（テザリング予定）Atom 機は引退したものの、電源を入れればちゃんと動く状態なので、なにか余生を考えてあげたいです。Core 2 Duo 機は Windows Home Server 2011 を入れてホームサーバーへ転用しました。CPU ファンがうるさいので新しいのに付け替えようかと思ったのですが、試しにとってみたところ、そのまま普通に動いているのでそのまま放置。もう1年以上使ってますけど、安定して稼働しています。ボーナスもらったら HDD のスペアがほしいなぁ。そろそろ死ぬような気がする。あと、残念ながら Mac Book Pro は実家に（タダで）召し上げられてしまいました。「パソコン壊れちゃったんだけど、新しいのちょうだい。できればノートがいい」という電話一本で……。モバイル回線周りは結構悩みましたが、SBM の iPhone 5 で統一することにしました。これが吉とでるか凶とでるか……。イー・アクセスの買収で SBM のほうに未来を感じたのですけど、現状は au の方が格段に優れているみたい。電波の再割り当て議論も出るでしょうけれど、まぁ、そんな資本主義的ルールを破壊するようなマネは、いかな総務省でもすまい（できまい）、というのが個人的な予想ですねぇ。au の回線はとりあえず保持して、つぎに Windows Phone 端末を出すところに転用することになりそうです。### タブレットが、問題だ！悩んだのは、タブレットですね……寝る時に Hulu を観たり、便所で RSS チェックをしたり。Kinoppy で買ったマンガだってタブレットで読む。これからは、ますますタブレットとお付き合いする時間が長くなるのですよね。候補としては、・iPad 2 と Samsung Series 7 Slate を使い続ける・新しい（笑）iPad・iPad mini・Nexus 7があげられるけど、VAIO Duo 11 を買った今、iPad/S7S のような大きめのタブレットをもつ意味はあまりなくなったと思う。となれば、下二つの7インチタブレットの争いになるのだけど……決め手はやっぱり_お値段_でした。価格/スペック比だけを比べれば、Nexus 7 の圧倒的な勝利だと思う。実際手に取ってみるとしょっぱい部分もあるけど。### こんどはどうしようなかには「なんでこんなにいろいろもつんだ」という人もいるだろうけれど、そもそも道具には向き不向きがあるんだよ！　適当に俺的感覚でそれをまとめてみた。○：やる気になる△：やれないこともない×：あんまやりたくないデスクトップノートパソコンタブレット（10インチ）タブレット（7インチ）スマートフォンアプリケーション開発○△×××ブログを書く○△×××RSSを読む○○×××マンガを読む×△○○△小説を読む××△○○Nexus 7 だと RSS を読む（＋はてぶつけたり）のは △ から ○ ぐらいになる感じなので*1、ハードウェアの問題だけではないんだなーとも思うけれど。ともあれ、ノートパソコンでちまちま開発したり、電車の中で少しだけ RSS を読む効率を上げるために高いスマフォアプリを買ったりというのは、なるべくやりたくないんだ。やることに見合ったデバイスを使いたい。とはいえ、デバイスを減らしたいのも確か。周りの状況も結構変わるし、時には計画をまとめて見直さねば。今回の計画では、ノートパソコンの比重がだいぶ下がった。「デスクトップをモバイルする」ためのものとしてのノートパソコンは、もうこれから買うことはないだろう。デスクトップというジャンル自体、ディスプレイ一体型や大型ノート PC に吸収されて行く傾向がある。僕みたいな人間はともかく、パソコンにパワーを求めるのはごく一部になっていくんだろうな。逆に、最近存在感を増しているのがタブレット。どこに行くにもタブレット。何をするにもタブレット。今のところ、タブレットは「スマートフォンでは小さすぎてめんどくさいこと」ができるように進化している感じだけど、そのうちノートパソコンを補完するような Windows 8 が目指すところもとりこんで行くはず*2。VAIO Duo 11 みたいなコンバーチブルノートはそういう意味で要注目だと思う。また、タブレットはスマートフォンから発展してきた Android/iOS と、デスクトップ側から迎え撃つ Windows/OS X との戦いの場としても面白い。ここら辺は CPU 陣営の戦いとも関連するし。まぁ、CPU の方は置いといて OS だけに話を絞ると、Microsoft は今ある武器でモバイル OS とガチンコバトルするしかない。一方、Apple はこれから OS Xで iOS も動くようにするのだと思うけど、どうやって融合させるのかが課題になりそう。あと、忘れそうになるけど Windows Phone。結構イケていると思うのに、なかなか“離陸”できない感じ。惜しいところだ……。デスクトップ/ノート10インチタブレット7インチタブレットスマートフォンMicrosoftWindows 8Windows 8/RT(Windows RT?</description>
    </item>
    
    <item>
      <title>Windows Embedded 8シリーズのラインナップ</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/15/204638/</link>
      <pubDate>Thu, 15 Nov 2012 20:46:38 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/15/204638/</guid>
      <description>米Microsoftは13日(現地時間)、Windows Embedded 8シリーズのラインナップ、および各々の提供時期を公開した。【PC Watch】 Microsoft、Windows Embedded 8シリーズを2013年3月に提供開始 ここら辺はだいぶ疎いのでまとめてみた。
### Windows 8 ベース**「Windows Embedded 8 Standard」**（旧「Windows Embedded 7 Standard」）**「Windows Embedded 8 Pro」**（旧「Windows 7 for Embedded Systems」）**「Windows Embedded 8 Industry」**（旧「Windows Embedded POSReady」＋製造業やヘルスケア企業向け）### Windows Phone 8 ベース**「Windows Embedded 8 Handheld」**：郵便などの運送業者が使うハンディ端末への組み込みを想定**「Windows Embedded 8 Automotive」**：自動車向け「Windows Embedded 8 Automotive」は、別に Windows Phone 8 ベースではないかもしれない。文脈的にそうとっただけ。デスクトップやモバイルしか知らないと「Silverlight は衰退？」だなんて思っちゃうひともいるけれど、こっちの分野では組み込み Silverlight なんてのもあるよね（C++ が使えたんじゃないかな）。まぁ、Silverlight と言っても、僕らが想像するデスクトップ・ブラウザ向けとは全然違うものなのかもしれないけれど。### Windows CE ベース**「Windows Embedded Compact 2013」**タッチやジェスチャーベースの入力、厳密なリアルタイム処理を必要とする小型デバイスをサポートする。2013年第四半期に提供開始Windows Embedded | Microsoft のEmbedded ソリューションの評価と開発「Opera」なんかもそうだけど、「自分たちが親しんでいるものが実は氷山の一角でした」というパターン、結構ある。</description>
    </item>
    
    <item>
      <title>Windows の［スタート］に関する独断と偏見に基づく簡単な歴史</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/09/212614/</link>
      <pubDate>Fri, 09 Nov 2012 21:26:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/09/212614/</guid>
      <description>### Windows 95（Windows 4.0、1995～2001）  indows に［スタート］ボタンが追加されたのは、Windows 95 からであるらしい。懐かしいなぁ……このときはまだ中学生だか高校生だかで、自分のパソコンなんてもってなかった。当時は Mac ユーザーに「OSを終了するのにスタートボタンを押さなきゃならないだなんてｗｗｗ」などと言われていたよね。これは結局、Windows Vista になるまで続いた*1。
&amp;gt;初期のWindows95/NT4のスタートメニューは、ただのポップアップメニューでした。オーナードローのメニューで「Windows95」の文字やアイコンを描画しているだけです。http://homepage1.nifty.com/kazubon/progdoc/tclock/taskbarhistory.html 当初は非常にシンプルな構造をしていたが、Internet Explorer 4.0 のシェル統合（OSR 2.5）により内部構造がだいぶ変わっている*2。
  br/&amp;gt;
 BaseBar+- ReBarWindow32+- SysPager+- ToolbarWindow32&amp;gt;IE 4の新しいシェルでは、スタートメニューはメニューではなく、BaseBar というクラス名のウィンドウになりました。「Windows 95」や「Windows NT Workstation」などのロゴは、BaseBar の上、ReBarWindow32 の左に描かれます。http://homepage1.nifty.com/kazubon/progdoc/tclock/taskbarhistory.html これにより Windows はブラウザーと密接に統合された“インターネットOS”への進化を遂げたが、動作速度の低下とリソース不足、コアまで攻撃が貫通する甘いセキュリティ、ブラウザーをバンドルしたことに対する独占禁止法違反と戦わねばならなくなった。これはまた別の話。
### Windows 98（Windows 4.1、1998～2006）  indows 95 とあまり違いはない。Windows Update が一番上に鎮座しているのと、ログオフのためのメニュー項目が追加されているのが目につくぐらい。[スタート]メニューには直接関係がないが、［クイック起動］ツールバーが搭載されたのもこのバージョンなのか。
&amp;gt;Windows 95と一線を画している特徴の一つとして、スタートメニューもドラッグアンドドロップの対象となった点が挙げられる。また日本語版では、システムフォントとして全角のひらがなとカタカナの文字の横幅が小さくなった「MS UI ゴシック」が新たに導入されたことに伴い、ウインドウのメニューバーなどに使用されていた半角カナが全角カナに統一された。Microsoft Windows 98 - Wikipedia 当時としてはメニュー左側の帯にグラデーションが施されているのがカッコよく、オーナードローによってこれを実現する TIPS が流行ったりしていた。内部構造は Windows 95＋IE 4 時代を踏襲。</description>
    </item>
    
    <item>
      <title>［Windows］ Ruby &#43; DevKit のインストール</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/16/204027/</link>
      <pubDate>Tue, 16 Oct 2012 20:40:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/16/204027/</guid>
      <description>### ダウンロードhttp://rubyinstaller.org/downloads/ で、Ruby 1.9.3-p194DevKit-tdm-32-4.5.2-20111229-1559-sfx.exeをダウンロード。古いバージョンの Ruby を利用する場合は、DevKit のバージョンに注意。### Ruby 1.9.3-p194 のインストールEXE 形式なので、そのまま実行。途中、Ruby の実行ファイルへパスを通しておくこと。なんでデフォでチェックが入っていないんだろう。関連付けは好きにすればいいと思う。### DevKit のインストールこのままでも利用できるのだけど、一部ネイティブな RubyGems をビルド・インストールには DevKit が必要。慣れていれば、自己解凍書庫の中身をそのまま Ruby のインストールフォルダへコピーすればよかったと思う。自信がない場合は、公式の手順（https://github.com/oneclick/rubyinstaller/wiki/Development-Kit）に従っておく。#### C:\DevKit へ解凍解凍先はどこでもいい。7z 形式の自己解凍書庫になっているので、実行して解凍先（C:\DevKit）を指定する。#### ruby dk.rb init / ruby dk.rb installコマンドプロンプトを起動。解凍先（C:\DevKit）へ移動して、コマンドを二つ実行する。```shcd C:\DevKitC:\DevKit&amp;gt;ruby dk.rb init [INFO] found RubyInstaller v1.9.3 at C:/Ruby193
Initialization complete! Please review and modify the auto-generated &#39;config.yml&#39; file to ensure it contains the root directories to all of the installed Rubies you want enhanced by the DevKit.</description>
    </item>
    
    <item>
      <title>『Windows Sysinternals徹底解説』</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/02/014519/</link>
      <pubDate>Mon, 02 Jul 2012 01:45:19 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/02/014519/</guid>
      <description>Windows Sysinternals徹底解説　―― Windows管理者必携ツールを使い尽くすためのバイブル (マイクロソフト公式解説書)作者: Mark E. Russinovich,Aaron Margosis,山内和朗出版社/メーカー: 日経BP社発売日: 2012/03/29メディア: 単行本購入: 2人 クリック: 18回この商品を含むブログ (4件) を見るWWD いってきたよ！ - だるろぐ でゲットしたので、もう2か月経つのか……月日が流れるのは早い。その間にも、この本は何度も役に立ってくれた。買ってよかったなぁと思う。日本語でまとまった情報が得られるのは、やはり心強い。大部分は Sysinternals ツールのリファレンス（第2部）になっている。「Process Explorer」をはじめとするツールの使い方が手取り足取り解説されている。これをマスターすれば、システムのトラブルシュートに絶対役立つはず。また、読み物として面白い部分も多い（第1部・第3部）。とくに、第2章「Windows のコアの概念を学ぶ」は当然知っているべき内容がコンパクトにまとめられている。本当は『Windows Inside』あたりを読むべきなんだろうけど、みんながみんなそうはいかないと思うので、これだけでも読んどけ。知らなきゃ恥ずかしいぞ（←あと、個人的には第1章「Sysinternals ユーティリティの始め方」や第3部「トラブルシューティング ―“ 原因不明の…の問題”」が面白かった。第1章は Sysinternals の歴史の簡単な紹介（こういうの読むのが好きだ）と、知っておくと便利な Tips が紹介されている。 http://live.sysinternals.com/ をネットワークドライブとして追加しておくと便利だぜ、とか、コマンドラインで使うときに /accepteula スイッチで許諾画面をスキップできるぜ（未対応ツールあり）とか。知ってるようで知らないことが多い。第3部は具体的に Sysinternal ツールを使ったトラブルシュートの実例がいくつか解説されている。だいたいは「Process Explorer」を使うのだけど、中には「Desktops」を使った Tips なんかもあって、へぇ、と勤務中に口に出してしまったぐらい。そうそう、この本は業務に役立つという名目で、会社の業務時間中に読んでました。まじ役に立つ。</description>
    </item>
    
    <item>
      <title>デスクトップ全体を一時的に暗転させたい (2)</title>
      <link>https://blog.daruyanagi.jp/entry/2012/06/19/022455/</link>
      <pubDate>Tue, 19 Jun 2012 02:24:55 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/06/19/022455/</guid>
      <description>デスクトップ全体を一時的に暗転させたい - だるろぐ がなぜか動かんなぁ、と思っていろいろ試していた（08式机上撮影機 v1.5.0 - だるろぐ）のだけど、原因は FormWindowState.Maximized だったっぽい。これをコメントアウトすると動いた。
public const int AW_HIDE = 0x10000;public const int AW_ACTIVATE = 0x20000;public const int AW_SLIDE = 0x40000;public const int AW_BLEND = 0x80000;public const int AW_HOR_POSITIVE = 0x00000001;public const int AW_HOR_NEGATIVE = 0x00000002;public const int AW_VER_POSITIVE = 0x00000004;public const int AW_VER_NEGATIVE = 0x00000008;public const int AW_CENTER = 0x00000010;[DllImport(&amp;#34;user32.dll&amp;#34;, CharSet = CharSet.Auto, SetLastError = true)]public static extern int AnimateWindow(IntPtr hWnd, int dwTime, int dwFlags);using (var form = new Form(){BackColor = Color.</description>
    </item>
    
    <item>
      <title>8時59分60秒</title>
      <link>https://blog.daruyanagi.jp/entry/2012/06/18/213500/</link>
      <pubDate>Mon, 18 Jun 2012 21:35:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/06/18/213500/</guid>
      <description>&amp;gt;今年の7月1日は 1秒 長い日となります総務省｜「うるう秒」挿入のお知らせ 今年の7月1日だけ8時59分60秒があるだなんて、ちょっと素敵で不思議。けど、不思議では済まないのが融通の効かない計算機の世界。たったこれだけのことで、計算機の世界はちょっと混乱してしまう。
&amp;gt;Windows　オペレーティングシステムでは、うるう秒の処理をおこないません。たとえば、「yyyy/mm/dd 08:59:60」の年月日時刻情報につきましては、Windows OS ではサポートしていません。このため、たとえば「2012/7/1 08:59:60」は「2012/7/1 09:00:00」として処理されます。うるう秒に関するサポートについて InfoQ: Windows Azure がうるう年処理のバグによってダウン で少し名誉を傷つけられた Microsoft の場合。 Windows では、うるう秒については基本的に対応せず、2012/7/1 08:59:60 は存在しないものとして扱われる。必然的に1秒のズレが生じるが、一般的な用途ではあまり問題がない。1秒のズレは、いずれかのタイミングで“time.windows.com”*1と同期され、ユーザーが気づかないうちにこっそり自動補正される。けれど、まったく問題がないわけではない。「2012/7/1 08:59:60」を扱うシステムが Windows と連携する場合は、なにか起こるかもしれない。たとえば、Microsoft SQL Server は「2012/7/1 08:59:60」というデータの入力を受け付けないけれど、それを行おうとしてハングアップしてしまうアプリケーションがないとはいえない。
&amp;gt;内部動作とは別に、外部からうるう秒を加味した時刻を受け取る可能性がある例として iCalendar 形式の予定がありますが、Exchange Server が iCalendar 形式の予定を受信する際、時刻の表記は RFC5545 に定義されている形式のみをサポートします。うるう秒を考慮した秒の表記は 0 から 60 までがサポートされ、それ以上の秒数が記述されている場合は不正な形式として処理され、正しい iCalendar 形式とは見なされません。Outlook につきましては、60 秒の場合は 0 とみなしますので、2012/07/01 08:59:60 は、2012/07/01 08:59:00 となり、最大で 1 分のずれが生じる可能性がございます。 メールの受信の順番がずれて見える可能性がございますが、動作に影響はありません。
この程度のエラーならかわいいものだけど。また、NTP サーバーと同期を行う一部の UNIX系のOSでは部影響があるようだ。
&amp;gt;時刻差を強制的に同期させるモード（STEPモード）では、うるう秒挿入のタイミングでミリ秒単位の時刻の逆進が発生しますので、ミリ秒単位で時刻を扱っているミドルウェアやアプリケーションへ影響が生じる可能性があります。2009年1月1日の「うるう秒」挿入に伴う富士通Solarisサーバへの影響についてhttp://jp.fujitsu.com/platform/server/unix/soft/time2009-solaris-server.pdf STEPモード：うるう秒挿入のタイミングでミリ秒単位の時刻の逆進が発生SLEWモード：うるう秒挿入のタイミングで逆進が発生しないように時刻差をゆっくり合わせる本来、時間というものは順番に来るもので、当然、アプリケーションは暗黙にそれを前提としている。なので、たとえミリ秒単位であったとしても、逆進が起こるのはあまり望ましくない。そんなわけで、なかにはちまちまうるう秒を挿入しないで、あとでまとめてドバっと調整してしまおうぜ、という意見もあるらしい（「うるう秒」廃止へ ?</description>
    </item>
    
    <item>
      <title>低い整合性レベル</title>
      <link>https://blog.daruyanagi.jp/entry/2012/06/13/044625/</link>
      <pubDate>Wed, 13 Jun 2012 04:46:25 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/06/13/044625/</guid>
      <description>「Adobe Flash Player」v11.3.300.257は、8日（米国時間）に公開された「Adobe Flash Player」の最新版。このバージョンではWindows Vista/7で動作する「Firefox」向けにセキュリティ機能“保護モード”が追加されており、問題はこの“保護モード”機能に起因するものとみられる。窓の杜 - 【NEWS】「Firefox」と「Adobe Flash Player 11.3」の組み合わせに問題、動画が視聴不能に 厄介な問題だよね……テスト不足ではあると思うけれど。ベータ版の Flash は一般公開されているけれど、実用にはちょっと厳しいし（バージョンチェックでハネられて使えない場合がある）、 Firefox ユーザーでかつ動画サイトも頻繁にチェックするテスターなんて、ユーザーレベルではあまりいないのかもしれない。まぁ、次からはテストケースに組み込まれるんだろうけど。今のところ、Flash が未導入の場合はひとつ古い Adobe Flash Player 11.2 が案内される。けれど、すでにアップデートしてしまったユーザーは自分でロールバックしなきゃいけない1。 11.3 にはセキュリティ問題の修正も入っているし2、これで解決というわけにもいかない。なんせ、ほかのブラウザーでは問題なく動いているわけで。今回問題となった&amp;quot;保護モード（Protected Mode）&amp;ldquo;は、Windows Vista以降で導入された&amp;quot;Windows 整合性レベル(Windows Integrity Levels、WIL)&amp;ldquo;によるアクセス制御機能を利用して、権限が一段低いサンドボックスプロセスを生成し、そこでプラグインコンテンツを再生させる*3。Inside Flash Player Protected Mode for Firefox « Adobe Secure Software Engineering Team (ASSET) BlogInside Adobe Reader Protected Mode – Part 1 – Design « Adobe Secure Software Engineering Team (ASSET) BlogInside Adobe Reader Protected Mode – Part 2 – The Sandbox Process « Adobe Secure Software Engineering Team (ASSET) Blogサンドボックスプロセスの整合性レベルは&#34;</description>
    </item>
    
  </channel>
</rss>