<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.net on blog.daruyanagi.jp</title>
    <link>https://blog.daruyanagi.jp/tags/asp.net/</link>
    <description>Recent content in ASP.net on blog.daruyanagi.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 23 Jun 2018 20:45:20 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/asp.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebMatrix：IHttpModule で定期実行を実装する</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/20/223507/</link>
      <pubDate>Sun, 20 Jul 2014 22:35:07 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/20/223507/</guid>
      <description>WebMatrix 3: Twitter Bot （＋リアルタイムログ表示付き）でも作ってみる。 - だるろぐ で System.Timers.Timer を使って ASP.NET の定期処理を実装したのだけど、のいえ先生の neue cc - ASP.NETでの定期的なモニタリング手法 でもう一度実装しなおしてみた。
  br/&amp;gt;
### Web.config```xmlxml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;? .web&amp;gt; debug=&amp;quot;true&amp;rdquo; targetFramework=&amp;quot;4.0&amp;rdquo; /&amp;gt; .web&amp;gt;
.webServer&amp;gt;  name=&amp;quot;SchedulerModule&amp;rdquo; type=&amp;quot;SchedulerModule&amp;rdquo;/&amp;gt;
.webServer&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### ~/App_Code/ScheduleModule.cs```csusing System;using System.Threading;using System.Web;public class SchedulerModule : IHttpModule{static int initializedModuleCount = 0;static Timer timer;public void Init(HttpApplication context){var count = Interlocked.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/14/141550/</link>
      <pubDate>Mon, 14 Oct 2013 14:15:50 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/14/141550/</guid>
      <description>イマーと WebMatrix 3: Twitter ライブラリ Tweetinvi API でツイートしてみる - だるろぐ を組み合わせれば、定期的に何かをつぶやく BOT も手軽に作れそうな予感。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/01/081913/</link>
      <pubDate>Tue, 01 Oct 2013 08:19:13 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/01/081913/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/09/29/122508&amp;quot;&amp;gt;WebMatrix 3: @ でハマる - だるろぐ&amp;lt;/a
 の続き。 window.twttr = (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = &amp;ldquo;https://platform.twitter.com/widgets.js&amp;quot;; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function(f) { t._e.push(f); }; return t; }(document, &amp;ldquo;script&amp;rdquo;, &amp;ldquo;twitter-wjs&amp;rdquo;));
  twttr.ready(function (twttr) { var el = document.getElementsByClassName(&#39;twitter-syntax-tweet-id-384486530380611584&#39;); for (var i=0;iというアドバイスをもらった。あ、たぶんそれだ。というわけで書き直した。### 旧バージョン（Logger.cshtml）```cs#App_Code/Logger.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/29/122508/</link>
      <pubDate>Sun, 29 Sep 2013 12:25:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/29/122508/</guid>
      <description>ちょいとログを外部ファイルに吐きたくなって、テキトーにこんなコードを書いてみた。
  #App_Code/Logger.cshtml@helper Write(string message){System.IO.File.AppendAllText(Server.MapPath(&amp;#34;~/log.txt&amp;#34;),string.Format(&amp;#34;{0}:\t{1}\r\n&amp;#34;, DateTime.Now, message));}```これを Default.cshtml でテストしてみた。  ```html@{Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;);}&amp;amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34;/&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;マイ サイトのタイトル&amp;amp;lt;/title&amp;gt;&amp;amp;lt;link href=&amp;#34;~/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@Logger.Write(&amp;#34;Body 内で記述&amp;#34;)&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```結果はというと――  ―冒頭のコードブロック内で記述したログは記録されない。「あれ、なんでだろう？」と思って、あちこちごちゃごちゃ弄ってみたのだけど、正解はコレだった。```html@{@Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;);}  ogger.Write() のまえに @ を足せば実行される。
@{@(Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;))}```でもいいのだけど。しっかし、これ、なぜなんだろう。自分はまだまだ Razor がわかってないな。</description>
    </item>
    
    <item>
      <title>ASP.NET and Web Tools 2012.2</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/18/024639/</link>
      <pubDate>Wed, 18 Sep 2013 02:46:39 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/18/024639/</guid>
      <description>（208日前に書いた下書きをそのまま公開してみるなど）
  &amp;gt;Last year the ASP.NET team started talking about something we&amp;amp;#39;re calling &amp;quot;One ASP.NET.&amp;quot; I showed some mockups of our ideas last summer at the aspConf Keynote that you can watch online.We also announced then that we would add new features to ASP.NET as out of band releases (OOB) without breaking existing functionality. This means that developers don&amp;amp;#39;t have to wait for the next version of Visual Studio for great web development features today.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/12/001254/</link>
      <pubDate>Thu, 12 Sep 2013 00:12:54 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/12/001254/</guid>
      <description>WebMatrix 3: Twitter でログインする - だるろぐ でめでたく Twitter でのログインが実現できたのだけど、実はひとつ問題があった。
  ccessTokenSecret が取れない。自分もあんまりよくわかっていないのだけど、Twitter の API を利用するには以下の情報が必要であるみたい。
  ず、これ。アプリが Twitter へアクセスするために必要。
ConsumerKeyConsumerSecret次に、これ。ユーザーに成り代わって Twitter の API を使うために必要。AccessKeyAccessKeySecretアプリの登録画面で取得できる AccessKey/AccessKeySecret はアプリを登録したユーザーのアクセスキー。このアプリにログインしたユーザーとして API を利用するには、そのユーザーに対して発行される AccessKey/AccessKeySecret が必要だ。でも、OAuthWebSecurity では ExtraData から AccessKey をもらうことはできても、AccessKeySecret まではくれないみたい。  信を Fiddler でみてみた。ちゃんと authorize したあとに access_token している（ここで AccessKey がもらえる）から、ついでに AccessKeySecret もとってきてくれてもよさそうなのだけど。なにか理由があるのかもしれないが、これではちょっと困る。 これを解決するには、Twitter プロバイダーを自分で実装すればよいようだ。
// ~/App_Code/TwitterClient.csusing DotNetOpenAuth.AspNet;using DotNetOpenAuth.AspNet.Clients;using DotNetOpenAuth.Messaging;using DotNetOpenAuth.</description>
    </item>
    
    <item>
      <title>Microsoft のダウンロードセンターがリニューアル</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/16/072431/</link>
      <pubDate>Thu, 16 May 2013 07:24:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/16/072431/</guid>
      <description>ぁまぁいいかも。全体的にメトロ（死語）っぽくまとまっている。お前らのお目当てであろうダウンロードボタンがわかりやすくデカデカと置いてあって、俺のような人間にしか用のないオプションの情報は折りたたんでシンプルに表示してあるのがイイ。ここ半年間デザインが二転三転し、米国と日本でデザインがチグハグだったりしてややこしかったけれど、これが一番いいんじゃないかなぁ。
  んなデザインか確認するついでに、ASP.NET Web API HTTP Message Lifecycle ポスター（http://www.microsoft.com/ja-jp/download/details.aspx?id=36476）でもダウンロードしてみよう ☆（ゝω・）vｷｬﾋﾟ
&amp;gt;日本語化＆実寸印刷配布したいなぁ・・・(ﾁﾗｯASP.NET Web API HTTP Message Lifecycle ポスター - THE TRUTH IS OUT THERE - Site Home - MSDN Blogs 日本語化はされている。実寸印刷のものが貰えたら、便所に貼りたいと思う。あと、これの WebMatrix （ASP.NET Web Pages）版ないかしら！</description>
    </item>
    
    <item>
      <title>WebMatrix 2：ASP.NET と PHP（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/27/070246/</link>
      <pubDate>Thu, 27 Dec 2012 07:02:46 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/27/070246/</guid>
      <description>WebMatrix 2：ASP.NET と PHP - だるろぐ あたりを書いた時に Twitter で「WebMatrix 2（というより、Razor 記法）は Visual Basic に対応していないのか？」という疑問を見かけたのですが、ちゃんと対応しています。たとえば前回の例の場合、こんなふうに書きます。
@CodeDim s = &amp;#34;Hello! World&amp;#34; &amp;amp;#39; 追加End Code&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@s &amp;amp;lt;!-- 追加 --&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```C# の @{ … } が @Code … End Code に置き換わったぐらいかな。For 文の書き方なんかも VB 風に書けます。詳しいことは &amp;lt;a href=&amp;#34;http://www.atmarkit.co.jp/fdotnet/rapidmaster/rapidmaster_04/rapidmaster_04.html&amp;#34;&amp;gt;VB Razor構文 基礎文法 総まとめ - ＠IT&amp;lt;/a&amp;gt; でも参照してください。個人的にはこれから始める人が VB で Razor を書く意味はあまりないのではないかなと思います。XML の処理などは簡単なんだそうですけど。あと、前回は言わなかったけれど &amp;amp;lt;% … %&amp;gt; という ASP.</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/19/130606/</link>
      <pubDate>Sun, 19 Aug 2012 13:06:06 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/19/130606/</guid>
      <description>今日は「WebMatrix 2」でファイルのアップロードを試してみた。なお、このサンプルは「Empty Sites」テンプレートを元に作成している。
### Delault.cshtml```html&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;title&amp;gt;マイ サイトのタイトル&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;~/Upload&amp;rdquo; method=&amp;quot;post&amp;rdquo; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;file&amp;rdquo; name=&amp;quot;upload&amp;rdquo; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;rdquo; name=&amp;quot;submit&amp;rdquo; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### Upload.cshtmlアップロード処理を行う cshtml はこんな感じにしてみた。ほんとは path が存在しなければ例外、 file のサイズが 0 ならば例外、 file が image/*** でなければ例外、といったチェックを入れるのだけれど、ソースが長くなるので割愛している。あと、最初から複数ファイルのアップデートに対応できるように記述している。```cs@using System.IO@functions {enum Result { Success, Error };}@{var result = Result.Error;var message = &amp;quot;You can use only POST method.</description>
    </item>
    
    <item>
      <title>SignalR のデモがちょっとかっこいい</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/04/081647/</link>
      <pubDate>Wed, 04 Jul 2012 08:16:47 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/04/081647/</guid>
      <description>Video streaming by Ustream&amp;gt;イベントの方向とタイトル的に ASP.NET 全体を少しずつ喋る形にしたのですが、SignalR だけで 45 分話してもいけたかなという印象を持ちました。Go Azure お疲れ様でした - まめしば雑記 あんまりまだよくわかってないけど、あのデモは結構興味惹かれたかも。
&amp;gt;SignalR は、このあと見て行くように、単なる WebSocket 開発のためだけのライブラリーではなく、さらに多くの付加価値を含んだ上位のフレームワークです。抽象度も高く、日本語のエンコードなど含めプリミティブな処理を開発者が記述する必要はありません。WebSocket サーバー開発 : SignalR とクロス ブラウザーへの対応 - 松崎 剛 Blog - Site Home - MSDN Blogs&amp;gt;SignalR という非同期でリアルタイムな双方向通信を実現するライブラリが面白そうなので試してみました。作者は ASP.NET チームの Damian Edwards 氏と David Fowler 氏です。SignalR を簡単に使ってみた - まめしば雑記 二日目はオンライン参加だったので、セッションが終わってすぐ手元のPCで実際にサンプルを試してみた。まず、 NuGet で SignalR のサンプルをインストール。依存関係のあるものも自動ででろでろっとダウンロード・インストールされる。サンプルは株価の上がり下がりを表示するもので、サーバー側からデータが送られてきてクライアント側（Webブラウザー）の表示が更新されるという、要はプッシュ通知のデモになっている。見てるだけでもちょっと楽しい。SignalR のもう一つのキモは、ブラウザーが対応する技術に応じて Web Socket やフレームを使い分けてくれるところ。これを確かめるために、今回は「IE Tester」というツールを利用してみた。My DebugBar | IETester / Browser Compatibility Check for Internet Explorer Versions from 5.</description>
    </item>
    
  </channel>
</rss>