<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amaguri on だるろぐ - だるやなぎのブログ</title>
    <link>https://blog.daruyanagi.jp/tags/amaguri/</link>
    <description>Recent content in Amaguri on だるろぐ - だるやなぎのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 24 Sep 2018 19:13:21 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/amaguri/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Amaguri をストアに申請しました（Desktop Bridge で2点躓きました……</title>
      <link>https://blog.daruyanagi.jp/entry/2018/09/24/191321/</link>
      <pubDate>Mon, 24 Sep 2018 19:13:21 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/09/24/191321/</guid>
      <description>「Amaguri」v1.0.0.0 - だるろぐWPF アプリをストアに申請したのは2作目ですが、また新しく躓きました！
### ターゲット フレームワーク &amp;#39;.NETCore,Version=v5.0&amp;#39; の mscorlib を解決できませんでした Windows Application Package プロジェクトに Amaguri.WPF の参照を追加するとコケました。  プロジェクト システムでエラーが発生しました。ターゲット フレームワーク &#39;.NETCore,Version=v5.0&#39; の mscorlib を解決できませんでした。これは、ターゲット フレームワークがインストールされていない場合、またはフレームワーク モニカーの形式が正しくない場合に発生する可能性があります。 pic.twitter.com/gvVyEI3GxP— だるやなぎ准将 (@daruyanagi) September 24, 2018 
 最初、このエラーをみてもサッパリ意味が分からなかったのですが、そのままパッケージのビルドを進めてみると――
  んだ、そういうことか！　Desktop Bridge を利用するには .NET Framework 4.6.1 が必要なのだそうです。Amaguri はなぜか .NET Framework 4.5 で開発されていたので、フレームワークをアップデートして解決しました。
 ### &#34;プロセス起動&#34; に関連した System.Diagnostics.Process.Start への参照があります  んー？　無視していいのかなぁ…… System.Diagnostics.Process.Start() が S mode でダメかもって怒られら pic.twitter.com/RUBZha1fH5— だるやなぎ准将 (@daruyanagi) September 24, 2018</description>
    </item>
    
    <item>
      <title>Amaguri v1.1.0.0：保存時の効果音</title>
      <link>https://blog.daruyanagi.jp/entry/2018/08/31/060000/</link>
      <pubDate>Fri, 31 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/08/31/060000/</guid>
      <description>  んか「フォト」でコピーすると OutOfMemory エラーが発生するので調査したんだけど――
    像をコピーすると、ファイルリストと一緒にイメージもクリップボードに格納してくれるみたい*1。「ペイント」で張り付ければイメージに、「エクスプローラー」で張り付けると画像ファイルになって便利なんだけど、そのあたりをちゃんと考えてなかった。ちゃんと条件分岐を増やして不要な処理を減らす。あと、高速に［Ctrl］＋［C］キーを押しまくったりするとたまにエラーが発生するので、それもちゃんとトラップしてバルーンで警告するようにした。他にも少しエラー処理を足したので、アプリのクラッシュは減ったはず。それでもデカいファイルを扱う場合などに連続処理が発生するとあまりよろしくないので、ファイルの保存時に警告音を再生するオプションを付けた。音が鳴るまでは次のコピーを控えてもらえると、余計なエラーが発生しない。
  もう少し使って、まぁまぁ、だいじょうぶになったらストア向けのパッケージも作る。前回の経験でいえば、申請から公開まで1カ月以上はかかると思う。
*1:クリップボードのデータは複数の形式を同時に持てる。例：プレーンテキストと書式付きテキスト、HTML  </description>
    </item>
    
    <item>
      <title>「Amaguri」v1.0.0.0</title>
      <link>https://blog.daruyanagi.jp/entry/2018/08/26/224927/</link>
      <pubDate>Sun, 26 Aug 2018 22:49:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/08/26/224927/</guid>
      <description>  てなブログ1ってクリップボードから張り付けて画像をアップロードできるけど、ファイルサイズに制限があるじゃないですか2。いちいち縮小するのが面倒だったので、クリップボードに格納された画像のサイズが大きい場合は勝手に縮小するアプリを作りました。縮小したくないときは［Shift］キーを押すと、一時的に機能を止めることができます。あと、ついでなのでデスクトップへ保存する機能も付けました。たとえば［PrintScreen］キーを押すとスクリーンショットが自動でデスクトップに保存されます。そう、Mac みたいにね。デスクトップをキャプチャーするとき、あの機能って邪魔だと思うんだけど、確かに便利なことも多いので……もちろん、設定画面で無効化できます。
  WPF なので TransformedBitmap で縮小をしていたんですけど、Winsnap というスクショツールで取得した画像をコピーするとなぜか全体が黒くなってしまう？　調べたけどよくわからなかったので、System.Drawing.Bitmap に変換して縮小しました。一通り動くまでは一瞬だったけど、この原因調査に半日消えちゃったよ！ちなみに、名前は「クリップボード、クリップボード、クリッ……そういえばそろそろクリの季節だなー、甘栗食べたいなー」と思ってつけました。
*1:フォトライフ？ *2:エラーメッセージをちゃんと出してくれないから気づかないけど  </description>
    </item>
    
  </channel>
</rss>