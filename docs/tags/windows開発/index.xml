<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows開発 on だるやなぎ</title>
    <link>https://daruyanagi.net/tags/windows%E9%96%8B%E7%99%BA/</link>
    <description>Recent content in Windows開発 on だるやなぎ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 12 Apr 2016 17:19:03 +0000</lastBuildDate>
    
	<atom:link href="https://daruyanagi.net/tags/windows%E9%96%8B%E7%99%BA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UWP：ユーザーコントロールを作ってみる</title>
      <link>https://daruyanagi.net/entry/2016/04/12/171903/</link>
      <pubDate>Tue, 12 Apr 2016 17:19:03 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2016/04/12/171903/</guid>
      <description>今回作るのは、文字数カウンター付きのテキストボックス。まずはユーザーインターフェイス。
x:Class=&amp;#34;Hateboo.UserControls.TextBoxWithCounter&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; xmlns:local=&amp;#34;using:Hateboo.UserControls&amp;#34; xmlns:d=&amp;#34;http://schemas.microsoft.com/expression/blend/2008&amp;#34; xmlns:mc=&amp;#34;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;#34; mc:Ignorable=&amp;#34;d&amp;#34; d:DesignHeight=&amp;#34;300&amp;#34; d:DesignWidth=&amp;#34;400&amp;#34;&amp;gt; &amp;lt;stackpanel&amp;gt;&amp;lt;/stackpanel&amp;gt; x:Name=&amp;#34;textBox&amp;#34; TextChanged=&amp;#34;textBox_TextChanged&amp;#34; /&amp;gt; Orientation=&amp;#34;Horizontal&amp;#34; HorizontalAlignment=&amp;#34;Right&amp;#34;&amp;gt; x:Name=&amp;#34;textBlockCurrent&amp;#34;&amp;gt;0 &amp;lt;textblock&amp;gt;&amp;lt;/textblock&amp;gt;/ x:Name=&amp;#34;textBlockMax&amp;#34;&amp;gt;0 ```単にテキストボックスとカウンターラベル（0/100 みたいな表示）を配置しただけ。（コードを張り付けてから気づいたが、0/100 の / を表示するためだけに TextBlock 使ってるのはアレだな。Run とか使えばよかった）このコントロールにほしいプロパティは、 &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Text：TextBox の内容&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Current：現在の TextBox 文字数&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Max：TextBox に入力できる最大の文字数。これをオーバーすると、ラベルが赤くなる&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;ぐらいかな。名前がいまいちなのは気にしないでくれ（Max は Limit とかのほうがよさげやな。英語わからんから知らんけど）。というわけで、こいつらを**依存関係プロパティ**として実装する。依存関係プロパティというのはいまだによくわからんが、バインディングがいい感じに動くように **CLR プロパティ**（フツーの C# のプロパティ）をクラスに登録しておく仕組みって感じだろうか。基本的にはこんな感じ。 ```cs // 依存関係プロパティ public static readonly DependencyProperty MaxProperty = DependencyProperty.Register( &amp;#34;Max&amp;#34;,　// Max という名前の…… typeof(int),　// int 型の CLR プロパティを…… typeof(TextBoxWithCounter), // クラスに登録するやで― new PropertyMetadata(0)); // CLR プロパティ public int Max { get { return (int)GetValue(MaxProperty); } set { SetValue(MaxProperty, value); textBlockMax.</description>
    </item>
    
    <item>
      <title>UWP：一定時間が経過すると勝手に消えるメッセージを実装する</title>
      <link>https://daruyanagi.net/entry/2016/04/05/050000/</link>
      <pubDate>Tue, 05 Apr 2016 05:00:00 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2016/04/05/050000/</guid>
      <description>画面に「保存しました」っていうメッセージを出したいけれど、いつまでも表示されてるのも鬱陶しいので、たとえば3秒後に消したい、みたいな。
public class MainPageViewModel : BindableBase { private string message = string.Empty; public string Message { get { return message; } set { SetProperty(ref message, value); } } private void ShowMessage(string message) { Message = message; var timer = new DispatcherTimer() { Interval = TimeSpan.FromSeconds(3), }; timer.Tick += (e, args) =&amp;gt; { Message = string.Empty; }; timer.Start(); } } ```とにかく DispatcherTimer というのを使うと、遅延タスクみたいなのを実装できるみたい。Message プロパティの setter に処理をぶち込んでもいいかも？　どういう書き方がキレイな書き方なのかまだよくわかんないな。上級者は ReactibeExtension みたいなのを使いこなして、スッキリ書いちゃうのかもしれないが……。あと、ほんとは XAML だけでできればカッコいいのだろうけれど、自分には無理だった。で、テキトーに作ってみてから思ったのだけど、こういうのはユーザーコントロールにしておけばよさげだよね。というわけで、次回はユーザーコントロールでも作ってみる。 </description>
    </item>
    
    <item>
      <title>UWP：はてなブックマークアプリを作るときのメモ</title>
      <link>https://daruyanagi.net/entry/2016/04/02/061512/</link>
      <pubDate>Sat, 02 Apr 2016 06:15:12 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2016/04/02/061512/</guid>
      <description>ググったら自分のブログが出てきて白目。フォトライフの記事だったが、これをブックマーク向けにちょろっと編集するだけで動いた。ただし、
 パスワードによる WSSE 認証は終了 → API キーを代わりに利用する UA がセットされていないと 500 が返ってくる？ → 適当にセット はてながステータスコード100 continueをサポートしていない → 無効にする といった手直しをする必要があったけれど。たとえば、ブックマークの編集はこんな感じ ```cs private const string API_ENDPOINT = &#34;http://b.hatena.ne.jp/atom/&#34;; private const string API_POST_URL = API_ENDPOINT + &#34;post&#34;; private const string API_EDIT_URL = API_ENDPOINT + &#34;edit&#34;; private const string USER_AGENT = &#34;Hateboo&#34;; private const string XML_ACCEPT_TYPE = &#34;application/x.atom+xml, application/xml, text/xml, */*&#34;; private const string XML_CONTENT_TYPE = &#34;application/x.atom+xml&#34;; private const string XML_PAYLOAD = &#34;</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://daruyanagi.net/entry/2013/09/12/001254/</link>
      <pubDate>Thu, 12 Sep 2013 00:12:54 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2013/09/12/001254/</guid>
      <description>WebMatrix 3: Twitter でログインする - だるろぐ でめでたく Twitter でのログインが実現できたのだけど、実はひとつ問題があった。  AccessTokenSecret が取れない。自分もあんまりよくわかっていないのだけど、Twitter の API を利用するには以下の情報が必要であるみたい。  まず、これ。アプリが Twitter へアクセスするために必要。
 ConsumerKey ConsumerSecret 次に、これ。ユーザーに成り代わって Twitter の API を使うために必要。  AccessKey AccessKeySecret アプリの登録画面で取得できる AccessKey/AccessKeySecret はアプリを登録したユーザーのアクセスキー。このアプリにログインしたユーザーとして API を利用するには、そのユーザーに対して発行される AccessKey/AccessKeySecret が必要だ。でも、OAuthWebSecurity では ExtraData から AccessKey をもらうことはできても、AccessKeySecret まではくれないみたい。  通信を Fiddler でみてみた。ちゃんと authorize したあとに access_token している（ここで AccessKey がもらえる）から、ついでに AccessKeySecret もとってきてくれてもよさそうなのだけど。なにか理由があるのかもしれないが、これではちょっと困る。 これを解決するには、Twitter プロバイダーを自分で実装すればよいようだ。 ```cs // ~/App_Code/TwitterClient.cs using DotNetOpenAuth.AspNet; using DotNetOpenAuth.AspNet.Clients; using DotNetOpenAuth.Messaging; using DotNetOpenAuth.OAuth; using DotNetOpenAuth.OAuth.ChannelElements; using DotNetOpenAuth.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://daruyanagi.net/entry/2013/09/05/070245/</link>
      <pubDate>Thu, 05 Sep 2013 07:02:45 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2013/09/05/070245/</guid>
      <description>ちょっと Twitter と連携するアプリを作ってみたかったのだけど、“スターター サイト”テンプレートを使った例以外はあまり載っていなかったので、今回はそれを使わずに、“空のサイト”テンプレートから作ってみるよ。というのも、ググってたら自分のサイトが検索に引っかかって、WebMatrix 2：OAuth でログインする（２） - だるろぐ を放置することすでに半年経つことが判明したので……さすがにこの当時のことはあまりよく思い出せないのだけど、今回の記事がフォローアップのようなものになれば幸い。
### 下準備   まず NuGet で NuGet Gallery | Microsoft.AspNet.WebPages.OAuth 3.2.7 をインストール。これで“スターター サイト”テンプレートでも使われている OAuthWebSecurity Class (Microsoft.Web.WebPages.OAuth) | Microsoft Docs が使えるようになる。  次に https://dev.twitter.com/apps/ でアプリの登録を行っておく。登録祭の必須入力事項は以下のとおり。  Name: アプリの名前 Description: title Website: http://127.0.0.1:****/ （localhost は無効な URL として蹴られる） Callback URL: http://127.0.0.1:****/ （空っぽだと動かないっぽい） Allow this application to be used to Sign in with Twitter: 無効化 アプリを登録したら、  Consumer key Consumer secret を取得し、~/_AppStart.cshtml で初期化を行う。 ```cs @{ // DB名: kenzo-memo.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://daruyanagi.net/entry/2013/05/10/085706/</link>
      <pubDate>Fri, 10 May 2013 08:57:06 +0000</pubDate>
      
      <guid>https://daruyanagi.net/entry/2013/05/10/085706/</guid>
      <description>&amp;gt; Nancy is a lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono. The goal of the framework is to stay out of the way as much as possible and provide a super-duper-happy-path to all interactions. Hosting Nancy with asp.net · NancyFx/Nancy Wiki · GitHub  Scott Hanselman 氏のブログ（One ASP.NET: Nancy.Templates for Visual Studio - Scott Hanselman）で知ったのですが、 「Nancy」なんてのがあるんですね！
 Nancy - Lightweight Web Framework for .</description>
    </item>
    
  </channel>
</rss>