<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows Azure on blog.daruyanagi.jp</title>
    <link>https://blog.daruyanagi.jp/tags/windows-azure/</link>
    <description>Recent content in Windows Azure on blog.daruyanagi.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 20 Jan 2015 03:32:10 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/windows-azure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>あちこちスクレイピングして、松山の鉄道・船・飛行機の運行状況をまとめるサイトを作ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2015/01/20/033210/</link>
      <pubDate>Tue, 20 Jan 2015 03:32:10 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/01/20/033210/</guid>
      <description>br/&amp;gt;
http://ehime-traffic.azurewebsites.net/WebMatrix + Azure Web サイト（マイクロソフトのクラウド環境や開発ツールを無償提供 | Microsoft BizSpark、ありがとう！）で愛媛・松山の鉄道・船・飛行機の運行状況を集約したサイトを作ってみました（飛行機の英語の綴りミスなんかがボロボロ見つかる程度の成熟度です）。誰の役に立つというものでもないですが、自分的には満足です。そのうちわざわざサイトに行くのも面倒になると思うので、ゆくゆくは Twitter の BOT か何か作って、情報をプッシュできるようにしたいですね。このサイトの情報は、大きく分けて二つの方法で取得しています。サイトをスクレイピングして情報取得（鉄道、船、JAL）（非公開）API を叩いて JSON から情報取得（ANA、ピーチ）（ジェットスターだけはうまくいかなかった！　今度誰か教えて！*1）スクレイピングで面倒だったのは、情報の形式が一定していないこと、文字コードがバラバラなこと（ローカルでテストしているときは文字化けしないのに、クラウドで動かすと文字化けすることもあった）でしょうか。とくに情報の形式が一定していないのはしんどいですね。イレギュラーなケースを見つけるたびにデータ標準化のための処理が膨れ上がっていくので、最後は妥協、妥協、妥協。ペライチのページにコードをべた書きして、それをまとめていくという開発手法は WebMatrix が得意とする分野だと思うけれど、最後のほうはちょっと力不足かなって感じもしました。まぁ、そんなときはサクッと Visual Studio に切り替えちゃうんですけど。### 開発の流れ  行情報のページをブラウザーでみる。ブラウザーの開発者ツールで DOM をみたり、リクエスト・レスポンスをみたりしながら、静的ページであればスクレイピング、ページを動的に組み立てているなら API を探してそれを叩いてみるという感じ。スクレイピングであれば、NuGet Gallery | HtmlAgilityPack 1.4.9 が超簡単。XPath でノードを指定してサクッと中身を取ってこれる。
using (var client = new WebClient()){var response = client.DownloadString(url);var json = Json.Decode(response);var doc = new HtmlAgilityPack.HtmlDocument();doc.LoadHtml(doc)// &amp;lt;div class=&amp;#34;ss_comment&amp;#34;&amp;gt;ここがほしいやで&amp;lt;/div&amp;gt; var message = doc.</description>
    </item>
    
    <item>
      <title>Dropbox ＋ Microsoft Azure でサイトを管理する</title>
      <link>https://blog.daruyanagi.jp/entry/2014/05/03/082308/</link>
      <pubDate>Sat, 03 May 2014 08:23:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/05/03/082308/</guid>
      <description>  del&amp;gt;Windows Microsoft Azure Web サイト（MAWS）では、Dropbox のフォルダーとコードを同期して、サイトをデプロイすることができます。
複数の環境でソースコードを同期しておきたいGit とかよくわかんねーけど、Dropbox なら毎日使ってるぜといったユーザーにお勧めかも。### サイトの作成  ず MAWS で新規サイトを作成してみました。［Web サイト］-［簡易作成］を選択し、
  RL（サブドメイン）を決めるだけ（ほかはよくわからんのでそのままにした）。
  きあがり。簡単すぎて鼻血が出そうでした。
### Dropbox との連携  っきの画面の下の方にある［ソース管理の統合］-［ソース管理からのデプロイの設定］を選択すると、どこに保存されているコードをサイトへデプロイするかが選べます。もちろん、今回は Dropbox を選択。
  示されるがままに Dropbox との連携処理を行うと……
  んかフォルダが作成されます。
  認してみると DROPBPBOX_ROOT\アプリ\Azure にサイトのフォルダがありますね（カタカナ！？）。これを WebMatrix でサイトとして開きます。で、なんでもいいので適当にファイルを置いてみてください。今回は“テストだよ！”と表示するだけの Default.cshtml をルートにおいています。
  で、サイトの管理画面（ブラウザー）に戻り、下の方にある［同期］ボタンを押してデプローイ！
  事サイトも動き出しました。たぶん、デプロイってコマンドでもできるよね。静的ページ（動的なのでもいいけど）を Dropbox で管理して、コマンドでデプロイするようにすればいい感じかもしれない。
</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/29/042614/</link>
      <pubDate>Tue, 29 Oct 2013 04:26:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/29/042614/</guid>
      <description>indows Azure Web Sites はソース管理（GitHub とか CodePlex とか）からのデプロイが可能。前々から使ってみたかったがついつい後回しにしていたのだけど、これが超便利だった。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/20/132105/</link>
      <pubDate>Sun, 20 Oct 2013 13:21:05 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/20/132105/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/10/14/141550&amp;quot;&amp;gt;WebMatrix 3: Twitter Bot （＋リアルタイムログ表示付き）でも作ってみる。 - だるろぐ を Windows Azure Websites に置いてみた――のだけど、なんかすぐに止まってしまう。最初は SignalR 使ってるからかなぁと思い、リアルタイムログ表示の機能をとっぱらってみたのだけれど、やはり止まる。
&amp;gt;Windows Azure Webサイトの無料や共有インスタンスの場合、５～20分ほどアクセスが無かった場合はシャットダウンされてリソースが解放されます。そーすると、初回アクセス時に、レスポンスが遅く感じる事象が発生します。Windows Azureモバイルサービスのジョブスケジューラーで15分起きにリクエストを送信することで、常時ウォームアップし続けることが可能になります。  素敵だけど、怒られそうな話ですね！
 Windows Azureで定期ジョブを実行する方法 - 蒼の王座 怒られたらイヤだけど、とりあえずこの方法を試してみた。結論的には、上手くいった。Twitter のメインアカウント（やなぎ ひでとし（柳 英俊） (@YanagiHidetoshi) | Twitter）に新着情報を配信できるようになった。
  ケジューリングは毎分・毎時・毎日・毎月と要求時が設定できるみたい。正時にキッカリ実行したいなんて言う場合には使えないので、10分おきにサイトをキックするだけにして、定期実行の仕組みは自分で実装した（ついでにコードも前よりカッコよく、シンプルにしたった！）。
  br/&amp;gt;
function warmup() {warmUpSite(&amp;#34;http://darufeed.azurewebsites.net/&amp;#34;);}function warmUpSite(url) {console.info(&amp;#34;warming up: &amp;#34; + url);var req = require(&amp;amp;#39;request&amp;amp;#39;);req.get({ url: url }, function(error, response, body) {if (!error) {console.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/19/091940/</link>
      <pubDate>Sun, 19 May 2013 09:19:40 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/19/091940/</guid>
      <description>  付いてなかったのだけど、WebMatrix から Windows Azure Web Sites へデプロイすると、［リモート］リボンにこんなボタンが追加されるんだね。管理ポータルをサクッと開ける。
### ［管理］ボタン  ッシュボードページをひらく。トラフィックなんかがみられる。
### ［ドメイン］ボタン  成ページを開く。“Share”以上のプランを選択している場合、カスタムドメインが設定できるらしい。貧乏だから試せない。
### ［スケール］ボタン  荷に応じてインスタンをが増やせる。貧乏だから試せない。
</description>
    </item>
    
    <item>
      <title>Windows Azure Web サイトが .NET Framework 4.5 に対応したそうなので、女の子を落としてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/31/210319/</link>
      <pubDate>Wed, 31 Oct 2012 21:03:19 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/31/210319/</guid>
      <description>Windows Azure Web サイト にて .NET 4.5 アプリケーションが配置可能になり、また Windows Azure クラウドサービスでも Windows Azure SDK 1.8 にて .NET Framework 4.5 および Guest OS 3.0 (Windows Server 2012 互換) のテンプレートが追加されています。2012 年 10 月の Windows Azure 一斉アップデート : .NET 4.5 ＆ Windows Sever 2012 対応、SDK 1.8 リリース、管理ポータル日本語対応 – 青い空の向こうへ Windows Azure Web サイトが .NET Framework 4.5 に対応したらしい。ついでに、管理ポータルが日本語に対応したそうな。ってことはですよ。_WebMatrix で女の子を落とす - だるろぐ をWindows Azure Web サイトへ配置できる！つまり、「Windows Azure で女の子が落せる」わけです。「親方！　空から女の子が！」_ってヤツですね！　なんと胸が熱い……。</description>
    </item>
    
    <item>
      <title>#GoAzure の出落ち動画が公開されています</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/27/212854/</link>
      <pubDate>Fri, 27 Jul 2012 21:28:54 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/27/212854/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/06/30/211729&amp;quot;&amp;gt;#GoAzure に行ってきました！ - だるろぐ のセッション動画が公開されています（Go Azure | Channel 9）。
&amp;gt;出落ちとは何かと言うことについてご確認ください。Go Azure on Channel 9 | OPCDiary みんな確認すべきですネ。それは冗談としても、 Windows Azure って何か知りたい人にとっては必見の動画になっていると思います。この技術を無視するのは、本当にもったいないと思う！</description>
    </item>
    
    <item>
      <title>Windows Azure Web Sites と WebMatrix 2 の組み合わせはマーベラス！（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/04/205252/</link>
      <pubDate>Fri, 27 Jul 2012 08:32:41 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/04/205252/</guid>
      <description>Windows Azure Web Sites と WebMatrix 2 の組み合わせはマーベラス！ - だるろぐ では、
&amp;gt;Azure で WordPress を導入した Web サイトを作成 → WebMatrix 2 でローカルにダウンロード → ごにょごにょして Azure へデプロイ という方法をとったけど、
&amp;gt;Azure で空の Web サイトを作成 → WebMatrix 2 でローカルにダウンロード → WordPress をインストールしてごにょごにょして Azure へデプロイ ということも可能らしい。 #GoAzure に行ってきました！ - だるろぐ ではそうしてた気がする。とういうことで、やってみた。
### Windows Azure Web サイトの作成Quick Create で新規 Web サイトを作成。右下にある［WebMatrix］ボタンを押すと、「WebMatrix 2」が起動して Azure 上の Web サイトがローカルにダウンロードされる。初回はコネクターアプリをインストールする必要があると思う。### WebMatrix 2 で WordPress のインストール「空のサイトやで！」と言われるので……WordPress をインストールする。何回も言わしてもらうけど、めっさ簡単やから。インストール完了！一度実行して、初回設定を済ましておこう。ついでに最新版へのアップデートもやっておく。### Windows Azure Web サイトへデプロイそれを次は Azure へ発行！　サーバー上のファイルを削除するオプションと、データベースの内容をアップロードするオプションを有効にしておこう。結果は……失敗！？　あれ、何がおかしいんだ…… (；´Д｀)```11:28:02: Adding setAcl (be-styles/wp-content).</description>
    </item>
    
    <item>
      <title>使いすぎに注意……</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/06/040304/</link>
      <pubDate>Fri, 06 Jul 2012 04:03:04 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/06/040304/</guid>
      <description>やっとこさ、WordPress の［発行］までこぎつけたんだけど……発行した Web サイトにアクセスできない。管理ポータルを覗くと、転送量が 1782.90 MB に！ _ｶﾞ━━(;ﾟДﾟ)━━ﾝ!!　_見事、クォータの上限に達したようでござる。公開時の転送量もカウントされるのね……そりゃそうだな。ファイルもデータベースもデカかったからねぇ……しっかし、 Windows Azure って、無償期間が終わったらいくらかかるようになるんだろう……やっぱりちょっと心配になる。激安な ExpressWeb と比べるつもりはないけど、お財布にやさしい値段だったら嬉しいなぁ。とりあえず、 Windows Azure は少しお休みにして、明日はゆっくり掃除と洗濯と出張の準備でもしよう。</description>
    </item>
    
    <item>
      <title>XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → 成功！</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/05/022927/</link>
      <pubDate>Thu, 05 Jul 2012 02:29:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/05/022927/</guid>
      <description>（Windows 8 の Metro アプリ「黒板」で書いてみました*1）前回（XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → あと一歩まで行けた - だるろぐ）は、XREA/CoreServer の WordPress 環境をローカルに保存して、 WebMatrix で動作可能な状態までメンテナンスし、 Windows Azure Websites へアップロードするというフローで、 WordPress の引っ越しを目論んだ……が最後の最後で失敗した。そのときのエラーログの一部がこれ。
0:30:02: エラーの詳細:0:30:02: An error occurred during execution of the database script. The error occurred between the following lines of the script: &amp;quot;145&amp;quot; and &amp;quot;255&amp;quot;. The verbose log might have more information about the error. The command started with the following:0:30:02: &amp;quot;---- Dumping data for table `wp_morpheme````**wp_morpheme** テーブルってなんだろう。調べてみると、どうやら &amp;lt;a href=&amp;quot;http://wordpress.</description>
    </item>
    
  </channel>
</rss>