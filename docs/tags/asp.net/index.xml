<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.net on だるやなぎ</title>
    <link>http://daruyanagi.net/tags/asp.net/</link>
    <description>Recent content in ASP.net on だるやなぎ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 23 Jun 2018 20:45:20 +0000</lastBuildDate>
    
	<atom:link href="http://daruyanagi.net/tags/asp.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebMatrix：IHttpModule で定期実行を実装する</title>
      <link>http://daruyanagi.net/entry/2014/07/20/223507/</link>
      <pubDate>Sun, 20 Jul 2014 22:35:07 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2014/07/20/223507/</guid>
      <description>WebMatrix 3: Twitter Bot （＋リアルタイムログ表示付き）でも作ってみる。 - だるろぐ で System.Timers.Timer を使って ASP.NET の定期処理を実装したのだけど、のいえ先生の neue cc - ASP.NETでの定期的なモニタリング手法 でもう一度実装しなおしてみた。  
### Web.config ```xml xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?  .web&amp;gt; debug=&amp;quot;true&amp;rdquo; targetFramework=&amp;quot;4.0&amp;rdquo; /&amp;gt; .web&amp;gt;
.webServer&amp;gt;  name=&amp;quot;SchedulerModule&amp;rdquo; type=&amp;quot;SchedulerModule&amp;rdquo;/&amp;gt;
.webServer&amp;gt;
&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt; ### ~/App_Code/ScheduleModule.cs ```cs using System; using System.Threading; using System.Web; public class SchedulerModule : IHttpModule { static int initializedModuleCount = 0; static Timer timer; public void Init(HttpApplication context) { var count = Interlocked.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>http://daruyanagi.net/entry/2013/10/14/141550/</link>
      <pubDate>Mon, 14 Oct 2013 14:15:50 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2013/10/14/141550/</guid>
      <description>タイマーと WebMatrix 3: Twitter ライブラリ Tweetinvi API でツイートしてみる - だるろぐ を組み合わせれば、定期的に何かをつぶやく BOT も手軽に作れそうな予感。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>http://daruyanagi.net/entry/2013/10/01/081913/</link>
      <pubDate>Tue, 01 Oct 2013 08:19:13 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2013/10/01/081913/</guid>
      <description>WebMatrix 3: @ でハマる - だるろぐ の続き。 window.twttr = (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = &amp;ldquo;https://platform.twitter.com/widgets.js&amp;quot;; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function(f) { t._e.push(f); }; return t; }(document, &amp;ldquo;script&amp;rdquo;, &amp;ldquo;twitter-wjs&amp;rdquo;)); twttr.ready(function (twttr) { var el = document.getElementsByClassName(&amp;lsquo;twitter-syntax-tweet-id-384486530380611584&amp;rsquo;); for (var i=0;i&amp;lt;el.length;i++) { if (!!el[i].getAttribute(&amp;lsquo;data-is-tweet-loaded&amp;rsquo;)){ continue; } el[i].setAttribute(&amp;lsquo;data-is-tweet-loaded&amp;rsquo;, &amp;lsquo;1&amp;rsquo;); twttr.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>http://daruyanagi.net/entry/2013/09/29/122508/</link>
      <pubDate>Sun, 29 Sep 2013 12:25:08 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2013/09/29/122508/</guid>
      <description>ちょいとログを外部ファイルに吐きたくなって、テキトーにこんなコードを書いてみた。  #App_Code/Logger.cshtml @helper Write(string message) { System.IO.File.AppendAllText( Server.MapPath(&amp;#34;~/log.txt&amp;#34;), string.Format(&amp;#34;{0}:\t{1}\r\n&amp;#34;, DateTime.Now, message) ); } ```これを Default.cshtml でテストしてみた。  ```html @{ Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;); } &amp;amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt; &amp;amp;lt;head&amp;gt; &amp;amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34;/&amp;gt; &amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;amp;lt;title&amp;gt;マイ サイトのタイトル&amp;amp;lt;/title&amp;gt; &amp;amp;lt;link href=&amp;#34;~/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt; &amp;amp;lt;/head&amp;gt; &amp;amp;lt;body&amp;gt; @Logger.Write(&amp;#34;Body 内で記述&amp;#34;) &amp;amp;lt;/body&amp;gt; &amp;amp;lt;/html&amp;gt; ```結果はというと――  ――冒頭のコードブロック内で記述したログは記録されない。「あれ、なんでだろう？」と思って、あちこちごちゃごちゃ弄ってみたのだけど、正解はコレだった。 ```html @{ @Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;); } ```  Logger.Write() のまえに @ を足せば実行される。 ```html @{ @( Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;) ) } ```でもいいのだけど。しっかし、これ、なぜなんだろう。自分はまだまだ Razor がわかってないな。 </description>
    </item>
    
    <item>
      <title>ASP.NET and Web Tools 2012.2</title>
      <link>http://daruyanagi.net/entry/2013/09/18/024639/</link>
      <pubDate>Wed, 18 Sep 2013 02:46:39 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2013/09/18/024639/</guid>
      <description>（208日前に書いた下書きをそのまま公開してみるなど）  &amp;gt; Last year the ASP.NET team started talking about something we&amp;amp;#39;re calling &amp;quot;One ASP.NET.&amp;quot; I showed some mockups of our ideas last summer at the aspConf Keynote that you can watch online.We also announced then that we would add new features to ASP.NET as out of band releases (OOB) without breaking existing functionality. This means that developers don&amp;amp;#39;t have to wait for the next version of Visual Studio for great web development features today.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>http://daruyanagi.net/entry/2013/09/12/001254/</link>
      <pubDate>Thu, 12 Sep 2013 00:12:54 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2013/09/12/001254/</guid>
      <description>WebMatrix 3: Twitter でログインする - だるろぐ でめでたく Twitter でのログインが実現できたのだけど、実はひとつ問題があった。  AccessTokenSecret が取れない。自分もあんまりよくわかっていないのだけど、Twitter の API を利用するには以下の情報が必要であるみたい。  まず、これ。アプリが Twitter へアクセスするために必要。
 ConsumerKey ConsumerSecret 次に、これ。ユーザーに成り代わって Twitter の API を使うために必要。  AccessKey AccessKeySecret アプリの登録画面で取得できる AccessKey/AccessKeySecret はアプリを登録したユーザーのアクセスキー。このアプリにログインしたユーザーとして API を利用するには、そのユーザーに対して発行される AccessKey/AccessKeySecret が必要だ。でも、OAuthWebSecurity では ExtraData から AccessKey をもらうことはできても、AccessKeySecret まではくれないみたい。  通信を Fiddler でみてみた。ちゃんと authorize したあとに access_token している（ここで AccessKey がもらえる）から、ついでに AccessKeySecret もとってきてくれてもよさそうなのだけど。なにか理由があるのかもしれないが、これではちょっと困る。 これを解決するには、Twitter プロバイダーを自分で実装すればよいようだ。 ```cs // ~/App_Code/TwitterClient.cs using DotNetOpenAuth.AspNet; using DotNetOpenAuth.AspNet.Clients; using DotNetOpenAuth.Messaging; using DotNetOpenAuth.OAuth; using DotNetOpenAuth.OAuth.ChannelElements; using DotNetOpenAuth.</description>
    </item>
    
    <item>
      <title>Microsoft のダウンロードセンターがリニューアル</title>
      <link>http://daruyanagi.net/entry/2013/05/16/072431/</link>
      <pubDate>Thu, 16 May 2013 07:24:31 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2013/05/16/072431/</guid>
      <description>まぁまぁいいかも。全体的にメトロ（死語）っぽくまとまっている。お前らのお目当てであろうダウンロードボタンがわかりやすくデカデカと置いてあって、俺のような人間にしか用のないオプションの情報は折りたたんでシンプルに表示してあるのがイイ。ここ半年間デザインが二転三転し、米国と日本でデザインがチグハグだったりしてややこしかったけれど、これが一番いいんじゃないかなぁ。  どんなデザインか確認するついでに、ASP.NET Web API HTTP Message Lifecycle ポスター（http://www.microsoft.com/ja-jp/download/details.aspx?id=36476）でもダウンロードしてみよう ☆（ゝω・）vｷｬﾋﾟ
&amp;gt; 日本語化＆実寸印刷配布したいなぁ・・・(ﾁﾗｯ ASP.NET Web API HTTP Message Lifecycle ポスター - THE TRUTH IS OUT THERE - Site Home - MSDN Blogs  日本語化はされている。実寸印刷のものが貰えたら、便所に貼りたいと思う。あと、これの WebMatrix （ASP.NET Web Pages）版ないかしら！</description>
    </item>
    
    <item>
      <title>WebMatrix 2：ASP.NET と PHP（2）</title>
      <link>http://daruyanagi.net/entry/2012/12/27/070246/</link>
      <pubDate>Thu, 27 Dec 2012 07:02:46 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/12/27/070246/</guid>
      <description>WebMatrix 2：ASP.NET と PHP - だるろぐ あたりを書いた時に Twitter で「WebMatrix 2（というより、Razor 記法）は Visual Basic に対応していないのか？」という疑問を見かけたのですが、ちゃんと対応しています。たとえば前回の例の場合、こんなふうに書きます。
@Code Dim s = &amp;#34;Hello! World&amp;#34; &amp;amp;#39; 追加 End Code &amp;amp;lt;!DOCTYPE html&amp;gt; &amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;amp;lt;head&amp;gt; &amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt; &amp;amp;lt;/head&amp;gt; &amp;amp;lt;body&amp;gt; @s &amp;amp;lt;!-- 追加 --&amp;gt; &amp;amp;lt;/body&amp;gt; &amp;amp;lt;/html&amp;gt; ```C# の @{ … } が @Code … End Code に置き換わったぐらいかな。For 文の書き方なんかも VB 風に書けます。詳しいことは &amp;lt;a href=&amp;#34;http://www.atmarkit.co.jp/fdotnet/rapidmaster/rapidmaster_04/rapidmaster_04.html&amp;#34;&amp;gt;VB Razor構文 基礎文法 総まとめ - ＠IT&amp;lt;/a&amp;gt; でも参照してください。個人的にはこれから始める人が VB で Razor を書く意味はあまりないのではないかなと思います。XML の処理などは簡単なんだそうですけど。あと、前回は言わなかったけれど &amp;amp;lt;% … %&amp;gt; という ASP.</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード</title>
      <link>http://daruyanagi.net/entry/2012/08/19/130606/</link>
      <pubDate>Sun, 19 Aug 2012 13:06:06 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/08/19/130606/</guid>
      <description>今日は「WebMatrix 2」でファイルのアップロードを試してみた。なお、このサンプルは「Empty Sites」テンプレートを元に作成している。
### Delault.cshtml ```html &amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;title&amp;gt;マイ サイトのタイトル&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;~/Upload&amp;rdquo; method=&amp;quot;post&amp;rdquo; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;file&amp;rdquo; name=&amp;quot;upload&amp;rdquo; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;rdquo; name=&amp;quot;submit&amp;rdquo; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt; ### Upload.cshtml アップロード処理を行う cshtml はこんな感じにしてみた。ほんとは path が存在しなければ例外、 file のサイズが 0 ならば例外、 file が image/*** でなければ例外、といったチェックを入れるのだけれど、ソースが長くなるので割愛している。あと、最初から複数ファイルのアップデートに対応できるように記述している。 ```cs @using System.IO @functions { enum Result { Success, Error }; } @{ var result = Result.Error; var message = &amp;quot;You can use only POST method.</description>
    </item>
    
    <item>
      <title>SignalR のデモがちょっとかっこいい</title>
      <link>http://daruyanagi.net/entry/2012/07/04/081647/</link>
      <pubDate>Wed, 04 Jul 2012 08:16:47 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/07/04/081647/</guid>
      <description>Video streaming by Ustream &amp;gt; イベントの方向とタイトル的に ASP.NET 全体を少しずつ喋る形にしたのですが、SignalR だけで 45 分話してもいけたかなという印象を持ちました。 Go Azure お疲れ様でした - まめしば雑記  あんまりまだよくわかってないけど、あのデモは結構興味惹かれたかも。
&amp;gt; SignalR は、このあと見て行くように、単なる WebSocket 開発のためだけのライブラリーではなく、さらに多くの付加価値を含んだ上位のフレームワークです。抽象度も高く、日本語のエンコードなど含めプリミティブな処理を開発者が記述する必要はありません。 WebSocket サーバー開発 : SignalR とクロス ブラウザーへの対応 - 松崎 剛 Blog - Site Home - MSDN Blogs &amp;gt; SignalR という非同期でリアルタイムな双方向通信を実現するライブラリが面白そうなので試してみました。作者は ASP.NET チームの Damian Edwards 氏と David Fowler 氏です。 SignalR を簡単に使ってみた - まめしば雑記  二日目はオンライン参加だったので、セッションが終わってすぐ手元のPCで実際にサンプルを試してみた。まず、 NuGet で SignalR のサンプルをインストール。依存関係のあるものも自動ででろでろっとダウンロード・インストールされる。サンプルは株価の上がり下がりを表示するもので、サーバー側からデータが送られてきてクライアント側（Webブラウザー）の表示が更新されるという、要はプッシュ通知のデモになっている。見てるだけでもちょっと楽しい。SignalR のもう一つのキモは、ブラウザーが対応する技術に応じて Web Socket やフレームを使い分けてくれるところ。これを確かめるために、今回は「IE Tester」というツールを利用してみた。My DebugBar | IETester / Browser Compatibility Check for Internet Explorer Versions from 5.</description>
    </item>
    
    <item>
      <title>WebMatrix 2 RC でサクッとWebサイトをオシャレにしてみた</title>
      <link>http://daruyanagi.net/entry/2012/06/20/060353/</link>
      <pubDate>Wed, 20 Jun 2012 06:03:53 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/06/20/060353/</guid>
      <description>みてくれたまえ。これが昨日までの http://download.daruyanagi.net/ だ。ワイルドだろ？*1　さすがにこれを放置するのも何なので、WebMatrix 2.0 Release Candidate でキレイにしてみることにした。
### なにはともあれインストール まず、WebMatrix 2 を  WebMatrix 2   からダウンロードしてくれたまえ。うちの場合は、なんか2・3回インストーラーを実行するハメになったけど（なんでだ？）、まぁ、すんなり入る。  ### Webサイト側でリモート管理を有効にする レンタルサーバーはもちろん、ASP.NET がお安く使える  高機能・激安 Windows レンタルサーバー ExpressWeb   を使ってるよな？　Web配置で楽をしましょう。設定ファイルをダウンロードしておくとあとで捗る。  ### Webサイトのダウンロード WebMatrix でリモートサイトを開く。さっきダウンロードしておいた設定ファイルを読みこめば、かなり楽ちん。リモート管理のアカウント情報を入力するだけで済む。無事接続できた。このまま作業をしてもいいのだけど、やっぱりローカルにコピーを作っておいたほうが何かと安全なのでダウンロードしておく。これがやたら時間かかる。なぜか使ってもいない MySQL もインストールされるし。まぁ、細かいことは気にしない。 ASP.NET 4 のインストールにも失敗したけど、とくに問題なく動いているみたい。@daruyanagi そういう時は、MySQLのサイトで日本のサーバーから落とすのが早いっす。
&amp;mdash; ウェブマトリクスマン(緑のタイツマン (@WebMatrixMan) June 19, 2012  WebMatrixman はほんとデキる子だな。  ### Git for WebMatrix のインストール この作業はスキップしていいのだけど、どうせならバージョン管理できるようにしておけばロールバックとか楽になるよね。というわけで、拡張機能ギャラリーから「Git for WebMatrix」をインストールしておく。リリース当初はハングアップしたりして大変だったけど、週明けのバージョンアップでかなり使えるようになった。  ### Twitter Bootstrap のインストール WebMatrix 2 では NuGet もよりお手軽に利用できるようになっている。どこかの誰かが作ってくれた便利ツールが自由に使えるというわけだ！　使わないなんて損、損。今回は、デザインセンスのない開発者御用達のCSSフレームワーク Twitter Bootstrap を利用してみた。 WebMatrix 2 は LESS なんかも扱えるから、今後はカスタマイズ可能な Bootstrap なんかも利用できるようになるかも。夢が広がる……  ### コーディング さて、ようやくコーディングのお時間なのだけど……基本的には Bootstrap, from Twitter （サンプル）のソースコードをガバっとコピペしてチョチョイのちょいとイジるだけ。一瞬で終わってしまった。 #### _Layout.</description>
    </item>
    
    <item>
      <title>YouTube の URL を動画タグへ変換する（oEmbed）</title>
      <link>http://daruyanagi.net/entry/2012/03/06/011745/</link>
      <pubDate>Tue, 06 Mar 2012 01:17:45 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/03/06/011745/</guid>
      <description>Flickr の URL を画像タグへ変換する（oEmbed） - だるろぐ のYoutube版も作ってみた。Youtube も oEmbed に対応しているのだけれど、画像ではなく動画なので、リンクを作る場合は url ではなく html （objectタグ）を使うのが、Flickr の写真の場合と少し違うところ&amp;lt;a href=&amp;rdquo;#f1&amp;rdquo; name=&amp;quot;fn1&amp;rdquo; title=&amp;quot;Flickr も動画に対応しているのだけど、type==&amp;rdquo; video&amp;quot;=&amp;rdquo;&amp;rdquo; の場合はやっぱり=&amp;rdquo;&amp;rdquo; url=&amp;rdquo;&amp;rdquo; ではなく=&amp;rdquo;&amp;rdquo; html=&amp;rdquo;&amp;rdquo; を使う&amp;quot;=&amp;quot;&amp;ldquo;&amp;gt;*1。type には、ほかに rich だの link だのがあるっぽい。詳しくは oEmbed に全部書いてあるので参照のこと。
```  private static readonly string SERVICE_ENDPOINT = @&amp;ldquo;http://www.youtube.com/oembed&amp;quot;; private static readonly string FORMAT_URL = @&amp;quot;{0}?url={1}&amp;amp;maxwidth={2}&amp;amp;maxheight={3}&amp;amp;format={4}&amp;quot;;
public static string FORMAT_HTML_VIDEO_TAG = @&amp;rdquo; &amp;lt;blockquote class=&#39;youtube youtube-video&#39;&amp;gt; &amp;lt;p&amp;gt;{0}&amp;lt;p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;small&amp;gt;{1} by &amp;lt;a href=&#39;{3}&#39;&amp;gt;{2}&amp;lt;/a&amp;gt;&amp;lt;/small&amp;gt;&amp;lt;p&amp;gt; &amp;lt;/blockquote&amp;gt; &amp;ldquo;; public static string FORMAT_ERROR = @&amp;quot;&amp;lt;p class=&#39;error&#39;&amp;gt;{0}&amp;lt;/p&amp;gt;&amp;rdquo;;</description>
    </item>
    
    <item>
      <title>Flickr の URL を画像タグへ変換する（oEmbed）</title>
      <link>http://daruyanagi.net/entry/2012/03/03/225037/</link>
      <pubDate>Sat, 03 Mar 2012 22:50:37 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/03/03/225037/</guid>
      <description>eEmbedというのは、あるリソースのURL(例えばFlickrの特定の写真のページのURL)を  サードパーティ上で、写真自体の埋め込みに変換したいときに、 埋め込みに必要なパラメータを取得するためのプロトコルみたいです。
 URLを埋め込みコンテンツに変換するoEmbedの仕様 - Codin’ In The Free World  前にやったときは API を使って実装したのだけど、こっちだと API キーや秘密鍵を取得しないで同じことができそう。
```  using System; using System.Collections.Generic; using System.Linq; using System.Web;
using Codeplex.Data; using System.Net;
public static class FlickrHelper { private static readonly string Endpoint = @&amp;ldquo;http://www.flickr.com/services/oembed&amp;quot;; public static string FORMAT_URL = @&amp;quot;{0}?url={1}&amp;amp;maxwidth={2}&amp;amp;maxheight={3}&amp;amp;format={4}&amp;quot;; public static string FORMAT_HTML_TAG = @&amp;rdquo; &amp;lt;blockquote&amp;gt; &amp;lt;p&amp;gt;&amp;lt;img src=&#39;{0}&#39; alt=&#39;{1}&#39; /&amp;gt;&amp;lt;p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;small&amp;gt;{1} by &amp;lt;a href=&#39;{3}&#39;&amp;gt;{2}&amp;lt;/a&amp;gt;&amp;lt;/small&amp;gt;&amp;lt;p&amp;gt; &amp;lt;/blockquote&amp;gt; &amp;ldquo;; public static string FORMAT_ERROR = @&amp;quot;&amp;lt;p class=&#39;error&#39;&amp;gt;{0}&amp;lt;/p&amp;gt;&amp;rdquo;;</description>
    </item>
    
    <item>
      <title> ASP.NET MVC 3 で Dropbox の OAuth 認証を使う</title>
      <link>http://daruyanagi.net/entry/2012/02/28/012843/</link>
      <pubDate>Tue, 28 Feb 2012 01:28:43 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/02/28/012843/</guid>
      <description>今回は Sharpbox を使って、Webサイトに Dropbox を利用したログイン機能を追加します。まず、 SessionController というコントローラを作成して、Create()、AuthorizationCallBack()、Delete() の3つのメソッドを作成しました。/Session/Create が /LogOn に、/Session/Delete が /LogOff にあたります*1。ビューへ適当に @Request.IsAuthenticated を埋め込んでいるのでわかりにくいですけど、今は False 、つまりログインしていない状態です。では、 Create() から。
### /Session/Create ```  // // GET: /Session/Create -&amp;gt; map route /LogOn
public ActionResult Create() { string app_key = &amp;ldquo;&amp;quot;; string app_secret = &amp;ldquo;&amp;quot;;
// 0. load the config DropBoxConfiguration config = DropBoxConfiguration .GetStandardConfiguration(); config.AuthorizationCallBack = new Uri( Request.Url, &amp;quot;AuthorizationCallBack&amp;quot;); // 1. get the request token from dropbox DropBoxRequestToken requestToken = DropBoxStorageProviderTools .</description>
    </item>
    
    <item>
      <title> favicon.ico を置いてないといちいちルーティングに引っかかってめんどくさい</title>
      <link>http://daruyanagi.net/entry/2012/02/25/193453/</link>
      <pubDate>Sat, 25 Feb 2012 19:34:53 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/02/25/193453/</guid>
      <description>_エラー：データが見つからないぜ → favicon.ico がルーティングに引っかかってました！_ というのがめんどくさい時は、
```  Global.asax public static void RegisterRoutes(RouteCollection routes) { routes.IgnoreRoute(&amp;quot;{resource}.axd/{*pathInfo}&amp;quot;); routes.IgnoreRoute(&amp;ldquo;favicon.ico&amp;rdquo;); :
と、favicon.ico を無視するルーティングを一行書き加えておくとイイ。via &amp;lt;a href=&amp;quot;http://stackoverflow.com/questions/6596715/favicon-icon-mvc3-asp-net&amp;quot;&amp;gt;Favicon Icon-MVC3 ASP.NET - Stack Overflow&amp;lt;/a&amp;gt; </description>
    </item>
    
    <item>
      <title> パスに無効な文字が含まれています。</title>
      <link>http://daruyanagi.net/entry/2012/02/25/162246/</link>
      <pubDate>Sat, 25 Feb 2012 16:22:46 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/02/25/162246/</guid>
      <description>### 状況 コントローラーで View(model) を返す。model は string型 で、ローカルにあるテキストファイルを読み込んだ内容が格納されている。ビュー側でこれを @Html.Raw(Model) すると、「パスに無効な文字が含まれています。」というエラーが表示される。 ```  Controller return View(content);
View @model string
@Html.Raw(Model)
 &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt; ### 解決 モデルを HtmlString型 に変更すると、エラーが表示されなくなった。 ``` ## Controller return View(new HtmlString(content)); ## View @model HtmlString @Model テキストがHTMLタグ（危険な文字列）を含んでいたので、ASP.net がエラーを吐いてくれたのかな？
 危険な可能性のある Request.Form 値がクライアントから検出されました - だるろぐ   </description>
    </item>
    
    <item>
      <title> ASP.net MVC 3 で Dropbox を利用する</title>
      <link>http://daruyanagi.net/entry/2012/02/25/084211/</link>
      <pubDate>Sat, 25 Feb 2012 08:42:11 +0000</pubDate>
      
      <guid>http://daruyanagi.net/entry/2012/02/25/084211/</guid>
      <description>自家製の Wiki システムを ASP.net MVC 3 で作ってて、「リビジョン管理機能がほしいですなぁ」と思った。そこで試行錯誤したのだけど、だんだん面倒になってきた。そしたら思いついた。_「Dropbox に記事を保存すれば勝手にリビジョン管理してくれるんだから、そっちにバックアップ取ればいいじゃん」__「そもそも Dropbox をデータベースとして使えばよくね？」_というわけで、とりあえず Dropbox を使うところから始めてみた。
### 準備 まず、アプリケーションの作成。別に認証機能は要らないや。今回は SharpBox (http://sharpbox.codeplex.com/) を使って楽をすることにした。NuGetでさくっとインストール。あと、https://www2.dropbox.com/developers/apps でアプリの登録をしておくのも忘れずに。APIキーをここで取得しておく必要がある。  ### コード #### コントローラー まず、Homeコントローラーを作る。なぜ Home という名前なのかというと、Global.asax を書き換えるのが面倒くさいからですね。わかります。スキャフォールディングも使って楽をしましょう。Index メソッドを書く。とりあえず動かしているだけなのでごちゃごちゃしているけど、接続→ルートの取得→（ファイルアップロード）→ファイルの列挙 という操作をしているだけ。あとでモデルへ追いだそう。 ```  public ActionResult Index() { var storage = new CloudStorage(); var config = CloudStorage.GetCloudConfigurationEasy(nSupportedCloudConfigurations.DropBox);
// load a valid security token from file ICloudStorageAccessToken accessToken; using (var fs = System.IO.File.Open( Server.MapPath(&amp;quot;~/App_Data/DropBoxToken&amp;quot;), System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.None)) { accessToken = storage.DeserializeSecurityToken(fs); } // open the connection var storageToken = storage.</description>
    </item>
    
  </channel>
</rss>