<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub on blog.daruyanagi.jp</title>
    <link>https://blog.daruyanagi.jp/tags/github/</link>
    <description>Recent content in GitHub on blog.daruyanagi.jp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 23 Sep 2018 13:48:15 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>9月22日：daruyanagi.jp を HTTPS にした</title>
      <link>https://blog.daruyanagi.jp/entry/2018/09/23/134815/</link>
      <pubDate>Sun, 23 Sep 2018 13:48:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/09/23/134815/</guid>
      <description>週は3連休。外に行く元気もないので、このお休みは溜まってるインドア仕事を片付ける。まずは、サイトのお手入れ。はてなのおかげで blog.daruyanagi.jp が HTTPS になったのに、メイン（？）の daruyanagi.jp は HTTP のままでカッコ悪いなぁ、と思っていたところだったし、本腰を入れてやる。現状、daruyanagi.jp は
ASP.NET Core Razor Pages：表はたいして何もないのだけど、ウラで謎の仕組みがいろいろ動いている無職の仕事を楽にするためのツール旧ブログ（かつて daruyanagi.jp ではてなブログを運営していた）からのリダイレクトMicrosoft Azure の共有プランで独自ドメインを割り当てて運用（月1,000円ぐらい）みたいな感じ。Microsoft Azure の共有プランは SSL をサポートしていないので、このままでは HTTPS 化できない。SSL 対応のベーシックプランにアップグレードすると、月7,000円ぐらいかかる。たいしたサイトじゃないのに月7,000円もかけてはいられないし、できればタダでできないかなーと思ってたのだけど、GitHub Pages＋Let&amp;#39;s encrypt ならば結構簡単にできそうだ。――というわけで、今の daruyanagi.jp は独自ドメインを外す（引き続き daruyanagi.azurewebsites.net でアクセスできるので、ツール類の移行は不要。リダイレクトは数年以上やってたわけで、いい加減いいだろう）GitHub Pages で HTTPS なペライチのサイトを立てて、これに daruyanagi.jp を割り当てるみたいな感じでやってみた。やり方はあちこちで解説されてるし、ぶっちゃけ公式のマニュアルみれば誰でもできると思うので割愛。ただ、HTTPS のオプションを有効化してから実際に反映されるまで少し時間がかかったのはちょっと不安で、そこだけあわあわしてしまった。ガチャガチャしてるうちに反映されて、無事使えるようになった。 GitHub Pages で https://t.co/uJG0Fdi9by を HTTPS にしてる。もう少し待たないといけないみたい pic.twitter.com/kCyLNdKm5M— だるやなぎ准将 (@daruyanagi) September 22, 2018
  ぉ、いけたわ？ pic.twitter.com/lnKuBSZjZE— だるやなぎ准将 (@daruyanagi) September 22, 2018</description>
    </item>
    
    <item>
      <title>2018年1月18日の日記：松山～札幌便復活！　なぜかラジカセを買う、Torello で Flow、GitHub に上納、動かねぇ……の5本立て</title>
      <link>https://blog.daruyanagi.jp/entry/2018/01/18/195531/</link>
      <pubDate>Thu, 18 Jan 2018 19:55:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2018/01/18/195531/</guid>
      <description>とんが食いもしない生パスタを大量に購入、冷凍庫にしまったまま出張に出かけて早幾星霜。たいして美味しくないパスタを少しでもおいしく食べる方法はないかと日々悩んでるのですが、この前、Twitter で「キムチ＋ケチャップ＋パスタ」という謎のレシピを見かけたので、適当に作ってみました。とくにレシピをメモったりはしてなかったので、ツイートを目にした時のふわっとしたイメージをベースに作ってみたのですが……まぁ、食えんことはないけど、普通にナポリタン作った方がよかったかもしれない。美味しくないことはないんだけど、味に統一感がないというか、雑多な感じで、B 級としてはなきにしもあらず、な感じでした。ちゃんとレシピ通りに作ったらもう少しカッチリした味になったのかもしれないけど。
### 松山～札幌便復活！&amp;gt;およそ６年半ぶりの運航再開。松山と札幌を結ぶ直行便がアイベックスエアラインズと全日空の共同運航で今年３月から就航することになった。就航が決まったのは松山空港と北海道・新千歳空港を結ぶ直行便で、アイベックスエアラインズが全日空と共同運航する。３月２５日就航開始 松山〜札幌直行便復活 | NNNニュース 2011年11月に運休して以来、およそ6年半ぶりの運航再開なのだそう。今年3月25日から1日1往復が設定されるのだそう。
松山発：11:35発、14:30着千歳発：14:20発、16:45着ちょっと使いにくいかなって思わないでもないですが、一本で行けるのは超便利。札幌で勉強会があるなら、今年は1度ぐらい顔を出してもいいなーって思います。搭乗率75％いかないと、また運休しちゃう＞＜ちなみに、機材は“ボンバルディア社製の７０人乗りジェット機”。ってことはプレミアクラスとかないんだよな。#### 追記&amp;gt;一方、現在、全日空が１日４往復を運航する、松山空港と中部空港を結ぶ路線は、ことし３月２５日から、アイベックスエアラインズとの共同運航を含めて１日３往復に減少することになりました。松山ー千歳線６年半ぶり就航へ｜NHK 愛媛のニュース ### Torello で Flow  変わらず睡眠が不規則なので、夜中3時に「Microsoft Flow」で仕事用のワークフローを作ったりしてました。知らなかったんだけど、「Microsoft Flow」って「Torello」が使えるんだね。コネクターを検索しても出てこない（バグ？）から気が付かなかった。今回やったのは
フィードで記事を取得全文を取得して、謎ロジックで記事をフィルター新しいフィードを生成（← ここまでを ASP.NET Core で作成）結果を Torello のカードとして登録して、チームメンバーと共有って感じのことです。Torello の API を調べて自分で実装すれば、すべて ASP.NET Core アプリで完結できるんですけど、正直調べるのが面倒。使えるところだけ「Microsoft Flow」（IFTTT でもいいけど）で使うっていう使い方もありじゃないかな？　って思います。### GitHub でプライベートリポジトリを作成 上納することにした pic.twitter.com/aBshzku5pd— 平成という一時代を独身で駆け抜けただるやなぎ (@daruyanagi) 2018年1月17日
 API キーを埋め込んだ Web アプリを GitHub で管理すると、どうやってキーの露出を抑えればいいんだろうって悩んじゃいますよね。僕もさんざん悩んだんですが……おカネの力で解決することにしました。なぜかクレカが通らなかったのだけど、PayPal 経由だと問題なく有償プランにアップデートできました。同じカードなのに、なぜなんだぜ？これでプライベートレポジトリが作れるようになったので、さっそく daruyanagi.</description>
    </item>
    
    <item>
      <title>Tonjiru v1.1.0 ＋ GitHub Flow × GitHub for Windows</title>
      <link>https://blog.daruyanagi.jp/entry/2017/06/07/191844/</link>
      <pubDate>Wed, 07 Jun 2017 19:18:44 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/06/07/191844/</guid>
      <description>br/&amp;gt;
アイコンを付けたSendMessage と PostMessage を選択できるように不具合の修正SendMessage だと相手がメッセージの処理を完了するまで制御が返ってこないので、PostMessage を使う方がいいかなって思った。 ### 関係のない話：GitHub Flow × GitHub for Windows&amp;gt;GitHub Flowとは何だろうか？ masterブランチのものは何であれデプロイ可能である 新しい何かに取り組む際は、説明的な名前のブランチをmasterから作成する（例: new-oauth2-scopes） 作成したブランチにローカルでコミットし、サーバー上の同じ名前のブランチにも定期的に作業内容をpushする フィードバックや助言が欲しい時、ブランチをマージしてもよいと思ったときは、 プルリクエスト を作成する 他の誰かがレビューをして機能にOKを出してくれたら、あなたはコードをmasterへマージすることができる マージをしてmasterへpushしたら、直ちにデプロイをする これがフローのすべてだ。
 GitHub Flow (Japanese translation) · GitHub 去年ぐらいからこれを実践している（つもり）なのだけど、如何せん、一人でやっているのであまり自信がない。ので、自分のやり方をさらしておく。
#### 1. 何か改善を思いついたら issue にメモする  の作業が一番面倒くさい……なにかいいアプリ（できればモバイル）があればいいんだけどな。
#### 2. GitHub for Windows を起動して Sync  マンドだと間違えるマンなので、GUI クライアントを使う。GitHub for Windows（現行安定版）を起動したらこまめに Sync しておく。</description>
    </item>
    
    <item>
      <title>Aoba 1.2.0：連射モードの追加と通知の改善 / GitHub で Pull Request を Merge できなくなった</title>
      <link>https://blog.daruyanagi.jp/entry/2016/08/29/045312/</link>
      <pubDate>Mon, 29 Aug 2016 04:53:12 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/08/29/045312/</guid>
      <description>  射モードを追加。指定したインターバルでタイマーが動き、取得済みのゲームエリアをパシャパシャするヤツ。タイマーが動いていることを示すインジケーターがいいの思いつかなかったので、とりあえずアイコンをオレンジにしておいた。この辺りは永遠に適当。
  ューに Brush をバインドしたつもりが動かずに悩んだけど、System.Windows.Media ではなく System.Drawing になっていた orz
  知もいい感じにしておいた。通知は切ることもできるけど、ゲームエリアの取得に失敗したときだけはでるようにしている。
#### Git の使い方わからんGitHub の Visual Studio 拡張機能を使っていたのだけど、操作をミスって Pull Request を Merge できなくなった。GitHub で「コマンドラインでコンフリクトをなんとかしろやボケ」と言われてしまう（スクショとり忘れた）。とりあえず閉じておいた。ローカルの master とリモートの master に齟齬ができたみたいだなぁ。  したいのだけど、やり方がさっぱりわからなかったのだが、「GitHub for Windows」を起動してごちゃごちゃしていると……
  んかコンフリクトのあるファイルが表示されたので、当該部分を消してコミットして Sync しておいた（Sync がなにやってんのかはイマイチよくわからんが）。なんかよくわからんけど助かった……。Visual Studio 拡張機能にもいいところがあるんだろうけど、_ブランチ切って*1、コードをしこしこ書いて、終わったらプルリクエスト作って、GitHub で Merge して、Release を作成する（、ブランチを削除する）_っていうのがシームレスにできる「GitHub for Windows」の方が自分はいいかも。手を動かしてるうちに、いろいろ分かってくるかもだし（ただし、Sync はイマイチよくわからん）。
*1:今回はここで間違ったみたい。remote と local が同期されていないのに remote からブランチをきって local にコミットしたのか？</description>
    </item>
    
    <item>
      <title>GitHub for Windows の新機能：クリップボードの内容をもとに Gist を作成する</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/27/091411/</link>
      <pubDate>Wed, 27 Mar 2013 09:14:11 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/27/091411/</guid>
      <description>1.0.39 Minor ReleaseAdded: Ability to undo operations such as discarding changes, reverts, commits, etc Added: Keyboard shortcut Ctrl-Shift-Alt-C creates a gist with the contents of the clipboard Added: Spell check for commit fields Added: Access key (ALT + L) for logging in and logging out Fixed: Credential helper fails to authenticate passwords containing certain unicode characters Fixed: Could not clone repositories with a name that starts with a hyphen Fixed: New ssh-agent.</description>
    </item>
    
  </channel>
</rss>