<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebMatrix on だるろぐ - だるやなぎのブログ</title>
    <link>https://blog.daruyanagi.jp/tags/webmatrix/</link>
    <description>Recent content in WebMatrix on だるろぐ - だるやなぎのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 26 Mar 2017 23:43:47 +0000</lastBuildDate>
    
	<atom:link href="https://blog.daruyanagi.jp/tags/webmatrix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>はてなブログのドメインを daruyanagi.jp から blog.daruyanagi.jp へ引越しした</title>
      <link>https://blog.daruyanagi.jp/entry/2017/03/26/234347/</link>
      <pubDate>Sun, 26 Mar 2017 23:43:47 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/03/26/234347/</guid>
      <description>まり気付かれてない気がしますが（こっそりやったので！）、はてなブログのドメインをお引越ししました。はてなブログを独自ドメインにする話はよく見かけますが、独自ドメインで運用していたはてなブログを別のドメインへ移動させた例はあまりないかもしれないので、メモがてら残しておきます。とはいえ、心配したようなトラブルもとくに起こりませんでした。1時間ちょっと はてなブログ がダウンしたのと、AdSense がちょっと減ったような気がする程度です。
### 以前の状態と解決すべき課題以前はdaruyanagi**.net**：メインのブログ（WordPress）daruyanagi**.jp**：はてなブログという運用をしていたのですが（こういうちょっと謎な構造になっていたのは、もっぱら歴史的な事情によります）、WordPress よりも はてなブログの方が管理が楽だったこともあり、いつしか daruyanagi.jp がメインに。持て余していた daruyanagi.net をポートフォリオサイト（というか自己紹介サイト）っぽい感じにして使っていたのですが、とある日、ドメインの延長手続きを失念してしまい、daruyanagi.net を失ってしまいました。  在は水素水を布教するサイトになっています。そんなわけで、
daruyanagi.jp：はてなブログ**about.**daruyanagi.jp：自己紹介サイトというよくわからない構造になってしまい、ちょっと困っていました。できればこれを**blog.**daruyanagi.jp：はてなブログdaruyanagi.jp：自己紹介サイトという感じに整理したかった。あと、トップドメインで はてなブログ を運用するのはあまりよくないので直したかった、というのもあります。&amp;gt;※はてなブログでは、サブドメインを使用しないexample.comでブログを運用すると、ドメイン名の仕組み上、トラブルの原因になることがあります。取得したドメインの前に、必ずサブドメイン（wwwやblogなど）を付加してください。はてなブログを独自ドメインで利用する - はてなブログ ヘルプ Twitter で煽られるのも悲しいですしね！
RFC 違反ドメイン
&amp;mdash; しばやん (@shibayan) March 25, 2017  br/&amp;gt;
### WebMatrix × ASP.NET Web Pages で自己紹介サイトを構築し、Azure へ配置するというわけで、サイトのお引越し処理です。やらなければいけないのは以下の2つになります。はてなブログを daruyanagi.jp から blog.daruyanagi.jp へ移動独自ドメインの割り当てを解除し、daruyanagi.hatenablog.com に戻すDNS設定を行うはてなブログに新しい独自ドメインを割り当てる自己紹介サイトを daruyanagi.</description>
    </item>
    
    <item>
      <title>WebMatrix とおさらばして、Visual Studio 2015 で ASP.NET Web Pages をはじめる</title>
      <link>https://blog.daruyanagi.jp/entry/2017/02/12/100000/</link>
      <pubDate>Sun, 12 Feb 2017 10:00:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2017/02/12/100000/</guid>
      <description>年愛用してきた「WebMatrix」ですが、昨年10月に2017年11月1日 でのサポート終了がアナウンスされました。
&amp;gt;Hi everyoneAfter a long and successful run, Microsoft has decided to end formal support of WebMatrix. Formal support will end on November 1st, 2017. Community support will continue on the WebMatrix forums Please take a look at Visual Studio Code, our new, free, open source, multi-platform editor! VS Code support git integration, extensions and a whole bunch of other great features!Thanks!The WebMatrix teamWebMatrix formal support ends November 1st, 2017 : The Official Microsoft IIS Forums   でにテンプレートをダウンロードする際に 404 が発生することが多くなったほか、拡張機能のダウンロード提供が終了しており、第一線で使うにはつらい状況になっています。そろそろ乗り換えを検討すべきでしょう。Microsoft は後継ソフトとして「Visual Studio Code」を推奨していますが、これは統合ターミナルでバリバリとコマンドを打つ感じなので、GUI に甘やかされた僕にはしんどい感じ（最近「Express」を少し触っているのですが、そっちの文化にあわせるなら割と使いやすいですけどねー）。いずれ慣れないといけないなーとは思うんですが、APS.</description>
    </item>
    
    <item>
      <title>WebMatrix：フィードを読み込むときに System.Xml.XmlException が発生する</title>
      <link>https://blog.daruyanagi.jp/entry/2016/06/03/190631/</link>
      <pubDate>Fri, 03 Jun 2016 19:06:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2016/06/03/190631/</guid>
      <description>ASP.NET Web Pages 製の BOT が、ある日を境に突然、System.Xml.XmlException エラーを吐くようになった。
&amp;gt;The element with name &amp;amp;#39;RDF&amp;amp;#39; and namespace &amp;amp;#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;amp;#39; is not an allowed feed format.  某サイトのリニューアルで、RSS 2.0 が RSS 1.0 になったせいでフィードが読めなくなったらしい／(^o^)＼
&amp;gt;Classes That Model Syndication Feeds and Items SyndicationFeed - represents a syndication feed. Has properties like Title, Description, Links, and Items. The Items property represents the collection of content items expressed in the feed. SyndicationItem - represents a specific syndication feed item and includes properties like Title, Summary, PublishDate, Authors, and so on.</description>
    </item>
    
    <item>
      <title>WebMatrix：改修工廠の早見表がほしかったので作ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2015/09/19/203816/</link>
      <pubDate>Sat, 19 Sep 2015 20:38:16 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/09/19/203816/</guid>
      <description>  週は超忙しい＆体調がよろしくなかった“ので”、合間を見つけて前々からほしかった改修工廠の早見表を作ってみた。接続詞が間違っているというツッコミが入りそうだけど、こういうのって、そういうときにこそやりたくならない？
### 最初に作ったヤツ  SP.NET Web Pages ＋ SQL Server Compact で作ってみたけど、だいぶ遅かった。遅いのは多分、自分が SQL わかってないせいだと思う（SELECT でごっそりとってきたデータを LINQ で加工するとかいうわけのわからないことをやっていた）。SQL が分かんないのは一朝一夕に改善できないので、とりあえずデータベースへの問い合わせ結果をキャッシュしまくってみたけれど、スタートアップの遅さは改善できない。Web サイトがスタンバイ（スリープ？　なに？）したら、キャッシュを一から再構築しなきゃいけないのも困った。――というわけで、廃棄する予定。
http://akashi.azurewebsites.net/### 二番目に作ったヤツ  、ちょっと考えてみたんだけど、こういうデータっていうのは稀にあるサーバーのメンテナンスのときにしか更新されないわけだ。だったら、なにもデータベースに入れる必要はなかった（CURD のうち R しかやらへんやん？）。JSON か何かでデータを用意しておいて、サーバーのスタートアップ時に読み込めばいい。俺ってアホだなーと思いながら、ぐちゃぐちゃっと今日半日で作ったら（ロジック組むより、データ打ち込む方がよっぽど時間かかった）、最初に作ったヤツよりだいぶ早くて満足。コードを整理しながらロジック見直せばもうちょっと早くなりそう。なんせ今のは cshtml に foreach が腐るほど埋まってるという正真正銘のクソコードだし……ちょうどいいから今度 GitHub にあげて、GitHub Flow ってのを勉強するネタにしようと思う。
http://akashiarsenal.azurewebsites.net/ほんとうはこれを Windows Phone に移植しておでコンに出したかったけれど、いつの間にか締め切り過ぎてたみたい。残念。艦これ Android 版が出るらしいし、Android アプリにするのもアリかなぁ？　</description>
    </item>
    
    <item>
      <title>WebMatrix： URL にドットを含めたい</title>
      <link>https://blog.daruyanagi.jp/entry/2015/09/13/032922/</link>
      <pubDate>Sun, 13 Sep 2015 03:29:22 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/09/13/032922/</guid>
      <description>  iki エンジンなんかを作るときなど、「ドット（.）」を URL に含めたい場合は、Web.config に一行、以下のように加えるといいみたい。
&amp;lt;!--?--&amp;gt;xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;.webServer&amp;gt;runAllManagedModulesForAllRequests=&amp;#34;true&amp;#34; /&amp;gt;.webServer&amp;gt;```静的リソースまでアプリケーションで処理するようになる（？）ので、効率が悪そうだけど。もっとちゃんと対策したければ、以下の URL が参考になりそう。&amp;lt;iframe src=&amp;#34;//hatenablog-parts.com/embed?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F11728846%2Fdots-in-url-causes-404-with-asp-net-mvc-and-iis&amp;#34; title=&amp;#34;Dots in URL causes 404 with ASP.NET mvc and IIS&amp;#34; class=&amp;#34;embed-card embed-webcard&amp;#34; scrolling=&amp;#34;no&amp;#34; frameborder=&amp;#34;0&amp;#34; style=&amp;#34;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;</description>
    </item>
    
    <item>
      <title>お前ら喜べ！　Windows 10 でも WebMatrix が使えるぞ！！</title>
      <link>https://blog.daruyanagi.jp/entry/2015/07/07/210638/</link>
      <pubDate>Tue, 07 Jul 2015 21:06:38 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/07/07/210638/</guid>
      <description>  shibayan からもたらされた極秘情報によると、6月30日に WebMatrix 3.1 がリリースされていたらしい。
 @daruyanagi インスコ済みの WebMatrix のバージョン教えて— しばやん (@shibayan) 2015年7月5日
  @daruyanagi 6/30 にアップデートされてたくさい— しばやん (@shibayan) 2015年7月5日
 変更点が相変わらずよくわからなかったので、その日はそのまま寝て、このこともすっかり忘れていたのだけど、ふと思い立って Windows 10 にインストールしてみたところ……
          ｷﾀ━(ﾟ∀ﾟ)━(∀ﾟ )━(ﾟ　)━(　)━(　)━(　ﾟ)━( ﾟ∀)━(ﾟ∀ﾟ)━!!_ちょっと端っこが欠けてるような気がするけど、きっと気にしたら負けだ！！　ちゃんと息をしてくれているだけで、おじさんは満足です。これでいちいちわざわざゴニャゴニャしなくても、Windows 10 でちゃんと WebMatrix がインストールできる！みんな大好き Visual Basic 6 ともども、Windows 10 でも WebMatrix をよろしくお願いいたします（＾ｖ＾）ﾉ
### おまけ  しお手すきでしたらこれも直していただければ幸いです(`・ω・́)ゝ
</description>
    </item>
    
    <item>
      <title>WebMatrix：フィードを読み込んでデータベースへつっこむときに System.Data.SqlServerCe.SqlCeException が発生する。</title>
      <link>https://blog.daruyanagi.jp/entry/2015/06/25/050342/</link>
      <pubDate>Thu, 25 Jun 2015 05:03:42 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/06/25/050342/</guid>
      <description>だいぶ悩んで、Visual Studio まで立ち上げていろいろデバッグしていたのだけど、原因は簡単だった。
&amp;gt;### datetime300 分の 1 秒、つまり 3.33 ミリ秒の精度で、**1753 年 1 月 1 日から 9999 年 12 月 31 日まで**の日付と時刻のデータを格納するデータ型です。値は .000、.003、または .007 ミリ秒の単位になるように丸められます。2 つの 4 バイト整数として格納されます。最初の 4 バイトは、base date である 1900 年 1 月 1 日からの日数、またはこの日までの日数を格納します。基準日とは、システムが参照する日付です。datetime 型の値には、1753 年 1 月 1 日より前の日付を使用できません。もう一方の 4 バイトは、午前 0 時から数えた時間をミリ秒単位で格納します。秒の有効範囲は 0 から 59 までです。データ型   方、C# の default(DateTime) は 0001/01/01 0:00:00。つまり、SyndicationFeed オブジェクトの LastUpdateTime プロパティあたりにちゃんと値がセットされてなくて（そういうフィードを配信しているサイトは割とある）、default(DateTime) を返してくるとき、それをそのまま SQL CE データベースに格納しようとするとエラーになる。</description>
    </item>
    
    <item>
      <title>先生助けてっ！ WebMatrix ちゃんが息をしてないのっっ！！</title>
      <link>https://blog.daruyanagi.jp/entry/2015/04/28/023803/</link>
      <pubDate>Tue, 28 Apr 2015 02:38:03 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/04/28/023803/</guid>
      <description>br/&amp;gt;
&amp;gt;WebMatrix 3 does not support IIS Express 10. You will not be able to run WebMatrix 3 on the same machine with any version of Visual Studio 2015 that includes IIS Express 10 とうとうこの日が来たかーって感じですね！　一応、_IIS Express 10 に対応した WebMatrix（WebMatrix 4）がリリースされる_という可能性もなきにしもあらずですが、あんまり期待はもてなさそう。また、Visual Studio 2015 を使わないという手もありますが……WebMatrix と Visual Studio だったら Visual Studio 選びますわな。まぁ、でも、WebMatrix のおかげでいろいろ楽しかったです。Visual Studio がジェット戦闘機ならば、WebMatrix はレシプロ複葉機みたいなもんですが、自分みたいな趣味として片手間で触るような人間にはぴったりでした。入門向けとしてはなかなかいいツールではないかと思うのですが、あんまり普及しなくて残念です。
WebMatrix カテゴリーの記事一覧 - だるろぐというわけで、完全に死んだ頃を見計らってお葬式イベントでもやりたいと思います。#### 追伸&amp;gt;これで WebMatrix とかを完全に捨てられますね！Monaco上のファイルを一括ダウンロードする - xin9le.</description>
    </item>
    
    <item>
      <title>WebMatrix： 伊予鉄も止まったので、早速、遅延情報をゲットしてみる。</title>
      <link>https://blog.daruyanagi.jp/entry/2015/01/26/104215/</link>
      <pubDate>Mon, 26 Jan 2015 10:42:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/01/26/104215/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2015/01/25/143744&amp;quot;&amp;gt;WebMatrix： JR四国が止まったので、運行情報の取得プログラム作るのが捗った。 - だるろぐ で喜んでたら、今朝は伊予鉄にも遅れが出た。これで、伊予鉄の運行情報もとれるぞ！
電車・バス情報 | 伊予鉄伊予鉄の運行情報ページの構造は、```html&amp;lt;p class=&#34;about&#34;電車・バス　現在通常通り運行しております。&amp;lt;/p&amp;lt;p class=&#34;date&#34;2015/01/26(月) 10:26&amp;lt;/p&amp;lt;table class=default&amp;gt; : : &amp;lt;/table&amp;gt;
```cspublic static List&amp;amp;lt;DelayInfo&amp;gt; GetIyotestu(){const string name = &amp;quot;伊予鉄&amp;quot;;const string url = &amp;quot;http://www.iyotetsu.co.jp/kinkyu/&amp;quot;;return GetDelayInfo(name, url, Encoding.UTF8, _ =&amp;gt; {var doc = new HtmlAgilityPack.HtmlDocument();doc.LoadHtml(_);try{// 遅延情報のテーブルを取得。発見できなければ例外 → 正常運行var rows = doc.DocumentNode// table.default のなかにある tr タグを取得.</description>
    </item>
    
    <item>
      <title>WebMatrix： JR四国が止まったので、運行情報の取得プログラム作るのが捗った。</title>
      <link>https://blog.daruyanagi.jp/entry/2015/01/25/143744/</link>
      <pubDate>Sun, 25 Jan 2015 14:37:44 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/01/25/143744/</guid>
      <description>かに待ってました。人身事故ってのがちょっと胸痛むけれど。すみません。でも、これで運行に遅延が発生した時にどんなコードが吐かれるのかわかったやで。
ＪＲ四国列車運行情報遅れがないとき。```html&amp;lt;div ID=&#34;delay_info&#34;&amp;lt;div class=&#34;no_delay&#34;◇現在、遅れ等の情報はありません。&amp;lt;/div&amp;lt;/div```html&amp;amp;lt;div ID=&amp;quot;delay_info&amp;quot;&amp;gt;&amp;amp;lt;p&amp;gt;◇現在、以下のエリアで影響が出ています（*:**更新）。&amp;amp;lt;/p&amp;gt;&amp;amp;lt;h4&amp;gt;徳島線&amp;amp;lt;/h4&amp;gt;&amp;amp;lt;h5&amp;gt;徳島線（牛島駅構内）　運転再開&amp;amp;lt;/h5&amp;gt;&amp;amp;lt;p&amp;gt;徳島線では……&amp;amp;lt;br&amp;gt;※高徳線の列車は……&amp;amp;lt;/p&amp;gt;&amp;amp;lt;/div&amp;gt;```同じ路線で複数の遅延情報があるケースも考えられるだろうので、タグはこんな感じになるんだろう（と思う）。p
h4 h5 p
h5p: h4 h5 p
h5p: ```cspublic class DelayInfo{public string Line { get; set; }public string Status { get; set; }public string Message { get; set; }}public static List&amp;amp;lt;DelayInfo&amp;gt; GetJRShikoku(){const string key = &amp;quot;jrshikoku&amp;quot;;const string url = &amp;quot;http://www.</description>
    </item>
    
    <item>
      <title>あちこちスクレイピングして、松山の鉄道・船・飛行機の運行状況をまとめるサイトを作ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2015/01/20/033210/</link>
      <pubDate>Tue, 20 Jan 2015 03:32:10 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/01/20/033210/</guid>
      <description>br/&amp;gt;
http://ehime-traffic.azurewebsites.net/WebMatrix + Azure Web サイト（マイクロソフトのクラウド環境や開発ツールを無償提供 | Microsoft BizSpark、ありがとう！）で愛媛・松山の鉄道・船・飛行機の運行状況を集約したサイトを作ってみました（飛行機の英語の綴りミスなんかがボロボロ見つかる程度の成熟度です）。誰の役に立つというものでもないですが、自分的には満足です。そのうちわざわざサイトに行くのも面倒になると思うので、ゆくゆくは Twitter の BOT か何か作って、情報をプッシュできるようにしたいですね。このサイトの情報は、大きく分けて二つの方法で取得しています。サイトをスクレイピングして情報取得（鉄道、船、JAL）（非公開）API を叩いて JSON から情報取得（ANA、ピーチ）（ジェットスターだけはうまくいかなかった！　今度誰か教えて！*1）スクレイピングで面倒だったのは、情報の形式が一定していないこと、文字コードがバラバラなこと（ローカルでテストしているときは文字化けしないのに、クラウドで動かすと文字化けすることもあった）でしょうか。とくに情報の形式が一定していないのはしんどいですね。イレギュラーなケースを見つけるたびにデータ標準化のための処理が膨れ上がっていくので、最後は妥協、妥協、妥協。ペライチのページにコードをべた書きして、それをまとめていくという開発手法は WebMatrix が得意とする分野だと思うけれど、最後のほうはちょっと力不足かなって感じもしました。まぁ、そんなときはサクッと Visual Studio に切り替えちゃうんですけど。### 開発の流れ  行情報のページをブラウザーでみる。ブラウザーの開発者ツールで DOM をみたり、リクエスト・レスポンスをみたりしながら、静的ページであればスクレイピング、ページを動的に組み立てているなら API を探してそれを叩いてみるという感じ。スクレイピングであれば、NuGet Gallery | HtmlAgilityPack 1.4.9 が超簡単。XPath でノードを指定してサクッと中身を取ってこれる。
using (var client = new WebClient()){var response = client.DownloadString(url);var json = Json.Decode(response);var doc = new HtmlAgilityPack.HtmlDocument();doc.LoadHtml(doc)// &amp;lt;div class=&amp;#34;ss_comment&amp;#34;&amp;gt;ここがほしいやで&amp;lt;/div&amp;gt; var message = doc.</description>
    </item>
    
    <item>
      <title>WebMatrix：愛媛のニュースだけ読みたいので、Google ニュースから引っ張ってくる</title>
      <link>https://blog.daruyanagi.jp/entry/2015/01/18/081720/</link>
      <pubDate>Sun, 18 Jan 2015 08:17:20 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2015/01/18/081720/</guid>
      <description>元のニュースだけ読みたいので、それを Google ニュース引っ張ってくる BOT でも作ろうかと思って少し調べてみた。
# ~/App_Code/GoogleNews.cshtml@using System.ServiceModel.Syndication@using System.Xml@helper Get(string query){var url = string.Format(&amp;#34;http://news.google.com/news?q={0}&amp;amp;amp;output=rss&amp;#34;,query);using (var reader = XmlReader.Create(url)){var feed = SyndicationFeed.Load(reader);// @ObjectInfo.Print(feed);var data = feed.Items.Select(_ =&amp;gt; new {Title = _.Title.Text,Summary = _.Summary.Text,PublishDate = _.PublishDate,Url = _.Links.First().Uri.ToString().Split(&amp;amp;#39;=&amp;amp;#39;).Last(),});// @ObjectInfo.Print(data);foreach (var d in data){// &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;@d.Url&amp;#34;&amp;gt;@d.Title&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; &amp;amp;lt;p&amp;gt;@Html.</description>
    </item>
    
    <item>
      <title>WebMatrix：　@nakaji のコードをパクって「えひめFreeWi-Fi」スポットを Google Map へマッピング</title>
      <link>https://blog.daruyanagi.jp/entry/2014/12/16/181852/</link>
      <pubDate>Tue, 16 Dec 2014 18:18:52 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/12/16/181852/</guid>
      <description>a href=&amp;quot;http://nakaji.hatenablog.com/entry/2014/12/16/090000&amp;quot;&amp;gt;SGMLReaderで「えひめFreeWi-Fi」サービス提供箇所をスクレイピング - なか日記 を読んで存在を知った。
&amp;gt;産学官で構成する愛媛県公衆無線LAN推進協議会では、外国人観光客や県内外の旅行者、地域住民等が無料で利用できるWi-Fiスポットの整備を民設民営で進めることにより、その利便性を確保し、愛媛県内の地域活性化を図る「えひめFreeWi-Fiプロジェクト」を推進しています。愛媛県庁／えひめFree Wi-Fiサービス提供箇所等のお知らせ “利便性を確保し”とか“地域活性化を図る”とかいってる割りには、クソ不便なテーブルデータしか用意してないのって、ほんとお役所だなーと思いますね。というわけで、なかじが作ってくれたコードをまるパクリして、それを Google Map へマッピングしてみた。これで、ちょっとは利便性が向上するんじゃないだろうか。マッピングのライブラリは、
サンプル１ - 「googleマップで複数住所を一括表示」の作り方 - 緑里庵をもらってきた。ちょっとコードが古いので、TypeScript で書き直したりしてみたい。Web ページのコードはこんな感じ（spotList あたりのコードとか汚いけど）。WebMatrix（ASP.NET Web Pages）はこういう“ペライチ”のページを作るときに便利よね。```cs# ~/Default.cshtml@using System.Xml.Linq @using Sgml
@{ var urlString = &amp;ldquo;http://www.pref.ehime.jp/h12600/wifi/osirase260822.html&amp;quot;;
XDocument xml;using (var sgml = new SgmlReader() { Href = urlString, IgnoreDtd = true }){xml = XDocument.Load(sgml);}var ns = xml.Root.Name.Namespace;var spots = xml.Descendants(ns + &amp;quot;table&amp;quot;).</description>
    </item>
    
    <item>
      <title>WebMatrix： Google Analytics API を使って前日の PV を取得するコードを C# で書いてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2014/12/02/021759/</link>
      <pubDate>Tue, 02 Dec 2014 02:17:59 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/12/02/021759/</guid>
      <description>a href=&amp;quot;http://blog.shibayan.jp/entry/20140803/1407059293&amp;quot;&amp;gt;Google Analytics API を使って前日の PV を取得するコードを C# で書いてみた - しばやん雑記 を WebMatrix でやってみた。とりあえず、前日の PV を表示するとことまで。
### つまづいたところその一  br/&amp;gt;
&amp;gt;&amp;amp;#39;/&amp;amp;#39; アプリケーションでサーバー エラーが発生しました。Error:&amp;quot;invalid_grant&amp;quot;, Description:&amp;quot;&amp;quot;, Uri:&amp;quot;&amp;quot;  パラメーターが間違っていたりすると、認証エラーが出る。自分の場合は、PC の時刻が狂っていた。ちゃんと合わせておきましょう。
### つまづいたところその二  br/&amp;gt;
&amp;gt;502 - Web server received an invalid response while acting as a gateway or proxy server.There is a problem with the page you are looking for, and it cannot be displayed. When the Web server (while acting as a gateway or proxy) contacted the upstream content server, it received an invalid response from the content server.</description>
    </item>
    
    <item>
      <title>WebMatrix： 型または名前空間 &amp;#39;Linq&amp;#39; は名前空間 &amp;#39;System&amp;#39; に存在しません。アセンブリ参照が不足しています。</title>
      <link>https://blog.daruyanagi.jp/entry/2014/11/14/194808/</link>
      <pubDate>Fri, 14 Nov 2014 19:48:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/11/14/194808/</guid>
      <description>  br/&amp;gt;
#### 問題WebMatrix で作った ASP.NET Web Pages のプロジェクトを Visual Studio で開くと、&amp;gt;型または名前空間 &amp;amp;#39;Linq&amp;amp;#39; は名前空間 &amp;amp;#39;System&amp;amp;#39; に存在しません。アセンブリ参照が不足しています。 というエラーが出てコンパイルできない。
#### 解決策Web.config で明示的にターゲットフレームワークを指定する。WebMatrix はこれがなくても動くのだけど、Visual Studio の方はちゃんと書いておかないと動かない。```xmlxml version=&#34;1.0&#34;?.webtargetFramework=&#34;4.0&#34; debug=&#34;true&#34;/.web&amp;lt;/div&amp;gt;</description>
    </item>
    
    <item>
      <title>はてなブログが oEmbed に対応したらしいので WebMatrix で使ってみる</title>
      <link>https://blog.daruyanagi.jp/entry/2014/09/08/003344/</link>
      <pubDate>Mon, 08 Sep 2014 00:33:44 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/09/08/003344/</guid>
      <description>br/&amp;gt;
はてなブログoEmbed APIを公開しました。ブログカードの情報をAPIで取得できます（開発者向け） - はてなブログ開発ブログせっかくなので、WebMatrix のヘルパーにしてトップページでも使ってみた。```cs# ~/App_Code/OEmbed.cshtml@helper Hatena (string url) { try { using (var downloader = new WebClient()) { var request = string.Format( &amp;ldquo;http://hatenablog.com/oembed?url={0}&amp;amp;amp;format={1}&amp;quot;, url, &amp;ldquo;json&amp;rdquo; );
 var oembed_data = downloader.DownloadString(request);var oembed_json = Json.Decode(oembed_data);@Html.Raw(oembed_json.html);// @ObjectInfo.Print(oembed_json)}}catch (Exception e){&amp;amp;lt;p class=&amp;amp;#39;error&amp;amp;#39;&amp;gt;@url: @e.Message&amp;amp;lt;/p&amp;gt;} }
```cs@OEmbed.Hatena(&amp;quot;https://blog.daruyanagi.jp/entry/2014/07/03/035624&amp;quot;)  てなブログのところだけデザインがカッコよくて違和感があるけれど、まぁ、とりあえずこれで。
  ObjectInfo.Print() を有効化してみると JSON でもらえる値がわかるので、これを利用して周りにフィットするようにダサくカードをデザインし直してもいいな（何</description>
    </item>
    
    <item>
      <title>WebMatrix 3：oEmbed ヘルパーを作ってみた（２）</title>
      <link>https://blog.daruyanagi.jp/entry/2014/08/12/194954/</link>
      <pubDate>Tue, 12 Aug 2014 19:49:54 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/08/12/194954/</guid>
      <description>WebMatrix 3：oEmbed ヘルパーを作ってみた - だるろぐ の続き。今回は Flickr の埋め込みをやってみようかと思う。
### ~/App_Code/OEmbed.cshtml```cs@helper Flickr(string url) {const string API_ENDPOINT = &#34;http://www.flickr.com/services/oembed/&#34;;using (var downloader = new WebClient()){try{// URL を組み立てて JSON の oEmbed データを取得var request = string.Format(&amp;quot;{0}?url={1}&amp;amp;amp;format={2}&amp;quot;, API_ENDPOINT, url, &amp;quot;json&amp;quot;);var oembed_data = downloader.DownloadString(request);var oembed_json = Json.Decode(oembed_data);@ObjectInfo.Print(oembed_json) // デバッグのためvar embed_type = oembed_json.type as string;switch (embed_type) // photo と video の二種類がある{case &amp;quot;photo&amp;quot;: &amp;lt;figure&amp;gt; &amp;lt;img src=&#39;@oembed_json.</description>
    </item>
    
    <item>
      <title>WebMatrix 3：oEmbed ヘルパーを作ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2014/08/08/185357/</link>
      <pubDate>Fri, 08 Aug 2014 18:53:57 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/08/08/185357/</guid>
      <description>oEmbed is a format for allowing an embedded representation of a URL on third party sites. The simple API allows a website to display embedded content (such as photos or videos) when a user posts a link to that resource, without having to parse the resource directly.oEmbed 要はこういうのです。
# はてな記法の場合https://twitter.com/daruyanagi/status/497645195769298944:embed 乱暴するんでしょう？　エロ同人誌みたいに！— だるやなぎ に天使が舞い降りた！ (@daruyanagi) 2014年8月8日
 URL → 埋め込み HTML を得るための API って感じですかね。oEmbed API の提供方法は二種類あります。</description>
    </item>
    
    <item>
      <title>WebMatrix 3：サイトをライブタイルに対応させてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/26/035349/</link>
      <pubDate>Sat, 26 Jul 2014 03:53:49 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/26/035349/</guid>
      <description>indows 8.1 で（Windows 8 は切り捨てた）http://daruyanagi.net/ をスタート画面へピン留めすると、こんな感じになるハズ。前々からやってみたかったのだけど、なかなか腰が上がらなかった。
### 用意するもの  br/&amp;gt;
browserconfig.xmlこの名前でなくてもいいが、その場合はメタタグに名前を記述通知タイルを定義した XML ファイルbrowserconfig.xml の notifications 属性に記述。必須ではないが、用意しておくとタイルがくるくる切り替わるようになる今回はデータベースをもとに Notifications.cshtml で動的に生成最大5つまで&amp;lt;meta name=&#34;application-name&#34; content=&#34;アプリ名&#34;/レイアウトファイルに一行挿入browserconfig.xml の内容をメタタグとして埋め込むスタイルもあるが、今回は分離しておく。はてなブログをタイルに対応させる場合は、ヘッダーへメタタグを記述する方式がよさそうtiny、square、wide、large の各サイズ向けタイル画像今回は青色に塗りつぶしただけのシンプルなものを用意タイルの背景に使う tile.jpg も準備しておいた（「画像は .JPG、.GIF、.PNG 形式のファイルであり、容量を 200 KB 未満、サイズを 1024 x 1024 ピクセル未満にする必要があります。」とのこと）タイルのサイズ	標準のタイルのサイズ	最小画像サイズ	推奨される画像のサイズ小サイズ	70 x 70	56 x 56	128 x 128普通サイズ	150 x 150	120 x 120	270 x 270ワイド サイズ	310 x 150	248 x 120	558 x 270大サイズ	310 x 310	248 x 248	558 x 558### browserconfig.</description>
    </item>
    
    <item>
      <title>WebMatrix：IHttpModule で定期実行を実装する</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/20/223507/</link>
      <pubDate>Sun, 20 Jul 2014 22:35:07 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/20/223507/</guid>
      <description>WebMatrix 3: Twitter Bot （＋リアルタイムログ表示付き）でも作ってみる。 - だるろぐ で System.Timers.Timer を使って ASP.NET の定期処理を実装したのだけど、のいえ先生の neue cc - ASP.NETでの定期的なモニタリング手法 でもう一度実装しなおしてみた。
  br/&amp;gt;
### Web.config```xmlxml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;? .web&amp;gt; debug=&amp;quot;true&amp;rdquo; targetFramework=&amp;quot;4.0&amp;rdquo; /&amp;gt; .web&amp;gt;
.webServer&amp;gt;  name=&amp;quot;SchedulerModule&amp;rdquo; type=&amp;quot;SchedulerModule&amp;rdquo;/&amp;gt;
.webServer&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### ~/App_Code/ScheduleModule.cs```csusing System;using System.Threading;using System.Web;public class SchedulerModule : IHttpModule{static int initializedModuleCount = 0;static Timer timer;public void Init(HttpApplication context){var count = Interlocked.</description>
    </item>
    
    <item>
      <title>WebMatrix：キーワード &amp;#39;file access retry timeout&amp;#39; はサポートされていません。 </title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/17/045321/</link>
      <pubDate>Thu, 17 Jul 2014 04:53:21 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/17/045321/</guid>
      <description>br/&amp;gt;
WebMatrix.Data.Database.Open(&amp;#34;MYDB&amp;#34;);```ローカルと Azure ではイケるのに、ExpressWeb では WebMatrix.Data.DatabaseOpen() が失敗する件について。&amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt;### 解決策その一&amp;gt;New connection string keyword: “File Access Retry Timeout” – will reattempt connection open from 0 – 30 seconds, with a default value of 0.Everything SQL Server Compact: SQL Server Compact 4.0 SP1 CTP1 availableSQL Server Compact 4.0 SP1 CTP1 で追加された要素らしいので、それ以前のバージョンを利用する。&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt;### 解決策その二```csWebMatrix.Data.Database.OpenConnectionString(&amp;#34;Data Source=|DataDirectory|\\MYDB.sdf&amp;#34;,&amp;#34;System.Data.SqlServerCe.4.0&amp;#34;);```.NET Framework データ プロバイダーを指定して、接続文字列で開く。&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;http://stackoverflow.</description>
    </item>
    
    <item>
      <title>WebMatrix：Web.config の appSettings を使いこなす</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/17/012107/</link>
      <pubDate>Thu, 17 Jul 2014 01:21:07 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/17/012107/</guid>
      <description>WebMatrix：ローカルとリモートで異なる設定を利用する方法を考えてみた - だるろぐ でちょっと興味がわいたので、Web.config について少しいろいろ試してみた。
### 基本  br/&amp;gt;
#### Default.cshtml```html@using System.Configuration
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;title&amp;gt;マイ サイトのタイトル&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; @ObjectInfo.Print(ConfigurationManager.AppSettings) &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### Web.config```xml&amp;lt;!--?--&amp;gt;xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;.web&amp;gt;debug=&amp;quot;true&amp;quot; targetFramework=&amp;quot;4.0&amp;quot; /&amp;gt;.web&amp;gt;file=&amp;quot;Web2.config&amp;quot;&amp;gt;key=&amp;quot;A&amp;quot; value=&amp;quot;a&amp;quot;/&amp;gt;key=&amp;quot;B&amp;quot; value=&amp;quot;b&amp;quot;/&amp;gt;key=&amp;quot;C&amp;quot; value=&amp;quot;c&amp;quot;/&amp;gt;key=&amp;quot;D&amp;quot; value=&amp;quot;d&amp;quot;/&amp;gt;key=&amp;quot;E&amp;quot; value=&amp;quot;e&amp;quot;/&amp;gt;key=&amp;quot;F&amp;quot; value=&amp;quot;f&amp;quot;/&amp;gt;key=&amp;quot;G&amp;quot; value=&amp;quot;g&amp;quot;/&amp;gt;```appSettings セクションにアプリケーション設定を記述。&amp;lt;code&amp;gt;file=&amp;quot;Web2.config&amp;quot;&amp;lt;/code&amp;gt; は後述。&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### 結果  とえば、```csvar a = System.</description>
    </item>
    
    <item>
      <title>WebMatrix：特定のファイルを発行対象に含まない</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/17/004650/</link>
      <pubDate>Thu, 17 Jul 2014 00:46:50 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/17/004650/</guid>
      <description>  れな。リモートへ発行したくないローカルファイルがある場合の対処方法。
### 隠しファイルを発行しない  設定］－［発行オプション］で“ソース コントロール ファイルなどの非表示のファイルおよびフォルダーを発行しない”を有効化。たぶん初期状態で有効になっているはず。
### 発行したくないフォルダーやファイルを隠しファイルに  ォルダーを隠すときは、子ファイルまで隠しフォルダにしなくていい。――これで設定は完了。もう一度［発行］すると……
  キました。
</description>
    </item>
    
    <item>
      <title>WebMatrix：ローカルとリモートで異なる設定を利用する方法を考えてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/15/224549/</link>
      <pubDate>Tue, 15 Jul 2014 22:45:49 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/15/224549/</guid>
      <description>たとえば Twitter BOT を作っている場合に、
ローカルテスト中は、テスト用に作成したアカウントでポストリモート展開中は、本番用のアカウントでポストしたい。Visual Studio だったらデプロイ時に XDT で Web.config を書き換えられるので簡単だけど、わしはそれを WebMatrix でやりたいのさ。で、AppSettings についていろいろ調べてたのだけど……&amp;gt;##### file 属性カスタム アプリケーションの構成設定を含む外部ファイルへの相対パスを指定します。指定されたファイルには、、、および の各要素で指定されたものと同じ種類の設定が含まれ、これらの要素と同じキーと値のペア形式を使用します。指定するパスはメイン構成ファイルへの相対パスです。Windows フォーム アプリケーションの場合は、アプリケーションの構成ファイルの場所ではなく、バイナリ フォルダ (/bin/debug など) になります。Web フォーム アプリケーションの場合は、web.config ファイルが置かれているアプリケーション ルートへの相対パスになります。 指定されたファイルが見つからない場合、ランタイムはこの属性を無視します。
 &amp;lt;appsettings&amp;gt; 要素&amp;lt;/appsettings&amp;gt; これは使えそう。方針はこんな感じ。
ローカルテスト時：Web.config（テスト用の Twitter アカウントの設定を記述）リモートテスト時：Web.config ＋ RemoteOnly.config（本番用の Twitter アカウントの設定で上書き）発行のときにリモートの RemoteOnly.config を消さないように気を付けなきゃいけない運用上の注意はあるけれど、これは割とイケるのではないか。### Web.configappSettings にテスト用アカウントの設定を記述。```xmlxml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;? .web&amp;gt; debug=&amp;quot;true&amp;rdquo; targetFramework=&amp;quot;4.0&amp;rdquo; /&amp;gt; mode=&amp;quot;Off&amp;rdquo; /&amp;gt; .web&amp;gt;</description>
    </item>
    
    <item>
      <title>WebMatrix：ルビを振るためのヘルパーを作ってみる</title>
      <link>https://blog.daruyanagi.jp/entry/2014/07/03/035624/</link>
      <pubDate>Thu, 03 Jul 2014 03:56:24 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/07/03/035624/</guid>
      <description>りあえずオーソドックスに App_Code フォルダ以下に Ruby.cshtml を作ってこんな感じに記述。
# ~/Ruby.cshtml@helper GetHtml(string text, string ruby){&amp;amp;lt;ruby&amp;gt;&amp;amp;lt;rb&amp;gt;@text&amp;amp;lt;/rb&amp;gt;&amp;amp;lt;rp&amp;gt;（&amp;amp;lt;/rp&amp;gt;&amp;amp;lt;rt&amp;gt;@ruby&amp;amp;lt;/rt&amp;gt;&amp;amp;lt;rp&amp;gt;）&amp;amp;lt;/rp&amp;gt;&amp;amp;lt;/ruby&amp;gt;}```使い方はこんな感じ .cshtml の名前がそのまま静的クラスの名前になっていて、定義したヘルパー関数が呼べる。```cs# ~/Test.cshtml@{}&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@Ruby.GetHtml(&amp;#34;柳 英俊&amp;#34;, &amp;#34;やなぎ ひでとし&amp;#34;)&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;  ※見やすいように拡大してある）自分はルビのタグなんか覚えるの面倒だし、ましてやルビタグが解釈できない Firefox のことまで考えてコーディングするのは面倒なので、こういうヘルパーを作るのが好み。
### ちょっとハッテン```cs# ~/App_Code/HtmlHelperExtensions.csusing System; using System.Collections.Generic; using System.Linq; using System.Web; using System.Web.WebPages.Html;
public static class HtmlHelperExtenstion { public static IHtmlString Ruby(this HtmlHelper helper, string text, string ruby) { return new HtmlString(string.</description>
    </item>
    
    <item>
      <title>Google の「Web Starter Kit」を WebMatrix で</title>
      <link>https://blog.daruyanagi.jp/entry/2014/06/24/215437/</link>
      <pubDate>Tue, 24 Jun 2014 21:54:37 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/06/24/215437/</guid>
      <description>witter で小耳にはさんだ「Web Starter Kit」を少し試してみました（別に WebMatrix で、じゃなくていいんだが）。いわゆるボイラープレート（テンプレみたいなもん）ですね。
Mobile-optimized HTML boilerplateResponsive multi-device layoutVisual component style guidegulp.js build tooling (optional)LiveReloadCross-device synchronization of clicks, scrolls, navigation, and form-fillingImage optimizationJavaScript minification and optimizationCSS optimizationHTML minificationPageSpeed performance reportingCSS autoprefixingというのが特徴らしい。ブラウザーサポートはこんな感じ。IE10, IE11, IE Mobile 10FF 30, 31Chrome 34, 35Safari 7, 8Opera 23, 24iOS Safari 7, 8Opera CoastAndroid / Chrome 4.</description>
    </item>
    
    <item>
      <title>Dropbox ＋ Microsoft Azure でサイトを管理する</title>
      <link>https://blog.daruyanagi.jp/entry/2014/05/03/082308/</link>
      <pubDate>Sat, 03 May 2014 08:23:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/05/03/082308/</guid>
      <description>  del&amp;gt;Windows Microsoft Azure Web サイト（MAWS）では、Dropbox のフォルダーとコードを同期して、サイトをデプロイすることができます。
複数の環境でソースコードを同期しておきたいGit とかよくわかんねーけど、Dropbox なら毎日使ってるぜといったユーザーにお勧めかも。### サイトの作成  ず MAWS で新規サイトを作成してみました。［Web サイト］-［簡易作成］を選択し、
  RL（サブドメイン）を決めるだけ（ほかはよくわからんのでそのままにした）。
  きあがり。簡単すぎて鼻血が出そうでした。
### Dropbox との連携  っきの画面の下の方にある［ソース管理の統合］-［ソース管理からのデプロイの設定］を選択すると、どこに保存されているコードをサイトへデプロイするかが選べます。もちろん、今回は Dropbox を選択。
  示されるがままに Dropbox との連携処理を行うと……
  んかフォルダが作成されます。
  認してみると DROPBPBOX_ROOT\アプリ\Azure にサイトのフォルダがありますね（カタカナ！？）。これを WebMatrix でサイトとして開きます。で、なんでもいいので適当にファイルを置いてみてください。今回は“テストだよ！”と表示するだけの Default.cshtml をルートにおいています。
  で、サイトの管理画面（ブラウザー）に戻り、下の方にある［同期］ボタンを押してデプローイ！
  事サイトも動き出しました。たぶん、デプロイってコマンドでもできるよね。静的ページ（動的なのでもいいけど）を Dropbox で管理して、コマンドでデプロイするようにすればいい感じかもしれない。
</description>
    </item>
    
    <item>
      <title>WebMatrix と Microsoft Azure 日本リージョン</title>
      <link>https://blog.daruyanagi.jp/entry/2014/04/01/034157/</link>
      <pubDate>Tue, 01 Apr 2014 03:41:57 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/04/01/034157/</guid>
      <description>日本マイクロソフト株式会社（本社：東京都港区、代表執行役 社長：樋口 泰行）は、パブリッククラウドサービス「Microsoft Windows Azure」をユーザーに提供する、新たな主要リージョンを日本に展開することを発表します。この「日本リージョン」には、日本国内の2か所（首都圏と関西圏）のサブリージョンが含まれ、Windows Azure のサービスを国内のデータセンターから提供することを可能にします。「Microsoft Windows Azure」の国内ビジネス強化に向けて 日本リージョンの開設計画を公開 遅ればせながら、Windows Microsoft Azure の日本リージョン開設おめでとうございます。これで Azure の普及が日本でも進めばいいですね。
  の日本リージョンですが、WebMatrix からでも利用できるみたいです。Windows Microsoft Azure にサイトを作成する際に現れるドロップダウンリストで**“空白”**を選びましょう。
  の“空白”、二つありますが、手元で試してみたところ上が“日本 (西)”、**下が“日本 (東)”**みたいですね？　違ったらごめんなさい。</description>
    </item>
    
    <item>
      <title>WebMatrix</title>
      <link>https://blog.daruyanagi.jp/entry/2014/03/14/182000/</link>
      <pubDate>Fri, 14 Mar 2014 18:20:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/03/14/182000/</guid>
      <description>見事 WebMatrix で Gmail 経由のアラートメールが送れたわけだが（WebMatrix: Gmail 経由でアラートメールを送る - だるろぐ）、このやり方には一つ欠点（？　というか、仕様だな）があった。たとえば、以下のようなコード。タイマーでとあるジョブ（必ず失敗する）を処理し、エラーが発生したらエラーメールを送る。
@{WebMail.SmtpServer=&amp;#34;smtp.gmail.com&amp;#34;;WebMail.SmtpPort = 587;WebMail.EnableSsl=true; WebMail.UserName=&amp;#34;***&amp;#34;;WebMail.From=&amp;#34;***@gmail.com&amp;#34;; WebMail.Password=&amp;#34;***&amp;#34;;var timer = new System.Timers.Timer(1000 * 60);timer.Elapsed += (sender, args) =&amp;gt;{try{throw new Exception();}catch (Exception e){WebMail.Send(&amp;#34;***@***.com&amp;#34;, e.Message, e.StackTrace);}};timer.Start();}```これは失敗する。しかも、WebMatrix だと例外が捕捉できないので気づきにくい。  くわからんけれど、WebMail は &amp;lt;a href=&amp;#34;http://msdn.microsoft.com/ja-jp/library/system.web.helpers(v=vs.111).aspx&amp;#34;&amp;gt;System.Web.Helpers Namespace () | Microsoft Docs&amp;lt;/a&amp;gt; に属するみたいで、Page のスレッドじゃないと動作しないのかもしれない。そういえば昔、こういうシチュエーションで Server.MapPath() が使えなかった覚えがある。&amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt;### 解決策System.</description>
    </item>
    
    <item>
      <title>WebMatrix</title>
      <link>https://blog.daruyanagi.jp/entry/2014/03/08/220723/</link>
      <pubDate>Sat, 08 Mar 2014 22:07:23 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/03/08/220723/</guid>
      <description>Hidetoshi Yanagi（無職） (YanagiHidetoshi) on Twitter に仕掛けておいた Twitter Bot が少しおかしいことに気が付いた。このブログのフィードだけ配信されていない。アプリが吐いたログを見ると、どうやらツイートが長すぎたようだ。修正、修正っと。で、この問題は解決したのだけど、こういうことはメールでお知らせしてほしいなと思う。WebMatrix/ASP.NET Web Pages では簡単にメールが遅れるので、使わないなんて損だ。以下は Gmail の SMTP サーバーを利用する場合。最初に WebMail クラスの設定をしておく。
// _AppStart.cshtml@{WebMail.SmtpServer=&amp;#34;smtp.gmail.com&amp;#34;;WebMail.SmtpPort = 587;WebMail.EnableSsl=true; WebMail.UserName=&amp;#34;***&amp;#34;;WebMail.From=&amp;#34;***@gmail.com&amp;#34;; WebMail.Password=&amp;#34;***&amp;#34;;}```使い方はこんな感じ。```cs@{try{（なんかエラーの起こりそうな処理）}catch (Exception e){WebMail.Send(to: &amp;#34;***@***.**&amp;#34;,subject: &amp;#34;Error が起こったで！&amp;#34;,body: e.Message);}}  っそく ALTER TABLE が失敗したメールが来た ／(＾o＾)＼</description>
    </item>
    
    <item>
      <title>再挑戦</title>
      <link>https://blog.daruyanagi.jp/entry/2014/03/05/173028/</link>
      <pubDate>Wed, 05 Mar 2014 17:30:28 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/03/05/173028/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2014/01/31/094422&amp;quot;&amp;gt;NuGet Pakage Manager 2.5.0 for WebMatrix - だるろぐ&amp;lt;/a
 を解決せずに放置していたのだけど、@ishisaka さんのツイートを見てもう一回チャレンジしようと思った。 window.twttr = (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = &amp;ldquo;https://platform.twitter.com/widgets.js&amp;quot;; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function(f) { t._e.push(f); }; return t; }(document, &amp;ldquo;script&amp;rdquo;, &amp;ldquo;twitter-wjs&amp;rdquo;));
  twttr.ready(function (twttr) { var el = document.getElementsByClassName(&#39;twitter-syntax-tweet-id-439194904992825344&#39;); for (var i=0;iとりあえず AppData 以下の関連フォルダを削除すればいいのね。  USERPROFILE%\AppData\Local\Microsoft\WebMatrix が関係ありそうなので（これ意外にもある？）……</description>
    </item>
    
    <item>
      <title>NuGet Pakage Manager 2.5.0 for WebMatrix</title>
      <link>https://blog.daruyanagi.jp/entry/2014/01/31/094422/</link>
      <pubDate>Fri, 31 Jan 2014 09:44:22 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2014/01/31/094422/</guid>
      <description>  div class=&amp;quot;twitter-detail twitter-detail-left&amp;quot;&amp;gt;The #NuGet Package Manager for #WebMatrix 3 is now open source! Its first update is available. Release notes updated: URL2014-01-31 08:08:48 via webNuGet 2.8 がリリースされた。それにあわせて WebMatrix の NuGet Pakage Manager にも新しいバージョンが出たようなので（しかもオープンソースになったらしい！）、さっそくアップデートしてみた。それにしても、v1.3.0 からすごいバージョンが飛びましたな。
  果は失敗だった。管理者権限で起動しないといけないのかなと思ったのだけど、そういうことでもないらしい。WebMatrix の再インストールも試みたが、状況は改善されなかった。
  ょうがないので、WebMatrix の拡張機能を管理していると思わしきフォルダー %USERPROFILE%\AppData\Local\Microsoft\WebMatrix\Extensions\30 を開き、そこにあった PendingExtensionChanges の中身をのぞいてみた。
update NuGetPackageManager 2.5.0 http://extensions.webmatrix.com/api/feeds/v3/```次に &amp;lt;a href=&amp;quot;http://extensions.webmatrix.com/api/feeds/v3/&amp;quot;&amp;gt;http://extensions.webmatrix.com/api/feeds/v3/&amp;lt;/a&amp;gt; をブラウザーでみてみた。  っぽのような気がする（本当は中身があるはずなんだよね？）。試しにほかの拡張機能のアンインストールなども試してみた。  h……。なんでかわかるひと、教えて！結局原因がよくわからなかったけれど（サーバーがトラぶってる？　自分の環境が腐ってる？）、そろそろ OS の再インストールもしたいし、もう一度キレイな環境を作ってから再度チャレンジしたいと思う。</description>
    </item>
    
    <item>
      <title>WordPress 日本語版を WebMatrix で利用する</title>
      <link>https://blog.daruyanagi.jp/entry/2013/12/12/003423/</link>
      <pubDate>Thu, 12 Dec 2013 00:34:23 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/12/12/003423/</guid>
      <description>One ASP.NET Advent Calendar 2013 - Adventar が埋まらなかったら使おうと思っていたちょっとヘチョいネタです。WebMatrix のアプリケーション ギャラリーからインストールできる WordPress は英語版のようだ。まぁ、英語版に言語パッチをいれれば同等になるものと思われるが、今回は日本語サイトから WordPress の日本語版をダウンロードして WebMatrix で起動させてみることにする。
### WordPress 日本語版のダウンロード  a href=&amp;quot;http://ja.wordpress.org/&amp;ldquo;&amp;gt;WordPress › 日本語 からダウンロード。
  ょっと笑ってしまったのだけど、ブラウザーの横幅が足りないと英語版の WordPress がダウンロードされてしまうようだ*1。ファイル名が wordpress-3.7.1-ja.zip であることを確認しよう（3.7.1 はバージョン）。
  にアーカイブを展開して、フォルダのコンテキストメニューから［Microsoft WebMatrix で Web サイトとして開く］を選択する。
### WebMatrix の設定  ordPress 日本語版を WebMatrix で開くと、PHP などの欠けている必要モジュールが検出され、ダウンロードが始まる。MySQL も検出されると思われるが、ウチの環境では既にセットアップ済みだったので追加インストールは不要だった。
  いで現れる Windows Azure Websites の作成画面はスキップしてよい。
  れでセットアップは完了。とりあえず［実行］ボタンを押してみる。
  さぁ、始めましょう！］をクリックして続行。
  y SQL のユーザー名とパスワードを入力して［送信］。ユーザー名は通常 root で、パスワードは WebMatrix で MySQL をセットアップしたときに指定するアレだ。</description>
    </item>
    
    <item>
      <title>ASP.NET Web Pages</title>
      <link>https://blog.daruyanagi.jp/entry/2013/12/11/015827/</link>
      <pubDate>Wed, 11 Dec 2013 01:58:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/12/11/015827/</guid>
      <description>この記事は One ASP.NET Advent Calendar 2013 の11日目の記事です。@ono さん、ありがとうございます！
&amp;gt;ASP.NET Web Pagesは4番目の選択肢です。Razorのシンタックスのおかげで、PHPやクラシックASPに似た開発経験を提供してくれます。Microsoftの技術の活用方法 どうも恐縮です！　“4番目の選択肢”が大好きな @daruyanagi です。ウェブベースのアプリを作るとき、ASP.NET Web Pages は LightSwitch の次にお勧めデス。とくに動的な“ペライチ”*1のサイトを作るにはピッタリで、MVC とか API とか Single Page Application とかわかんない僕でも少しはわかるぐらいの簡単さ。これから広大な One ASP.NET の海に漕ぎ出そうという入門者にはピッタリの技術なのではないかと思います。とくに年頃の娘さんにはお勧めしたいですね！――ま、そんなことは置いておいて。今日は ASP.NET Web Pages におけるルーティングの話です。“ペライチ”のサイトを作るには実はあまり関係ないのですけど、データベースを扱うページを作る場合、知っておくと URL がカッコいいサイトが作れるのではないでしょうか。SEO にもいいらしいです。知らんけど。
### 規約ベースのルーティング勝手にそう呼んでみましたが、ASP.NET Web Pages で一番簡単かつ基礎となるルーティングです。ASP.NET Web Pages は _/Default/あ/い/う/え/お _というリソースへのリクエストを受け取ると、_~/Default/あ/い/う/え/お.cshtml _を探しに行きます。なければ _~/Default/あ/い/う/え.cshtml_ を、次は _~/Default/あ/い/う.cshtml_ を……。そしてついにこんな **~/Default.cshtml** を発見します。```html&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;title&amp;gt;マイ サイトのタイトル&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;quot;~/favicon.</description>
    </item>
    
    <item>
      <title>Razor で組まれた CMS「razorC.net CMS」</title>
      <link>https://blog.daruyanagi.jp/entry/2013/12/04/035903/</link>
      <pubDate>Wed, 04 Dec 2013 03:59:03 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/12/04/035903/</guid>
      <description>  SP.NET Web Pages（razor syntax）で開発された CMS で、WebMatrix で開いていろいろ改造できるみたい。
Open Source ASP.net CMS for WebMatrix - razorC.net実際に WebMatrix で動かすとこんな感じ。    能的には割と普通というか、自動バックアップ機能とテーマ機能、レイアウトエディターが気になる程度。ちょっと面白いなと思ったのはコレ。
// _AppStart.cshtml@using System.Web.Routing@{ RouteTable.Routes.MapWebPageRoute(&amp;#34;{rcPageName}/{rc0}/{rc1}&amp;#34;,&amp;#34;~/Default.cshtml&amp;#34;,new {rcPageName = &amp;#34;default&amp;#34;,rc0=-1,rc1=-1});}```別に&amp;lt;a href=&amp;#34;https://blog.daruyanagi.jp/entry/2012/07/06/174414&amp;#34;&amp;gt;規約ベースのルーティング&amp;lt;/a&amp;gt;を無理して使う必要はなかったんだな。言われてみればそうなのだろうけれど、割りと目から鱗だった。&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;http://www.mikesdotnetting.com/Article/187/More-Flexible-Routing-For-ASP.NET-Web-Pages&amp;#34;&amp;gt;More Flexible Routing For ASP.NET Web Pages&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/29/042614/</link>
      <pubDate>Tue, 29 Oct 2013 04:26:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/29/042614/</guid>
      <description>indows Azure Web Sites はソース管理（GitHub とか CodePlex とか）からのデプロイが可能。前々から使ってみたかったがついつい後回しにしていたのだけど、これが超便利だった。</description>
    </item>
    
    <item>
      <title>WebMatrix 3 のアップデート？</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/27/164213/</link>
      <pubDate>Sun, 27 Oct 2013 16:42:13 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/27/164213/</guid>
      <description>りと使ってるほうだから、アップデートをほったらかしにしていたとは考えにくく。最近配信されたアップデートなのだと思うけれど、相変わらずバージョン履歴なんかはないっぽいのでよくわかんない。
バージョン 3.0WebMatrix: 7.1.1932.0IIS Express: 8.0.8418.0.NET Framework: 4.0.30319.18408 built by: FX451RTMGRELWeb Deploy: 7.1.1762.0Web Platform Installer: 7.1.40719.0ASP.NET Web Pages: 2.0.20715.0ASP.NET Web Pages: 1.0.20105.407  なみに Web Platform Installer 4.6 のほうは5月2日付けだった。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/20/132105/</link>
      <pubDate>Sun, 20 Oct 2013 13:21:05 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/20/132105/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/10/14/141550&amp;quot;&amp;gt;WebMatrix 3: Twitter Bot （＋リアルタイムログ表示付き）でも作ってみる。 - だるろぐ を Windows Azure Websites に置いてみた――のだけど、なんかすぐに止まってしまう。最初は SignalR 使ってるからかなぁと思い、リアルタイムログ表示の機能をとっぱらってみたのだけれど、やはり止まる。
&amp;gt;Windows Azure Webサイトの無料や共有インスタンスの場合、５～20分ほどアクセスが無かった場合はシャットダウンされてリソースが解放されます。そーすると、初回アクセス時に、レスポンスが遅く感じる事象が発生します。Windows Azureモバイルサービスのジョブスケジューラーで15分起きにリクエストを送信することで、常時ウォームアップし続けることが可能になります。  素敵だけど、怒られそうな話ですね！
 Windows Azureで定期ジョブを実行する方法 - 蒼の王座 怒られたらイヤだけど、とりあえずこの方法を試してみた。結論的には、上手くいった。Twitter のメインアカウント（やなぎ ひでとし（柳 英俊） (@YanagiHidetoshi) | Twitter）に新着情報を配信できるようになった。
  ケジューリングは毎分・毎時・毎日・毎月と要求時が設定できるみたい。正時にキッカリ実行したいなんて言う場合には使えないので、10分おきにサイトをキックするだけにして、定期実行の仕組みは自分で実装した（ついでにコードも前よりカッコよく、シンプルにしたった！）。
  br/&amp;gt;
function warmup() {warmUpSite(&amp;#34;http://darufeed.azurewebsites.net/&amp;#34;);}function warmUpSite(url) {console.info(&amp;#34;warming up: &amp;#34; + url);var req = require(&amp;amp;#39;request&amp;amp;#39;);req.get({ url: url }, function(error, response, body) {if (!error) {console.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/14/141550/</link>
      <pubDate>Mon, 14 Oct 2013 14:15:50 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/14/141550/</guid>
      <description>イマーと WebMatrix 3: Twitter ライブラリ Tweetinvi API でツイートしてみる - だるろぐ を組み合わせれば、定期的に何かをつぶやく BOT も手軽に作れそうな予感。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/14/004317/</link>
      <pubDate>Mon, 14 Oct 2013 00:43:17 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/14/004317/</guid>
      <description>的に画像を出力したい、という場合はこんな感じでいいのかな。以下は「~/Download/あほー」にアクセスると、「あほー」と描かれた画像を出力する例。
@using System.Drawing@{var text = UrlData[0] == string.Empty ? &amp;#34;Sample&amp;#34; : UrlData[0];try{var bitmap = new Bitmap(600, 480);using (var g = Graphics.FromImage(bitmap)) {using (var font = newFont(&amp;#34;Meiryo&amp;#34;, 24)) {var rect = new RectangleF(0, 0, 600, 480);var format = StringFormat.GenericDefault;format.Alignment = StringAlignment.Center;format.LineAlignment = StringAlignment.Center;g.FillRectangle(Brushes.CornflowerBlue,rect);g.DrawString(text, font, Brushes.AntiqueWhite,rect, format);} }bitmap.Save(Response.OutputStream,Imaging.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/10/01/081913/</link>
      <pubDate>Tue, 01 Oct 2013 08:19:13 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/10/01/081913/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/09/29/122508&amp;quot;&amp;gt;WebMatrix 3: @ でハマる - だるろぐ&amp;lt;/a
 の続き。 window.twttr = (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = &amp;ldquo;https://platform.twitter.com/widgets.js&amp;quot;; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function(f) { t._e.push(f); }; return t; }(document, &amp;ldquo;script&amp;rdquo;, &amp;ldquo;twitter-wjs&amp;rdquo;));
  twttr.ready(function (twttr) { var el = document.getElementsByClassName(&#39;twitter-syntax-tweet-id-384486530380611584&#39;); for (var i=0;iというアドバイスをもらった。あ、たぶんそれだ。というわけで書き直した。### 旧バージョン（Logger.cshtml）```cs#App_Code/Logger.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/29/122508/</link>
      <pubDate>Sun, 29 Sep 2013 12:25:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/29/122508/</guid>
      <description>ちょいとログを外部ファイルに吐きたくなって、テキトーにこんなコードを書いてみた。
  #App_Code/Logger.cshtml@helper Write(string message){System.IO.File.AppendAllText(Server.MapPath(&amp;#34;~/log.txt&amp;#34;),string.Format(&amp;#34;{0}:\t{1}\r\n&amp;#34;, DateTime.Now, message));}```これを Default.cshtml でテストしてみた。  ```html@{Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;);}&amp;amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34;/&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;マイ サイトのタイトル&amp;amp;lt;/title&amp;gt;&amp;amp;lt;link href=&amp;#34;~/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@Logger.Write(&amp;#34;Body 内で記述&amp;#34;)&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```結果はというと――  ―冒頭のコードブロック内で記述したログは記録されない。「あれ、なんでだろう？」と思って、あちこちごちゃごちゃ弄ってみたのだけど、正解はコレだった。```html@{@Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;);}  ogger.Write() のまえに @ を足せば実行される。
@{@(Logger.Write(&amp;#34;冒頭のコードブロック内で記述&amp;#34;))}```でもいいのだけど。しっかし、これ、なぜなんだろう。自分はまだまだ Razor がわかってないな。</description>
    </item>
    
    <item>
      <title>「WebMatrix 2」で利用できるテクノロジー</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/18/024758/</link>
      <pubDate>Wed, 18 Sep 2013 02:47:58 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/18/024758/</guid>
      <description>（289日前に書かれた下書きに加筆・修正を加えてみたけど公開レベルに達せず。でも、公開してみるなど）
  WebMatrix 2」を起動してみました。新しい Web サイトを作成するには、“テンプレート”か“アプリ ギャラリー”を選択します。今回は“テンプレート”を選択してみました。
  WebMatrix 2」では大きく分けて4つのテクノロジーが利用可能です。
### 静的な Web ページ#### HTML（＋CSS）Web ページを作るには、クライアントサイド（おもに Web ブラウザー）で表示するための HTML のソースコード（およびスタイルシート、スクリプト）を出力しなければなりません。「WebMatrix 2」では、HTML を記述するための便利な機能が豊富に備わっています。  述する ASP.NET、PHP、Node.js も、要はサーバー側（サーバーサイド）で HTML を出力するためのものです。
### 動的な Web ページ（サーバーサイドで動的に出力）内容が変わらない、“ペライチ”（コトノハ - “ペラいち”の意味が分かる あんまり使われない？）の Web ページを作るのならば HTML だけでもいいのですが、データベースと連携した検索ページなど、内容を動的に変更させたいテーマやサイドバー、ウィジェットなど、各 Web ページで共通の部分をひとまとめにしたいといった場合には、サーバー側で動的に HTML を生成する仕組みがあると便利です。WebMatrix では、そのために以下の3つのテクノロジーがサポートされています。#### ASP.NETASP.NET は、.NET 言語（C# や Visual Basic）を利用して HTML を出力できます。ASP.NET にも色々あるのですけど、「WebMatrix 2」ではおもにその一部である“ASP.NET Web Page 2”が利用できます*1。#### PHPPHP: Hypertext Preprocessor は、HTML を出力するためのプログラミング言語です。ちまたにある Web アプリケーションの多くは PHP で記述されているので、知っておくと便利かも。#### Node.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/12/001254/</link>
      <pubDate>Thu, 12 Sep 2013 00:12:54 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/12/001254/</guid>
      <description>WebMatrix 3: Twitter でログインする - だるろぐ でめでたく Twitter でのログインが実現できたのだけど、実はひとつ問題があった。
  ccessTokenSecret が取れない。自分もあんまりよくわかっていないのだけど、Twitter の API を利用するには以下の情報が必要であるみたい。
  ず、これ。アプリが Twitter へアクセスするために必要。
ConsumerKeyConsumerSecret次に、これ。ユーザーに成り代わって Twitter の API を使うために必要。AccessKeyAccessKeySecretアプリの登録画面で取得できる AccessKey/AccessKeySecret はアプリを登録したユーザーのアクセスキー。このアプリにログインしたユーザーとして API を利用するには、そのユーザーに対して発行される AccessKey/AccessKeySecret が必要だ。でも、OAuthWebSecurity では ExtraData から AccessKey をもらうことはできても、AccessKeySecret まではくれないみたい。  信を Fiddler でみてみた。ちゃんと authorize したあとに access_token している（ここで AccessKey がもらえる）から、ついでに AccessKeySecret もとってきてくれてもよさそうなのだけど。なにか理由があるのかもしれないが、これではちょっと困る。 これを解決するには、Twitter プロバイダーを自分で実装すればよいようだ。
// ~/App_Code/TwitterClient.csusing DotNetOpenAuth.AspNet;using DotNetOpenAuth.AspNet.Clients;using DotNetOpenAuth.Messaging;using DotNetOpenAuth.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/07/055029/</link>
      <pubDate>Sat, 07 Sep 2013 05:50:29 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/07/055029/</guid>
      <description>またま Tweetinvi a friendly Twitter C# API - Home というのをみかけたのだけど、割と便利だった。
@{var token = new TwitterToken.Token(&amp;#34;*****************Pj5ecAhlw3SqBPU5qHtBUSiTQDcgmUzBU&amp;#34;, &amp;#34;*****************RZSPVglcM0TfE7mPCFzm334rw&amp;#34;, &amp;#34;*****************cSizQ&amp;#34;, &amp;#34;*****************zws06agyxRXImPk9sfETNQeg&amp;#34;);if (IsPost){var tweet = new Tweetinvi.Tweet(&amp;#34;てすてす&amp;#34;);tweet.Publish(token);}}&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=utf-8&amp;#34;/&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;マイ サイトのタイトル&amp;amp;lt;/title&amp;gt;&amp;amp;lt;link href=&amp;#34;~/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;&amp;amp;lt;ul&amp;gt;@foreach (var tweet in new Tweetinvi.User(&amp;#34;daruyanagi&amp;#34;, token).GetUserTimeline()){&amp;amp;lt;li&amp;gt;@tweet.Text&amp;amp;lt;/li&amp;gt;}&amp;amp;lt;/ul&amp;gt;&amp;amp;lt;form action=&amp;#34;&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;&amp;amp;lt;input type=&amp;#34;submit&amp;#34; /&amp;gt;&amp;amp;lt;/form&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;  ET でタイムラインを表示（なんかゴミ（\）が入ってるけど、バグかな。あとで報告しよう）。POST でツイート。てすてす2013-09-07 05:45:16 via 建造メモTwitter 系のライブラリってピンキリだけど、これは UserStreams も扱えるようで、悪くない感じかな。デスクトップアプリにも組み込める、というか、PIN の認証はあるけど Web アプリの認証は今のところ未実装みたいなので、どっちかっていうと今のところデスクトップアプリ向けって感じ。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/05/070245/</link>
      <pubDate>Thu, 05 Sep 2013 07:02:45 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/05/070245/</guid>
      <description>ょっと Twitter と連携するアプリを作ってみたかったのだけど、“スターター サイト”テンプレートを使った例以外はあまり載っていなかったので、今回はそれを使わずに、“空のサイト”テンプレートから作ってみるよ。というのも、ググってたら自分のサイトが検索に引っかかって、WebMatrix 2：OAuth でログインする（２） - だるろぐ を放置することすでに半年経つことが判明したので……さすがにこの当時のことはあまりよく思い出せないのだけど、今回の記事がフォローアップのようなものになれば幸い。
### 下準備  ず NuGet で NuGet Gallery | Microsoft.AspNet.WebPages.OAuth 3.2.7 をインストール。これで“スターター サイト”テンプレートでも使われている OAuthWebSecurity Class (Microsoft.Web.WebPages.OAuth) | Microsoft Docs が使えるようになる。
  に https://dev.twitter.com/apps/ でアプリの登録を行っておく。登録祭の必須入力事項は以下のとおり。
Name: アプリの名前Description: titleWebsite: http://127.0.0.1:****/ （localhost は無効な URL として蹴られる）Callback URL: http://127.0.0.1:****/ （空っぽだと動かないっぽい）Allow this application to be used to Sign in with Twitter: 無効化アプリを登録したら、Consumer keyConsumer secretを取得し、~/_AppStart.</description>
    </item>
    
    <item>
      <title>はてなグループ、作ってみました。</title>
      <link>https://blog.daruyanagi.jp/entry/2013/09/02/040614/</link>
      <pubDate>Mon, 02 Sep 2013 04:06:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/09/02/040614/</guid>
      <description>  &amp;gt;本日、はてなブログを「ブログ グループ」に参加させる際に、ブログ記事のカテゴリーを指定できるようにしました。自分のブログで「写真」カテゴリーにある記事だけを「写真」グループに参加させる、といったことができます。ブログ グループに参加する際に、記事のカテゴリーを指定できるようにしました - はてなブログ開発ブログ グッジョブ！　ずっと要望していた昨日なのでとても嬉しい。
ASP.NET Web Pages - はてなブログ グループWebMatrix - はてなブログ グループまだ僕しかいないけど！はてなグループには RSS もあるので、お前の日記になんぞ興味ないよ、WebMatrix や ASP.NET Web Pages のことだけ書けよ、という人がいたらそっちを購読してくだサイ。また、参加者も募集しています！</description>
    </item>
    
    <item>
      <title>WebMatrix 3 で Wiki クローンを作る vol.1</title>
      <link>https://blog.daruyanagi.jp/entry/2013/08/10/155243/</link>
      <pubDate>Sat, 10 Aug 2013 15:52:43 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/08/10/155243/</guid>
      <description>前回（WebMatrix 3 で Wiki クローンを作る vol.0 - だるろぐ）からすでに1ヶ月たちましたが、だいたいこんなペースで、気が向いたときにやっていくと思います。すまんやで！さて、今回はデータの読み書きです。Wiki と言えば、データはテキストとして保存するるタイプが多いんですかね？　まぁ、それでもいいんですけど、WebMatrix では SQL Server Compact Edition（SQL CE と略されることが多いです）が簡単に扱えるので、それを利用したいと思います。SQL CE というのは Microsoft SQL Server 兄弟の末弟で、SQLite みたいにポータブルに扱えるタイプのデータベースです。ちなみに、WebMatrix はそのお兄さん（SQL Server）や、お兄さんのライバル（MySQL）なんかともなかよくできるのですけれど、ああいうのはインストールとかセッティングとかメンテナンスとか面倒ですよね。その点、SQL CE はデータベースファイルをひとつポンと作るだけなので楽ちんです。ちなみに、タダ。
### データベースの作成  ebMatrix でデータを扱うには、［データベース］というワークスペースを選択します。
  は、さっそくデータベースを作りましょう。データベースのファイル名はなんでもいいです。今回はプロジェクト名そのままの“Green Tights.sdf”にしました。続いてテーブルの作成。
  回はこんなかんじにしてみました。ついでにテーブルの定義も作っておきましょう。テーブルの名前は“Post”で、投稿を管理するテーブルです。
PostId：bigint（でっかい整数）型。“主キーかどうか”“ID かどうか”の両方を“はい”にしました。テーブルに行が挿入されると自動でインクリメントされるはずです。Title：最大60文字の nvarchar（文字列）型。文字数は適当……。“Null（からっぽ）を許可”を“いいえ”にしておきます。RawText：ntext 型。あらかじめ文字列の数を決めなくてよいテキスト型。本文をぶちこんでおくには最適かな？CreatedAt：datetime（日時）型。その名の通り作成日時です。UpdatedAt：datetime（日時）型。今回は使いませんが、のちのち更新日を記録しておきたくなると思うので。これを“Post”という名前で作っておきます。### データの入力画面の作成  ファイル］ワークスペースへ移行、とりあえず NewPost.cshtml という名前でデータの入力画面ページをルートフォルダ―に作成します。この画面には、http://***/NewPost でアクセスできます。
  ードの方はこんな感じ。ごくごく簡単で、エラー処理っぽいことはしていません。
@{if (IsPost) // POST 要求だけを受け付けましょう {// Request[&amp;#34;name&amp;#34;] で送られてきた名前を取得。 // POST データなら Request.</description>
    </item>
    
    <item>
      <title>WebMatrix によくある誤解を解いておこうかと思う</title>
      <link>https://blog.daruyanagi.jp/entry/2013/07/25/083857/</link>
      <pubDate>Thu, 25 Jul 2013 08:38:57 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/07/25/083857/</guid>
      <description>WebMatrixをインストールすると、IIS ExpressとSQL Serverが自動でインストールできたりとか、PHP for IISが入ってたりするから、Webサーバーが・・・とかデータベースが・・・とか、PHPが・・・とか言うことがないから2013-07-25 03:39:38 via Janetterこれ、普通の一般の人には絶対におすすめできないわ・・・、開発するところも、公開するところもWindows系で統一されてないと、ドツボ踏むだけになるから、WebMatrix使う意味が待ったくねぇ・・・2013-07-25 03:44:08 via Janetterってか、DBがSQL Server限定で、Web鯖がIISって・・・、WPをWebMatrix使って編集したとしても、実際の環境と違いすぎるからヤバ過ぎる・・・2013-07-25 03:41:56 via Janetterおそらく WordPress を設置もしくは編集しようとしているのだと思うけれど、こういった誤解はよくみかけるので、少し説明しておこうかと思う。### OS やサーバーなんてなんでもいい――スクリプト言語が動けばIISでも今はWordpress側でもちゃんと案内出てるし実際使ってて何も問題ないよ（・ω・）　URL2013-07-25 13:20:03 via web  プリケーションやプラグインが OS やサーバー独自の機能を使っていたり、スクリプト言語が OS やサーバー固有の機能に依存していない限り、ローカルテストに使う OS やサーバーなんてなんでもイイんじゃないだろうか。たとえば、Apache でも nginx でも IIS でも、PHP は問題なく動作するし、挙動も同じはず*1。Windows の Apache と Linux の Apache はそんなに違うのか？　まぁ、細かい所でいろいろ違うところもあるんだろうけど、だいたい同じように動くはず。だったら、Windows 環境でわざわざ Apache だの nginx だのを用意しなくても、Windows と相性のよい IIS でいいじゃないか。リモートが LAMP 環境でもあまり問題になることはないよ。世に流布している PHP 関連の TIPS が Apache ベースであるせいか、「PHP を使うなら Apache でなければならない」という信仰が一部であるみたいだけれど、そんなものに根拠はない――まぁ、むかしは PHP がスレッドセーフじゃなかったせいで色々あったっぽいけど。この件については、以下の記事も参考にしてほしい。</description>
    </item>
    
    <item>
      <title>Windows Store oEmbed API を NuGet にしておきました</title>
      <link>https://blog.daruyanagi.jp/entry/2013/07/24/070906/</link>
      <pubDate>Wed, 24 Jul 2013 07:09:06 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/07/24/070906/</guid>
      <description>  a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/07/18/033539&amp;quot;&amp;gt;WebMatrix 3: Windows Store oEmbed API を利用する - だるろぐ を NuGet にして NuGet Gallery で公開しました。
NuGet Gallery | WSoEmbed 1.0.2前回の記事からの変更点は、System.Threading.Thread.CurrentThread.CurrentUICulture で言語を取得して URL をビルドするようにしたことのみ。```cs@WindowsStore.GetHtml(APP_URL)@WindowsStore.GetHtml(&amp;ldquo;8289549f-9bae-4d44-9a5c-63d9c3a79f35&amp;rdquo;)
</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/07/18/033539/</link>
      <pubDate>Thu, 18 Jul 2013 03:35:39 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/07/18/033539/</guid>
      <description>Windows Store oEmbed API は、なかなかいいですね。ブログにこんなかんじでストアアプリの情報が貼り付けられます。使い方などは以下の URL を参照してください。
Windows Store oEmbed API として公開しなおしました - しばやん雑記Windows ストアの内容を埋め込める oEmbed API を作った - しばやん雑記またストアアプリを作りたくなりました（ぁ### WebMatrix 3 で Windows Store oEmbed API を利用するWindows Store oEmbed API と jquery-oembed を組み合わせて使う方法 - しばやん雑記 のように JavaScript（クライアントサイド）で利用するのがよいと思いますが、C#（サーバーサイド）で使うこともできます。説明するのは面倒なので、コードだけおいておきます。APS.NET の“空のサイト”を作成し、Default.cshtml を以下のように編集してください。```html@{const string API_ENDPOINT = @&#34;http://wsoembed.com/oembed&#34;;const string APP_URL = @&#34;http://apps.microsoft.com/windows/ja-jp/app/86b6ecdc-e810-4aa2-9bdb-bb0da5b34737&#34;;var url = string.Format(&amp;quot;{0}?url={1}&amp;quot;, API_ENDPOINT, APP_URL);var response = string.Empty;using (var downloader = new WebClient(){ Encoding = System.</description>
    </item>
    
    <item>
      <title>WebMatrix 3 で Wiki クローンを作る（番外編）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/07/17/073637/</link>
      <pubDate>Wed, 17 Jul 2013 07:36:37 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/07/17/073637/</guid>
      <description>  WebMatrix 3 で Wiki クローンを作る（WebMatrix 3 で Wiki クローンを作る）”のソースコードは CodePlex でホストするつもり。WebMatrix にはバージョン管理システムが統合されているので（Git/TFS）、簡単に連携できるんだよね。
### CodePlex のプロジェクトを作成  itHub より多少めんどくさいけれどガンバレ。ソースコントロールのタイプは Git を選択（TFSでもいいのかもしれないけれど、あまり知らない）。
### ソースコードのアップロード  ースコードタブにある［Clone］ボタンから、リモートアドレスを取得。
  ebMatrix 3 の［ソース コントロール］－［リモート］ボタンから、取得したリモートアドレスを登録。
  とは［ソース コントロール］－［プッシュ］ボタンで、ソースコードをアップロードすればよい。
### 逆にリモートの既存プロジェクトを WebMatrix で開きたい  れから新規にプロジェクトを作るならば、CodePlex 側でまずプロジェクトを作成し、それを［ファイル］－［ソース コントロール］メニューから開くのが手軽かもしれない。
  張機能「CodePlex」をあらかじめインストールしておけば、このメニューからリモートプロジェクトが開ける。
  itHub でホストしているリモートプロジェクトも、拡張機能「GitHub for WebMatrix」で開ける。
</description>
    </item>
    
    <item>
      <title>WebMatrix 3 で Wiki クローンを作る vol.0</title>
      <link>https://blog.daruyanagi.jp/entry/2013/07/17/054740/</link>
      <pubDate>Wed, 17 Jul 2013 05:47:40 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/07/17/054740/</guid>
      <description>br/&amp;gt;
&amp;gt;Ruby on Railsには良くかけたチュートリアルがあって、最初の一歩は踏み出 しやすいようになっています。しかし、チュートリアルをひととおり読んで、 scaffoldスゲーということはわかったのだけど、次に何をしたら良いかわから ないという人が多いようです。かくいう筆者もその一人でした。http://tam.qmix.org/wiki/Minki00.html 昔、Web アプリが作りたいなぁ、と思って手を出したのが Ruby on Rails でした。このサイトを参考にしながら、少しずつ Wiki を作って勉強したのを覚えています。当時は C# で Web アプリが書けるというのを知らなかったし、その環境も整っていなかった。なので、わざわざいちから Ruby という新しい言語を覚える必要がありました。それはそれで楽しいことだったし、今でもその経験は役に立っているのですけど、やっぱり使い慣れた C# で書けるならばそれに越したことはない。今なら C# で Web アプリが簡単に作れる WebMatrix という優秀なツールがあります*1。でも、僕がかつてお世話になったチュートリアル的なコンテンツはまだまだ少ないのが現状です。んなわけで、“WebMatrix 3 で Wiki クローンを作る（WebMatrix 3 で Wiki クローンを作る）”というのを、不定期にボチボチやっていこうかなと思います。でも、あんまり期待しないでください。
### 必要なものMicrosoft Developerこれだけです。できれば http://www.microsoft.com/visualstudio/jpn/products/visual-studio-express-for-web があるといろいろ便利。フレームワークには ASP.NET Web Pages 2 | Microsoft Docs を利用しますが、とりあえず今のところは_「C# で PHP っぽく Web アプリが書けるもの」_だとでも思っていただければ結構です。### プロジェクトの新規作成  ンプレートギャラリーから……
  SP.</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/06/16/183750/</link>
      <pubDate>Sun, 16 Jun 2013 18:37:50 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/06/16/183750/</guid>
      <description>しあなたが Windows ストア アプリを作っていて、なおかつ自分のサイトを APS.NET MVC/Web Pages で構築していたならば1、Web ページに Windows ストア アプリの情報を埋め込みたいと思うかもしれませんね。公式に oEmbed 2のような仕組みが提供されていればベストなのですが、残念ながらないみたい。仕方ないので、スクレイピングして埋め込み用のコードを取得する HTML ヘルパーを作ってみたいと思います。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/06/13/204747/</link>
      <pubDate>Thu, 13 Jun 2013 20:47:47 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/06/13/204747/</guid>
      <description>   As promised in our last blog post we’re releasing Microsoft.Net.Http as a stable NuGet package today. Yep, that’s right: You can finally start using the portable HttpClient 2.1 in production!Get /httpclient/rtm – 200 OK - .NET Blog - Site Home - MSDN Blogs Microsoft BCL チームが HttpClient を NuGet で利用できるようにして、すでに2週間が経っていた。汎用性の高いこのネットワーククライアントクラスは .NETer の第二の故郷となり、人々はそれでリクエストを飛ばし、受け取り、そして死んでいった。――こいつの何が便利なのかは諸兄の解説に譲るとして。
Web API よりも HttpClient に注目したい - しばやん雑記HttpClient詳解、或いは非同期の落とし穴についてオラはこれを WebMatrix で使ってみるぞ！……正直 WebMatrix で使うべきものなのかはよくわからんが。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/06/12/200923/</link>
      <pubDate>Wed, 12 Jun 2013 20:09:23 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/06/12/200923/</guid>
      <description>&amp;gt;An error was raised by libgit2. Category = Os (NotFound). Existing path is not a directory &#39;（プロジェクトフォルダ）&#39;: 既に存在するファイルを作成することはできません。
困った。
  りあえず、プロジェクトの保存フォルダを変更。再度 git init することで問題を回避した。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/06/11/224153/</link>
      <pubDate>Tue, 11 Jun 2013 22:41:53 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/06/11/224153/</guid>
      <description>回は WebMatrix 3 ではてなブログのデザインをいじってみた。みんな、はてなブログのデザインを作るときってどうやってるのかなぁ。あんまり効率のいい方法って思いつかなかったのだけど、こんなのはどうかな、というのを考えてみた。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/19/091940/</link>
      <pubDate>Sun, 19 May 2013 09:19:40 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/19/091940/</guid>
      <description>  付いてなかったのだけど、WebMatrix から Windows Azure Web Sites へデプロイすると、［リモート］リボンにこんなボタンが追加されるんだね。管理ポータルをサクッと開ける。
### ［管理］ボタン  ッシュボードページをひらく。トラフィックなんかがみられる。
### ［ドメイン］ボタン  成ページを開く。“Share”以上のプランを選択している場合、カスタムドメインが設定できるらしい。貧乏だから試せない。
### ［スケール］ボタン  荷に応じてインスタンをが増やせる。貧乏だから試せない。
</description>
    </item>
    
    <item>
      <title>nosniff 1.0.1 </title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/18/212634/</link>
      <pubDate>Sat, 18 May 2013 21:26:34 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/18/212634/</guid>
      <description>  &amp;gt;必ず X-Content-Type-Options: nosniff レスポンスヘッダをつけるようにしましょう機密情報を含むJSONには X-Content-Type-Options: nosniff をつけるべき - 葉っぱ日記 とのことなので、ASP.NET でカスタム HTTP ヘッダを追加する方法 - しばやん雑記 を参考に X-Content-Type-Options: nosniff を付ける NuGet を作っておいた。
NuGet Gallery | nosniff 1.0.1Web.config.transform を記述しただけのシンプルなものだけど、いかがでしょうかね。  </description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/17/064020/</link>
      <pubDate>Fri, 17 May 2013 06:40:20 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/17/064020/</guid>
      <description>div class=&amp;quot;twitter-detail twitter-detail-left&amp;quot;&amp;gt;今気づいたけどWebMatrix（のエディタ）って「選択範囲内のみを検索・置換」てないのね2013-05-16 16:46:06 via Crowyえっ！？　と思って確認してみたけれど、確かになかった。たま師匠に言われるまでまったく気づかなかった。
  なみに、Visual Studio のほうにはちゃんとある。個人的にはあまり使わない機能だったので気にならなかったが、気にする人は気にするような気がするので（あぁ、書いてて頭おかしくなってきた）、次のバージョンでの改善を期待したいと思う。
  分と思っていても抜けている機能というのはあるものなのだなぁ。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/10/085706/</link>
      <pubDate>Fri, 10 May 2013 08:57:06 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/10/085706/</guid>
      <description>br/&amp;gt;
&amp;gt;Nancy is a lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono. The goal of the framework is to stay out of the way as much as possible and provide a super-duper-happy-path to all interactions.Hosting Nancy with asp.net · NancyFx/Nancy Wiki · GitHub Scott Hanselman 氏のブログ（One ASP.NET: Nancy.Templates for Visual Studio - Scott Hanselman）で知ったのですが、 「Nancy」なんてのがあるんですね！
Nancy - Lightweight Web Framework for .</description>
    </item>
    
    <item>
      <title>少しずつ Web サイトのリニューアルをしていきます。</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/07/214301/</link>
      <pubDate>Tue, 07 May 2013 21:43:01 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/07/214301/</guid>
      <description>ずはここから。
http://download.daruyanagi.net/仕組み的には Markdown テキストを App_Text フォルダに入れておいて、それを HTML に変換しています。Helper でプラグインっぽく拡張できるのがちょっと自慢。WebMatrix 2: Markdown を汎用的に拡張する仕組みを考えてみる - だるろぐソーシャル関連のボタンは、この一連の記事で実装してみたものを使っています。WebMatrix 3: フィードの購読者数を取得する（1：サーバーサイド編） - だるろぐWebMatrix 3: フィードの購読者数を取得する（2: JavaScript 編） - だるろぐWebMatrix 3: フィードの購読者数を取得する（3: CSS 編） - だるろぐWebMatrix 3: JSON と JSONP - だるろぐフィードの出力は以下の記事で実装したものをベースにしています。WebMatrix 3: RSS フィードを出力する - だるろぐ今のところキャッシュ機能がないのでそれをつけようかなぁ、と。それ以外にも不満な部分が結構あるので、このサイトで十分に基本機能を練って NuGet パッケージにし、ほかのサイトにも展開していきたいと思います。WebMatrix：NuGet サーバーをたてる - だるろぐWordPress のような既存の大規模 CMS を使うのもいいけど、自分で少しずつ実装した方が“自分の手のひらの上で動かしている”感じがあって僕は好きです。Windows Azure Web Sites を使って Dropbox からデプロイできたら便利そうなのだけど、ボクのお給料では Azure の維持は少し大変そうなので泣く泣く断念しました。おちんぎんほしぃなりぃ。#### P.</description>
    </item>
    
    <item>
      <title>Microsoft WebMatrix 3 が正式版に</title>
      <link>https://blog.daruyanagi.jp/entry/2013/05/04/040625/</link>
      <pubDate>Sat, 04 May 2013 04:06:25 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/05/04/040625/</guid>
      <description>window.twttr = (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = &#34;https://platform.twitter.com/widgets.js&#34;; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function(f) { t._e.push(f); }; return t; }(document, &#34;script&#34;, &#34;twitter-wjs&#34;)); twttr.ready(function (twttr) { var el = document.getElementsByClassName(&#39;twitter-syntax-tweet-id-329685225007362048&#39;); for (var i=0;iおつかれさま！　URL からも「next」がとれました。http://www.microsoft.com/web/webmatrix/あと、TechCrunch が記事にしてくれています。MicrosoftのWeb開発ツールWebMatrixがバージョン3となりGitHubをサポート | TechCrunch Japan僕の出番はなさそうですね（ぁこれまでプレビューを使ってきたけれど、クリティカルなバグはあまりなかったんじゃないかな。クラッシュもほとんどなかった。2010年に公開された当初はエディターが重かったり、たまにクラッシュしたりなどと少し困ったところもあったのですが、そういった弱点も少しずつ改善されて、今ではすっかりよい子になりました。とくに Windows Azure Web Sites 連携は最高……楽ちんすぎる！正式版はちゃんと日本語化もされているようですね。注目の変更点はこれまでも何回かブログに書いてきたので、興味があれば参照してほしいです。WebMatrix 3 Preview + Team Foundation Service - だるろぐWebMatrix 3 Preview：TypeScript のサポート - だるろぐWebMatrix 3 Preview → Windows Azure Web Sites が光速過ぎて笑うしかない - だるろぐMicrosoft WebMatrix 3 Preview - だるろぐあと、細かいところではこんなところも変わってるんだよ。  レリリース版の NuGet パッケージもインストールできます！</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/22/200709/</link>
      <pubDate>Mon, 22 Apr 2013 20:07:09 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/22/200709/</guid>
      <description>  br/&amp;gt;
WebMatrix 3: フィードの購読者数を取得する（1：サーバーサイド編） - だるろぐWebMatrix 3: フィードの購読者数を取得する（2: JavaScript 編） - だるろぐWebMatrix 3: フィードの購読者数を取得する（3: CSS 編） - だるろぐ一連の記事では、FeedCount の結果を JSON でやり取りしていました。### JSON#### サーバーサイド```cs// ~/FeedCount.cshtmlResponse.Clear(); Response.ContentType = &amp;ldquo;application/json&amp;rdquo;; Response.Write(Json.Encode(data)); Response.End();
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### 渡されるデータ（例）```javascript{&amp;quot;livedoor&amp;quot;:6,&amp;quot;total&amp;quot;:6}#### クライアントサイド```javascript// ~/Script/SocialButtons.js$.ajax({ url: &#39;/FeedCount/&#39; + url, dataType: &#39;json&#39;, success: function (json) { element.text(json.total || 0); } });
&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/21/160348/</link>
      <pubDate>Sun, 21 Apr 2013 16:03:48 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/21/160348/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/04/21/154036&amp;quot;&amp;gt;WebMatrix 3: フィードの購読者数を取得する（2: JavaScript 編） - だるろぐ で忘れていたんだけれど、これ、CSS を当てないとすごくさびしい。今回はタイル状にレイアウトしてみたよ。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/21/154036/</link>
      <pubDate>Sun, 21 Apr 2013 15:40:36 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/21/154036/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/04/20/224501&amp;quot;&amp;gt;WebMatrix 3: フィードの購読者数を取得する（1：サーバーサイド編） - だるろぐ で吐いた JSON を JavaScript で読み取ってみる。</description>
    </item>
    
    <item>
      <title>WebMatrix 3：危険な可能性のある Request.Path 値がクライアント (:) から検出されました。</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/21/143904/</link>
      <pubDate>Sun, 21 Apr 2013 14:39:04 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/21/143904/</guid>
      <description>  a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/04/20/224501&amp;quot;&amp;gt;WebMatrix 3: フィードの購読者数を取得する（1：サーバーサイド編） - だるろぐ の補足。
http://localhost:11330/FeedCount/https://blog.daruyanagi.jp/```このような URL を受け取ると、&amp;gt;危険な可能性のある Request.Path 値がクライアント (:) から検出されました。というエラーが出てしまいます。これは ASP.NET のセキュリティ機能のようですね。ただ、自分は Web 系のセキュリティにあまり詳しくないので、これがどのように悪用できるのかさっぱりわからないのですが……（SQLインジェクションかなにかかなぁ？）。いい本をご存知でしたら、どなたか教えてください。とりあえず、今回はこれを解除してしまいます。あとは自己責任で……</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/20/224501/</link>
      <pubDate>Sat, 20 Apr 2013 22:45:01 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/20/224501/</guid>
      <description>んな感じのソーシャル共有＋ RSS 購読ボタンをサイトに追加したいな、と思って、今朝少し WebMatrix と格闘していた。SNS における共有数の取得部分は JavaScript だけで完結するのだけれど、RSS 購読数の取得部分は JavaScript だけでは少ししんどいのかなぁ。Same origin policy というものに引っかかってしまう。まぁ、こういうときは WebMatrix でサーバー側に RSS 購読数を取得するようにすればいいよね。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/18/031339/</link>
      <pubDate>Thu, 18 Apr 2013 03:13:39 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/18/031339/</guid>
      <description>br/&amp;gt;
&amp;gt;できた！と思ったけど、Internet Explorer ではちゃんと表示できない。なんか XML が尻切れトンボで出力されておる……WebMatrix 3: RSS フィードを出力する - だるろぐ この問題を解決しておきましょう。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/17/081501/</link>
      <pubDate>Wed, 17 Apr 2013 16:46:03 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/17/081501/</guid>
      <description>FM（Redirecting&amp;hellip;）には本家の Markdown にはない機能が結構盛り込まれているのですが、なかでもテーブルのサポートはぜひ真似したいところ。ちょっと頑張ってみました。</description>
    </item>
    
    <item>
      <title>WebMatrix 3</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/17/065153/</link>
      <pubDate>Wed, 17 Apr 2013 06:51:53 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/17/065153/</guid>
      <description>とあるフォルダー内のファイルのリストを RSS で出力したいなぁ、と思って昔に書いた記事（RSS 2.0 を実装する - だるろぐ）をコピペしてみたのだけれど、ちゃんと動かなかった……なぜだ。まぁ、原因を追求するのも面倒だったので、SyndicationFeed クラスを利用して書きなおしてみました。
@using System.IO@using System.Xml@using System.ServiceModel.Syndication@{var url = new Uri(Request.Url.Scheme + &amp;#34;://&amp;#34; + Request.Url.Authority);// ココらへんはあんまり気にしないで var files = Directory.GetFiles(Server.MapPath(&amp;#34;~/App_Text/&amp;#34;)).Select(_ =&amp;gt; new FileInfo(_)).Where(_ =&amp;gt; !_.Name.StartsWith(&amp;#34;_&amp;#34;)).OrderByDescending(_ =&amp;gt; _.LastWriteTime).Take(10);var feed = new SyndicationFeed(App.Title, App.Description, new Uri(url, &amp;#34;Feed&amp;#34;)){Copyright = new TextSyndicationContent(App.Copyright.ToString()),Items = files.Select(file =&amp;gt;{var name = Path.GetFileNameWithoutExtension(file.FullName);// ファイルの内容を読み込んで自作の Markdown エンジンにかけている var content = TextFormatEngine.</description>
    </item>
    
    <item>
      <title>WebMatrix でプログラミング生放送してみた #pronama</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/07/144008/</link>
      <pubDate>Sun, 07 Apr 2013 14:40:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/07/144008/</guid>
      <description>Web matrix でプログラミング生放送してみた  from Hidetoshi Yanagi プログラミング生放送勉強会 第22回＠松山に参加してきました #pronama - だるろぐ でやった LT の補足です。### 何をしていたか  う少し絵がうまかったらよかったのだけど。
WebMatrix 拡張機能で WebMatrix のエディター画面の情報を取得WebMatrix 拡張機能（SignalR .NET Client）で Windows Azure 上の SignalR サーバー（Hub）へテキストを送信SignalR Hub が Web ページ（SignalR JavaScript Client を仕込んである）へ接続中のブラウザーへ向けてテキストを一斉送信これで「手元の WebMatrix で書いたコードを一斉配信する」システムができた。なお、Windows Azure 上の SignalR Hub も WebMatrix で記述しているので、「ピュア WebMatrix 製」ってことやね！WebMatrix の拡張機能って自分でも作れるんだよSignalR は WebMatrix でも使えます！.NET でも JavaScript でも OK！ってことが伝わればうれしかったのだけど、なかなかそこまでうまくいかなかった。### WebMatrix で SignalR を使うこの辺りを参考にしてください。WebMatrix 2: SignalR を動かす （ 1.</description>
    </item>
    
    <item>
      <title>WebMatrix 3：SwissKnife.T4.AppSettings を使う</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/06/130738/</link>
      <pubDate>Sat, 06 Apr 2013 13:07:38 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/06/130738/</guid>
      <description>  eb.config の appSettings セクションをもとにクラスを生成してくれる T4 テンプレート SwissKnife.T4.AppSettings がよさげなので、これが WebMatrix 3 も使えないかなぁ、といろいろ試してみた。
Web.config から AppSettings クラスを生成する T4 を NuGet で公開しました - しばやん雑記</description>
    </item>
    
    <item>
      <title>WebMatrix 3 Preview &#43; Team Foundation Service</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/05/153356/</link>
      <pubDate>Fri, 05 Apr 2013 17:00:18 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/05/153356/</guid>
      <description>プログラミング生放送勉強会 第22回＠松山に参加してきました #pronama - だるろぐ の復習もかねて、WebMatrix 3 Preview から Team Foundation Service を利用してみた。自分の理解では、
&amp;gt;Team Foundation Service = ( ソース管理 + アジャイル支援 ).AsCloud(); って感じ。自分のような趣味の個人開発者にとってアジャイル支援の部分がどれだけ役に立つのかは未知数だけれど、とりあえずソース管理（Source Control）の部分だけでも体験しておこう。</description>
    </item>
    
    <item>
      <title>WebMatrix：NuGet サーバーをたてる</title>
      <link>https://blog.daruyanagi.jp/entry/2013/04/05/133515/</link>
      <pubDate>Fri, 05 Apr 2013 13:35:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/04/05/133515/</guid>
      <description>オレオレデザインのベースを NuGet 化しよう2013-04-04 16:54:23 via MetroTwitプライベート NuGet サーバーがあれば、公式レポジトリを汚さなくてすむのだけど2013-04-04 16:55:07 via MetroTwit@daruyanagi 立てればいいやん2013-04-04 16:55:16 via みについ to @daruyanagi@shibayan 前にブログに書いてた方法でまだいけんの？2013-04-04 16:55:32 via MetroTwit to @shibayan@daruyanagi 多分2013-04-04 16:55:48 via みについ to @daruyanagiというわけで、NuGet.Server を利用してプライベートリポジトリを構築する - しばやん雑記 を参考に自分で NuGet サーバーをたててみた。_WebMatrix で。_このブログはできるだけ WebMatrix でなんとかやってしまう主義なのです。</description>
    </item>
    
    <item>
      <title>ASP.NET Web ページとは（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/26/074517/</link>
      <pubDate>Tue, 26 Mar 2013 07:45:17 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/26/074517/</guid>
      <description>### WebMatrix と ASP.NET Web Pages  br/&amp;gt;
ASP.NET Web ページとは - だるろぐWebMatrix とは - だるろぐこれでだいたい ASP.NET Web Pages と WebMatrix の違いは説明できるかなぁ、と思う。WebMatrix は ASP.NET Web Pages の開発**も**できる開発環境ASP.NET Web Pages は WebMatrix で**も**使えるフレームワークってな感じですね。  SP.NET Web Pages そのものは開発環境に依存しない。
Microsoft .NET Framework 4 以降ASP.NET MVC (ASP.NET Web Pages もインストールされる)IIS ExpressMicrosoft SQL Server Compact 4.0（使わないなら入れなくていいと思う）と、ソースコードを記述するためのテキストエディターがあればよい。必要なコンポーネントは Web Platform Installer : The Official Microsoft IIS Site で個別にインストール可能で、```iisexpress.</description>
    </item>
    
    <item>
      <title>WebMatrix とは</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/26/060901/</link>
      <pubDate>Tue, 26 Mar 2013 06:09:01 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/26/060901/</guid>
      <description>  &amp;gt;WebMatrix はマイクロソフトが提供する無料の Web サイト構築ツールで、Web サイトの初期設定・編集、公開といった一連の Web サイト構築作業を “カンタン” に行う事ができます。Microsoft Web Platform WebMatrix とは、
**Setup**：ライブラリ、フレームワーク、オープンソースで提供されている各種 Web アプリケーションのインストール**Development**：HTML（CSS、JavaScript、TypeScript ）＋DB（SQL Server、MySQL）による Web アプリケーションの開発。開発言語として ASP.NET Web Pages、PHP、Node.js をサポート。NuGet、OpenAuth 認証、モバイル開発にも対応。**Test**：IIS Express での実行、IE / Firefox / Chrome……によるテスト**Operation**：Web サーバーへの配置、SEOといった作業をシームレスに行うための統合ツール。次期バージョン「WebMatrix 3」ではWindows Azure Web Sites 連携の強化Source Control（Git、TFS）機能の追加が行われているけれど、こうやってみてみると根本的な立ち位置はあんまり変わっていない。「Microsoft WebMatrix 3 Preview」が公開、Git/TFSによるソースコード管理機能を統合 - 窓の杜もちろん一部も機能だけをとりだして、たとえば WordPress のセットアップとデプロイのためだけに使ったり、JavaScript のエディターとして使ってもいいと思う。どちらかというと簡易ツールという位置づけなので、なにか困ったり、もっと高度なことがしたければ「Visual Studio」を使えばいい。「WebMatrix」から簡単に呼び出せる。</description>
    </item>
    
    <item>
      <title>WebMatrix 3 Preview：TypeScript のサポート</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/23/080714/</link>
      <pubDate>Sat, 23 Mar 2013 08:07:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/23/080714/</guid>
      <description>  &amp;gt;Hugely improved remote editing experience with great code completion and colorization for PHP, ASP.NET as well as Node.js. Support for TypeScript is now included.WebMatrix 3 Preview Release Notes 確かに、追加できるファイルの形式に TypeScript（*.ts）が追加されている。
  だ、これは構文色分けのサポートだけみたい。入力補完もコンパイルもできない。まぁ、以前のバージョンでは構文色分けもできなかった*1わけで、それだけでもだいぶうれしいところではある。
  お、TS ファイルのコンパイルを行うには、今までどおり拡張機能「TypeScript Tools」（WebMatrix Gallery）が必要。拡張機能ボタンからインストールしてくれたまい。
  とは、コンパイルするとできる JS ファイルを……
  TML から呼び出せば……
  ゃんと使える。おれ……TypeScript が Generics に対応したら本気出すんだ……。
*1:http://www.forest.impress.co.jp/docs/review/20121017_566289.html</description>
    </item>
    
    <item>
      <title>WebMatrix 3 Preview → Windows Azure Web Sites が光速過ぎて笑うしかない</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/23/073646/</link>
      <pubDate>Sat, 23 Mar 2013 07:36:46 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/23/073646/</guid>
      <description>  a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/03/22/060002&amp;quot;&amp;gt;Microsoft WebMatrix 3 Preview - だるろぐ の続きというか、補足のようなもの。Windows Azure （Microsoft ID）でログインした状態で Web サイトを新規作成すると、「Windows Azure にもサイトを作らないか？（うほっ」と言われる。
  直にそれに従うと……フツーに Windows Azure Web Sites ができちゃう。もう簡単すぎて笑うしかない……。まぁ、もともと Windows Azure は簡単だけれど。
  すがにこれだけだと空なので、Default.cshtml でもおいて公開してみる。いつも通り［Publish］ボタンを押すと、初回は互換性チェックが走って……
  ァイルのアップロードをして……
  成。
  ー、全部 Azure Web Sites にしてしまいたいなぁ。実はそれほど高くなさそうなのだけれど、サブドメイン使いまくってるとやっぱり ExpressWeb には勝てないわけで。GitHub や CodePlex を使うつもりならば、そっちでプロジェクトを作成し、WebMatrix 3 でクローンするといい。おんなじ感じで Azure Web Sites も簡単に作れる。
#### おまけ@ishisaka さんが Git 周りを中心に WebMatrix 3 の記事を書いてくれているので必見やで。WebMatrix 3 Previewリリース 特にGit関連機能の紹介 | OPCDiary</description>
    </item>
    
    <item>
      <title>Microsoft WebMatrix 3 Preview</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/22/060002/</link>
      <pubDate>Fri, 22 Mar 2013 06:00:02 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/22/060002/</guid>
      <description>div class=&amp;quot;twitter-detail twitter-detail-left&amp;quot;&amp;gt;Webmatrix 3 Preview available and it&#39;s cool, no seriously it&#39;s cool.URL2013-03-21 22:28:50 via webｷﾀ━━━━━━(ﾟ∀ﾟ)━━━━━━!!!!
### 早速インストール  英語版」らしい。日本語版もあればいいけど、べつに英語でもいいや。
  りながらセットアップを待つ。
  存関係周りは WebMatrix 2 と変わらなさそう。自分の環境では何も要求されなかった。
#### 追記（2013-03-22 6:10 JST）@daruyanagi 今回からSQL Server等の余計なインストールを要求されることがなくなっているはずです。今までWMをインストールしようとすると大量の追加インストールが必要だったのが、かなり改善されています。まあ既にインストールされてる場合は関係ないんですけど2013-03-22 06:05:50 via web to @daruyanagi帝国兵のひとが教えてくれました。確かに不要なものまでインストールされるのが不快だという人は多かったので、素晴らしい改善だと思います。### Windows Azure 連携  icrosoft ID （Windows Azure）でログインしろと言われる。たぶんこれは必須でないけれど、“Not now”のリンクが小さいので誤解されそう。とりあえず今回は素直にログインしてみる。
  ると、スタートアップ画面に“Windows Azure”のメニューが！？　あかん、手が止まらへん。誘われるままにメニューをぽちっ。
  ぁ━━━━━━(ﾟ∀ﾟ)━━━━━━!!!!
  かん、興奮しすぎて WebMatrix がクラッシュしてしまった。</description>
    </item>
    
    <item>
      <title>WebMatrix 2</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/15/033129/</link>
      <pubDate>Fri, 15 Mar 2013 03:31:29 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/15/033129/</guid>
      <description>witter の Web UI で改行が使えるようになったとのことで、タイムラインが縦書きでいっぱいです。それをみていたら、自分も漢詩なんかが縦書きで投稿できるアプリがほしくなりました。
縦書き - @daruyanagi### Inside Tategaki#### 拡張メソッドさっそく中身を紹介したいのですが、その前に拡張メソッドをいくつか用意しておきます。クラス名が体を表していないのは見逃してください。拡張メソッドのクラス名なんか飾りなんですよ！Transpose() : 行と列を逆にしますJoin() : string.Join() を &#34;hoge&#34;.Join() で呼び出すTimes()：string * int がほしかった**~/App_Code/EnumerableExtensions.cs**```csusing System;using System.Collections.Generic;using System.Linq;using System.Web;public static class EnumerableExtensions { public static IEnumerable&amp;lt;IEnumerable&amp;lt;T&amp;raquo; Transpose&amp;lt;T&amp;gt;( this IEnumerable&amp;lt;IEnumerable&amp;lt;T&amp;raquo; source) { return from row in source from col in row.Select( (x, i) =&amp;gt; new KeyValuePair&amp;lt;int, T&amp;gt;(i, x)) group col.</description>
    </item>
    
    <item>
      <title>WebMatrix 2</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/13/065552/</link>
      <pubDate>Wed, 13 Mar 2013 06:55:52 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/13/065552/</guid>
      <description>緑タイツの中の人が Facebook で、昨日の記事（WebMatrix 2: SignalR を動かす （ 1.0.1 対応版） - だるろぐ）に_「SignalRのサンプル作るときは、「今何人接続」表示があるともっと便利ですよー」_とコメントを付けてくれました。これは要するに、_「そのやり方をブログに書け」_ということですよね！（違幸い、しばやんが偶然たまたま ASP.NET SignalR で接続中のクライアントを数えてみる - しばやん雑記 という記事を書いてくれましたので、それをコピペ参考にして、昨日のサンプルに追加してみました。
### ~/_AppStart.cshtml```cs@using System.Web.Routing@{ RouteTable.Routes.MapHubs(); }
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### ~/App_Code/ChatHub.cshtml```csusing Microsoft.AspNet.SignalR;// 追加using Microsoft.AspNet.SignalR.Hubs;using System.Collections.Concurrent;using System.Threading.Tasks;[HubName(&amp;quot;chat&amp;quot;)]public class ChatHub : Hub {public void Send(string message){ Clients.All.addMessage(message);}// 以下、追加private static readonly ConcurrentDictionary&amp;amp;lt;string, bool&amp;gt;_connections = new ConcurrentDictionary&amp;amp;lt;string, bool&amp;gt;();public override Task OnConnected(){_connections.</description>
    </item>
    
    <item>
      <title>WebMatrix 2</title>
      <link>https://blog.daruyanagi.jp/entry/2013/03/12/093613/</link>
      <pubDate>Tue, 12 Mar 2013 09:36:13 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/03/12/093613/</guid>
      <description>もうだいぶ昔の話になりますが、ASP.NET SignalR が正式リリースされました。
ASP.NET SignalR 1.0.1 が出てました - しばやん雑記最新版は 1.0.1 ですかね。ASP.NET SignalR は「WebMatrix 2」からも使えますが、ベータのとき（SignalR Deep Dive ! に参加してきた＋WebMatrix で SignalR 動かしてみた - だるろぐ）とは少し変わっている部分もあるようなので、もう一度やってみました。とりあえず、QuickStart Hubs · SignalR/SignalR Wiki · GitHub を動作させるのが目標。### NuGet で SignalR を取得  式パッケージソースで「SignalR」を検索すると、三番目ぐらいに出てくるはず。
### サーバー（ハブ）  /App_Code フォルダに ChatHub.cs を作成し、以下のようなクラスを用意します。
using Microsoft.AspNet.SignalR;public class Chat : Hub {public void Send(string message){// Call the addMessage method on all clients  Clients.</description>
    </item>
    
    <item>
      <title>Web Platform Installer 4.5：WordPress のインストール</title>
      <link>https://blog.daruyanagi.jp/entry/2013/02/26/214555/</link>
      <pubDate>Tue, 26 Feb 2013 21:45:55 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/02/26/214555/</guid>
      <description>  eb Platform Installer 4.5 の変更点はよくわからない*1。とりあえず WordPress をインストールしてみた。
  語版しかないのかな。
  ySQL のインストール。ここでルートパスワードを指定する。
  存関係の確認。
  ウンロードの開始。
  変わらず MySQL 関連のダウンロードは遅い。たしか SourceForge あたりからダウンロードしてくるのだと記憶しているけれど、できれば Microsoft でホストしてほしいなぁ。
  了。パスワードがコピーできるらしい。こんなフェーズ、あったかしら。
  なみに、クリップボードの中身はこんな感じ。
  った！たった！WordPress がたった！
  ebMatrix 2 のアップデートループは健在。無視するしかないみたい。
### 追記  div class=&amp;quot;twitter-detail twitter-detail-left&amp;quot;&amp;gt;@daruyanagi Azure関係のSDKがカテゴリーにまとまっているのは確認しているのですが。それ以外がががｇ2013-02-26 21:58:17 via HootSuite to @daruyanagi気付かなかった！
*1:ちゃんと言ってくれればごにょごにょするのにさ</description>
    </item>
    
    <item>
      <title>WebMatrix 2</title>
      <link>https://blog.daruyanagi.jp/entry/2013/02/24/154553/</link>
      <pubDate>Sun, 24 Feb 2013 15:45:53 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/02/24/154553/</guid>
      <description>Markdown は覚えやすくて書きやすいのだけれど、とても非力に感じる。一応 HTML タグの埋め込みも可能なので、原理的にはなんでも書けるのだけれど、たとえばルビを振りたい場合、
国民の&amp;amp;lt;ruby&amp;gt;税金&amp;amp;lt;rp&amp;gt;(&amp;amp;lt;/rp&amp;gt;&amp;amp;lt;rt&amp;gt;ぜいきん&amp;amp;lt;/rt&amp;gt;&amp;amp;lt;rp&amp;gt;)&amp;amp;lt;/rp&amp;gt;&amp;amp;lt;/ruby&amp;gt;を２億円使うなんて```などといちいち書くのは、読みにくいし第一めんどくさい。もっと簡単に、たとえば、```html国民の[[ruby|税金|ぜいきん]]を２億円使うなんて```などのような、&amp;lt;code&amp;gt;[[コマンド|引数1|引数2...]] &amp;lt;/code&amp;gt;といった記法で書ければどうだろう。なるべく規約ベースとし、Hoge コマンドは Hoge / HogeHelper ヘルパーの GetHtml() メソッドを呼び出すようにする。```cs# App_Code/RubyHelper.cshtml@helper GetHtml(string text, string ruby){&amp;amp;lt;ruby&amp;gt;@text&amp;amp;lt;rp&amp;gt;(&amp;amp;lt;/rp&amp;gt;&amp;amp;lt;rt&amp;gt;@ruby&amp;amp;lt;/rt&amp;gt;&amp;amp;lt;rp&amp;gt;)&amp;amp;lt;/rp&amp;gt;&amp;amp;lt;/ruby&amp;gt;}```これならば、Markdown の拡張だけでなく、普通の cshtml でも利用できてよいと思う。```html国民の@RubyHelper.GetHtml(&amp;#34;税金&amp;#34;, &amp;#34;ぜいきん&amp;#34;)を２億円使うなんて### 実装とりあえずこんな感じにしてみた。```cs@using System.IO@using System.Reflection@using System.Text.RegularExpressions@functions { private string Camelize(string input) { if (input.Length == 0) return input;
 var chars = input.ToArray();chars[0] = char.ToUpper(chars[0]);return string.Join(string.Empty, chars);} }</description>
    </item>
    
    <item>
      <title>WebMatrix 2：OAuth でログインする（２）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/02/03/160915/</link>
      <pubDate>Sun, 03 Feb 2013 16:09:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/02/03/160915/</guid>
      <description>WebMatrix 2：OAuth でログインする - だるろぐ の続き。今回は“空のサイト”テンプレートから、OAuth によるログイン処理を書いていくことにする。まぁ、“スターターサイト”テンプレートのコードを読めば分かる人もいると思うけど、こういうのは一度自分で書いてみるに限ると思う。
### NuGet で必要なものをインストール  uGet で NuGet Gallery | Microsoft.AspNet.WebPages.OAuth 3.2.7 をインストール。まえにやったとき（さて、WebMatrix で OAuth 認証を……Σ(ﾟдﾟlll)ｶﾞｰﾝ - だるろぐ）はインストールできなかったのだけど、今はできるようになってる。何が悪かったのかな？　ま、直ってるならいいや。
  れをインストールすると、 DotNetOpenAuth を初めとする必要なライブラリも同時にインストールされる。DotNetOpenAuth 系はいろいろあってどれを入れていいのかよくわからないけれど、Microsoft WebPages OAuth library をいれておけばおっけーなのかな。
### ~/_AppStart.cshtmlWeb サイトを初めて実行するときにロードされる ~/_AppStart.cshtml で、初期設定を行う。```cs@{// いろんなところで使うので、グローバルにアクセスできるようにしとくかApp.Database = &#34;Database&#34;;// ユーザー管理用のテーブルを初期化・作成WebSecurity.InitializeDatabaseConnection(App.Database,&amp;quot;UserProfile&amp;quot;, &amp;quot;UserId&amp;quot;, &amp;quot;UserName&amp;quot;,autoCreateTables: true);// Google の OAuth を使います！OAuthWebSecurity.RegisterGoogleClient(); }
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### ~/Account/Login.</description>
    </item>
    
    <item>
      <title>WebMatrix 2：OAuth でログインする</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/27/102043/</link>
      <pubDate>Sun, 27 Jan 2013 10:20:43 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/27/102043/</guid>
      <description>「WebMatrix 2」と「ASP.NET Web Pages」を組み合わせれば、Web サイトへ OAuth 認証の機能を簡単に追加できる。標準で対応するプロバイダは以下の通り。
  TwitterFacebookMicrosoft（旧 Windows Live）YahooGoogleLinkedInそのほかにも、カスタムプロバイダを自作して追加したりもできるみたいだけど、今回は、まぁ、いいや。### スターターテンプレート  、問題はどうやって使うのか、だけど、「WebMatrix 2」の“スターター”テンプレートが格好の例となっているので、まずはこれを敵情視察したい。
  っそく、画面右上の［ログイン］を押すが……Twitter も Facebook も使えないじゃないか。
  うやら、“_AppStart.cshtml”*1でプロバイダを有効化する必要があるらしい（知ってた）。有効化したいプロバイダをコメントアウトしてリロードすれば、ちゃんと使えるようになる。
  りあえず Twitter の API キーを取得して試したのだけど、うまくいかない*2。今回は原因を突き止めるのも面倒なので、API キーの要らない Google で試してみたが……
      ともあっさり動いた（右上に注目！）。
  ータベースにもちゃんと登録されている3。Google に認証を委譲したので、こちら側にはパスワードが保存されていない。さて、“スターター”テンプレートから不要なものを削り、必要なものを足してアプリを作ってもいいのだけど、それも面倒そうだし、一から勉強する意味でも、次回は“空のサイト”テンプレートで Google 認証によるログインまでを実装しようかな、と思う4。
*1:アプリケーションの起動時に実行される*2:わしが何かミスってるんだろう*3:UserId が 2 になっているのは、Twitter で試して失敗したためかな*4:実はもうだいたいできてるんだけど！</description>
    </item>
    
    <item>
      <title>WebMatrix 2：RESTful？な Web アプリケーション （5）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/24/073816/</link>
      <pubDate>Thu, 24 Jan 2013 07:38:16 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/24/073816/</guid>
      <description>WebMatrix 2：RESTful？な Web アプリケーション （4） - だるろぐ の続き。結局こんな感じになったというのを書くのを忘れていた。実際に動作するサンプルは、Windows Azure に置いておいた。
http://daruyanagi-sample1.azurewebsites.net/Postsモーダルダイアログの表示に pointer-events というのを使ったのだけど、実はこれ、IE/Opera では使えないらしい。興味のある人は Mozilla Firefox か Google Chrome で試してほしいかな。デザインの過程は WebMatrix でほかの Web サイトのデザインをパク……じゃなくて、参考にさせていただく - だるろぐ を参照。### データベースとのやり取り~/App_Code/Post.cs に書いておいた。一つのファイルにごちゃっと書いておけるのが ASP.NET Web Pages のお手軽なところだと思うけれど、まぁ、わけておいた方があとあとメンテナンスしやすそう。```csusing System;using System.Collections.Generic;using System.Linq;using System.Web.WebPages;using WebMatrix.Data;public class Post { // ここら辺はテーブルの構造をそのまま定義 public long Id { get; set; } public string Title { get; set; } public string Body { get; set; } public DateTime CreatedAt { get; set; } public DateTime UpdatedAt { get; set; }</description>
    </item>
    
    <item>
      <title>WebMatrix でほかの Web サイトのデザインをパク……じゃなくて、参考にさせていただく</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/23/053227/</link>
      <pubDate>Wed, 23 Jan 2013 05:32:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/23/053227/</guid>
      <description>ょっと調べ物をしていて、http://cereda.github.com/arara/ というサイトを見つけたのだけど、このデザインがシンプルながら結構いけているな、と思った。
  リッキーなマークアップが少なくて、ちゃんとセマンティック。印刷時の見栄えも素直だ。
    により素晴らしいのはレスポンシブなところ。ブラウザーの横幅に応じて、デザインが適したものに変わる。多少気になるところもないとは言えないけれど、これはぜひパクらせて参考にさせていただきたい。
### まずはダウンロード  にはともあれ、まずはダウンロードやな。“Web ページ、完全”で HTML とそのほかのリソース（CSS/JavaScriptや画像ファイルなど）をゲット。
  に作業用のフォルダを作って、ダウンロードした HTML ファイルを移動させる。リソースが保存されたフォルダ（今回の場合“arara by cereda_files”フォルダ）は、NTFS の“代替データストリーム”という仕組みで関連付けられているので、HTML ファイルを移動させればそれについてくる。
  業フォルダの中身はこんな感じになっているはず。
### 作業フォルダを Web サイトとして開く  いて、これを WebMatrix で開く。フォルダのコンテクストメニューから［Open as a Web Site with Microsoft WebMatrix］を選択しよう。
  れでやりたい放題だな！
WebMatrix 2：フォルダーから Web サイトを作ってみる - だるろぐWebMatrix 2：フォルダーから Web サイトを作成する場合の注意点 - だるろぐ### 少し手を入れる  すがにこのままホスティングサービスへアップロードして使うのはダサいので、少しだけ手を入れよう。ASP.</description>
    </item>
    
    <item>
      <title>はてなスペースとやらを試してみた。</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/17/020941/</link>
      <pubDate>Thu, 17 Jan 2013 02:09:41 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/17/020941/</guid>
      <description>  くわからないけど、トピックごとの掲示板のようなものなのかな。ログインしたら勝手に自分の掲示板ができていた。
だるやなぎ - はてなスペースこれ、流行るのかなぁ……。  しに WebMatrix の掲示板を作ってみた。はてな ID をもっていれば、簡便な情報交換の場になるのかもしれない。
WebMatrix - はてなスペース</description>
    </item>
    
    <item>
      <title>WebMatrix 2：RESTful？な Web アプリケーション （4）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/13/094453/</link>
      <pubDate>Sun, 13 Jan 2013 09:44:53 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/13/094453/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2013/01/11/060424&amp;quot;&amp;gt;WebMatrix 2：RESTful？な Web アプリケーション （3） - だるろぐ の続き。サーバーへ手軽に PUT/DELETE できる方法はないかなぁ、と思って探していたのだけど、
https://addons.mozilla.org/ja/firefox/addon/poster/という Firefox 拡張機能が簡単でよかった。ただ、最近はあんまりメンテナンスされていないようで  ざわざアドオンバーを表示して、このクソちっちゃいボタンをポチッとしなきゃいけないのだけど。それはともかく。
  IS（Express）は標準で PUT や DELETE を認識してくれないみたいで、リクエストを投げても 404 が返ってきてしまう。Web.config を書き換えて、PUT や DELETE をハンドリングできるようにする必要があるみたい。
&amp;lt;!--?--&amp;gt;xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;.web&amp;gt;debug=&amp;#34;true&amp;#34; targetFramework=&amp;#34;4.0&amp;#34; /&amp;gt;.web&amp;gt;.webServer&amp;gt;&amp;lt;handlers&amp;gt;&amp;lt;/handlers&amp;gt;name=&amp;#34;WebDAV&amp;#34; /&amp;gt;name=&amp;#34;ExtensionlessUrlHandler-ISAPI-4.0_32bit&amp;#34; /&amp;gt;name=&amp;#34;ExtensionlessUrlHandler-ISAPI-4.0_64bit&amp;#34; /&amp;gt;name=&amp;#34;ExtensionlessUrlHandler-Integrated-4.0&amp;#34; /&amp;gt;name=&amp;#34;ExtensionlessUrlHandler-ISAPI-4.0_32bit&amp;#34; path=&amp;#34;*.&amp;#34; verb=&amp;#34;GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS&amp;#34; modules=&amp;#34;IsapiModule&amp;#34; scriptProcessor=&amp;#34;%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll&amp;#34; preCondition=&amp;#34;classicMode,runtimeVersionv4.0,bitness32&amp;#34; responseBufferLimit=&amp;#34;0&amp;#34; /&amp;gt;name=&amp;#34;ExtensionlessUrlHandler-ISAPI-4.0_64bit&amp;#34; path=&amp;#34;*.&amp;#34; verb=&amp;#34;GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS&amp;#34; modules=&amp;#34;IsapiModule&amp;#34; scriptProcessor=&amp;#34;%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll&amp;#34; preCondition=&amp;#34;classicMode,runtimeVersionv4.0,bitness64&amp;#34; responseBufferLimit=&amp;#34;0&amp;#34; /&amp;gt;name=&amp;#34;ExtensionlessUrlHandler-Integrated-4.0&amp;#34; path=&amp;#34;*.</description>
    </item>
    
    <item>
      <title>WebMatrix 2：RESTful？な Web アプリケーション （3） </title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/11/060424/</link>
      <pubDate>Fri, 11 Jan 2013 06:04:24 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/11/060424/</guid>
      <description>WebMatrix 2：RESTful？な Web アプリケーション （2） - だるろぐ の続き。日中戦争、ベトナム戦争並みに泥沼化してきたけど、突き進んでいこう！
### PUT/DELETE メソッドを扱えるようにするとりあえず、前回の宿題をさっさと終わらせる。```cs@{Layout = &#34;_SiteLayout.cshtml&#34;;// POST で PUT/DELETE を代用string method = Request.HttpMethod.ToUpper();if (IsPost &amp;amp;amp;&amp;amp;amp; Request[&amp;quot;_method&amp;quot;] != null) {method = Request[&amp;quot;_method&amp;quot;].ToUpper();} }
```cs@switch (method){case &amp;quot;GET&amp;quot;:// いろいろbreak;case &amp;quot;POST&amp;quot;:// さまざまbreak;case &amp;quot;PUT&amp;quot;:// ほげほげbreak;case &amp;quot;DELETE&amp;quot;:// ふがふがbreak;default:throw new Exception(&amp;quot;なにいってんだおまえ&amp;quot;);}```――ダサいな！たまたま今日、北陸の女神様のブログ（&amp;lt;a href=&amp;quot;http://d.hatena.ne.jp/miso_soup3/20130110/1357822008&amp;quot;&amp;gt;ASP.NET WEB API ルーティングについていろいろ - miso_soup3 Blog&amp;lt;/a&amp;gt;）を読んでいたのだけど、ASP.</description>
    </item>
    
    <item>
      <title>WebMatrix 2：RESTful？な Web アプリケーション （2）</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/11/041856/</link>
      <pubDate>Fri, 11 Jan 2013 04:18:56 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/11/041856/</guid>
      <description>WebMatrix 2：RESTful？な Web アプリケーション - だるろぐ の続き。とりあえず、
/Posts/ - GET:List/Posts/:id - GET:Show/Posts/New - GET:New, POST:Create/Posts/Edit/:id - GET:Edit, POST:Update/Posts/Remove/:id - GET:Remove, POST:DELETEって感じにマッピングされるように頑張ってみた。```cs# ~/Posts.cshtml@{ Layout = &amp;ldquo;_SiteLayout.cshtml&amp;rdquo;; }
@try{ switch (UrlData[0].ToUpper()) { case &amp;ldquo;&amp;quot;: // &amp;lt;- / へアクセスするととりあえず UrlData[0] には string.empty が入るっぽい case &amp;ldquo;LIST&amp;rdquo;: if (!IsPost) // GET { @List() } else // POST { throw new ApplicationException(); } break;
 case &amp;quot;NEW&amp;quot;:case &amp;quot;CREATE&amp;quot;: // &amp;amp;lt;- ビューを書き換えるのがめんどいのでif (!</description>
    </item>
    
    <item>
      <title>WebMatrix 2：RESTful？な Web アプリケーション</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/07/025136/</link>
      <pubDate>Mon, 07 Jan 2013 02:51:36 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/07/025136/</guid>
      <description>br/&amp;gt;
&amp;gt;たとえば、 ~/Posts/ …… ページリストの表示 ~/Posts/:id …… 個別ページの表示 というのをやってみたいとき。
~/Posts/Default.cshtml を作成して、
UrlData.Count() == 0 ……ページリストの表示 UrlData.Count() == 1 ……個別ページの表示 という処理を書けばいいよね（WebMatrix のルーティング - だるろぐ）。
 WebMatrix 2 / Razor：switch と RenderPage() - だるろぐ _これはウソだ。_申し訳ない。まぁ、別に正しいことを書いているブログではないので、いいと言えばいいんだけど。正しくは、
~/Posts.cshtmlを作成するだね。ほかにもウソがあるのだけど、それはまた別のエントリーでフォローするから！――なにはともあれ。この ~/Posts.cshtml をガリガリ書いていけば、いわゆる RESTful な Web アプリケーションが書けるのではないかと思いついた。RESTful の厳密な定義は知らないけど、だいたいLists：GET /PostsShow：GET /Posts/:idNew： POST /PostsEdit：PUT /Posts/:idRemove：DELETE /Posts/:idみたいな感じだよね。だったら、下のような感じで書けばいいんじゃないか（本質に関係ない部分は削ってる）。```cs@try{switch (Request.HttpMethod.ToUpper()){case &#34;GET&#34;:switch (UrlData.Count){case 0: // GET Posts/ @List()break;case 1:switch (UrlData[0].</description>
    </item>
    
    <item>
      <title>WebMatrix 2 / Razor：switch と RenderPage()</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/06/051815/</link>
      <pubDate>Sun, 06 Jan 2013 05:18:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/06/051815/</guid>
      <description>とえば、
~/Posts/ …… ページリストの表示~/Posts/:id …… 個別ページの表示というのをやってみたいとき。~/Posts/Default.cshtmlを作成して、UrlData.Count() == 0 ……ページリストの表示UrlData.Count() == 1 ……個別ページの表示という処理を書けばいいよね（WebMatrix のルーティング - だるろぐ）。こういう処理は if で分岐してもいいのだけど、将来的に UrlData.Count() = 2 の処理を書くことも考えて switch にするのが個人的には好み。いかにも「処理を切り替えています！」みたいな感じで。でも、そういえば Razor で switch って書いたことないな。どうやって書くんだろう。```cs@{var db = Database.Open(&#34;db&#34;);var query = &#34;SELECT * FROM Post ORDER BY CreatedAt DESC&#34;;var posts = db.Query(query);}@switch (UrlData.Count) { case 0: foreach (var post in posts) { @RenderPage(&amp;quot;_Single.</description>
    </item>
    
    <item>
      <title>WebMatrix 2：お正月なのでいつもは書かないことを徒然なるままに</title>
      <link>https://blog.daruyanagi.jp/entry/2013/01/05/050056/</link>
      <pubDate>Sat, 05 Jan 2013 05:00:56 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2013/01/05/050056/</guid>
      <description>@{var hello = &amp;#34;Hello!&amp;#34;;}&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;マイ サイトのタイトル&amp;amp;lt;/title&amp;gt;&amp;amp;lt;link href=&amp;#34;~/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34; type=&amp;#34;image/x-icon&amp;#34; /&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;&amp;amp;lt;p&amp;gt;@hello World!&amp;amp;lt;/p&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```これの結果は、当然“Hello! World!”ですね。  て、Razor 構文で変数を埋め込んだ```cs&amp;amp;lt;p&amp;gt;@hello World!&amp;amp;lt;/p&amp;gt;```の部分は、```cs&amp;amp;lt;p&amp;gt;@(hello) World!&amp;amp;lt;/p&amp;gt;```とも書いていい、というか、もともとこの形の省略なんだな（たぶん）。括弧を省略した場合は、スペースや記号（要は C# の変数に使えない文字）、HTML タグの手前で一度区切られ、評価が行われる。だから、もし Hello! と World! の間にスペースを入れたくなければ、@(hello)World! と書いて明示的に括弧で区切りを示さなければならない。じゃないと、@(helloWorld)! と解釈される。@() の内容は、その値が評価され（ToString() だと思えばいい）、無毒化のうえ（つまり HtmlEncode() やな）出力される。逆に言えば、@() の内容は値をもつ変数か関数でなくてはならない。一方、@{} の中には文を記述する。文というのは、要は ; で終わっていたり、{} で囲まれたコードの塊。たとえば、Razor で括弧を省略せずに for 文を書くときは {} が使える。```cs&amp;amp;lt;ul&amp;gt;@{for(int i = 0; i &amp;amp;lt; 10; i++){&amp;amp;lt;li&amp;gt;@(i)&amp;amp;lt;/li&amp;gt;}} &amp;amp;lt;/ul&amp;gt;```わざわざこのように読みにくく書くことはないけど（ひとによってはこっちの方がいいか？）。ちなみに、for や if のあとの {} の中身はまた少し特殊で（だから省略できないんだな……）、@{} 外と同じ感じで評価される。つまり、HTML タグと @() が使える。まぁ、理屈より書いて慣れた方が早い。Don&amp;amp;#39;t think, feel!</description>
    </item>
    
    <item>
      <title>WebMatrix 2：ASP.NET と PHP（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/27/070246/</link>
      <pubDate>Thu, 27 Dec 2012 07:02:46 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/27/070246/</guid>
      <description>WebMatrix 2：ASP.NET と PHP - だるろぐ あたりを書いた時に Twitter で「WebMatrix 2（というより、Razor 記法）は Visual Basic に対応していないのか？」という疑問を見かけたのですが、ちゃんと対応しています。たとえば前回の例の場合、こんなふうに書きます。
@CodeDim s = &amp;#34;Hello! World&amp;#34; &amp;amp;#39; 追加End Code&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@s &amp;amp;lt;!-- 追加 --&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```C# の @{ … } が @Code … End Code に置き換わったぐらいかな。For 文の書き方なんかも VB 風に書けます。詳しいことは &amp;lt;a href=&amp;#34;http://www.atmarkit.co.jp/fdotnet/rapidmaster/rapidmaster_04/rapidmaster_04.html&amp;#34;&amp;gt;VB Razor構文 基礎文法 総まとめ - ＠IT&amp;lt;/a&amp;gt; でも参照してください。個人的にはこれから始める人が VB で Razor を書く意味はあまりないのではないかなと思います。XML の処理などは簡単なんだそうですけど。あと、前回は言わなかったけれど &amp;amp;lt;% … %&amp;gt; という ASP.</description>
    </item>
    
    <item>
      <title>WebMatrix 2：フォルダーから Web サイトを作成する場合の注意点</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/24/185100/</link>
      <pubDate>Mon, 24 Dec 2012 18:51:00 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/24/185100/</guid>
      <description>々回（WebMatrix 2：フォルダーから Web サイトを作ってみる - だるろぐ）は、空のフォルダーから Web サイトを作って HTML ファイルを配置し、それをローカル Web サーバー（IIS Express 7.5）でホストするところまで進めましたが、_ぶっちゃけこの方法はあまりお勧めしません。_ちゃんと初期画面の［テンプレート］ボタンを利用して新しいサイトを作るようにしましょう。なぜかというと、通常の作業フローとはちょっと外れているため、いくつか困ったことが発生するからです。
  br/&amp;gt;
#### 1. NuGet が使えないリボン右端の［ギャラリー］ボタンを押しても、［拡張機能］ボタンしか出てきません。つまり、NuGet ギャラリーが利用できません。#### 2. 実環境で動かすにはコンポーネントが足りません［テンプレート］ボタンからサイトを作成すると、 App_Data フォルダや bin フォルダに ASP.NET の実行に必要な DLL が追加されます。しかし、空のフォルダーから Web サイトを作るとこれらが追加されないため、たとえば FTP でファイルをサーバーへ丸コピしても動作しません。ローカルでは「WebMatrix 2」が気を利かせてくれるのでちゃんと動くのですけど。### 解決策  いうわけで、あまりお勧めできないのですけど……いろいろ試していてひとつ気が付きました。一度 Windows Azure Web サイトへサイトを発行してしまうと、その過程でコンポーネントの追加が行われるようですね。NuGet ギャラリーも利用できるようになります*1。スクリーンショットの右上と左に注目してください。[NuGet]ボタンが利用できるのと、App_Data フォルダや bin フォルダに ASP.NET の実行に必要な DLL が追加されているのが分かります。
  だし、“ASP.NET Web ページ”（ここでは Razor 記法＋その他コンポーネント群のことだと思ってくれていいと思います。）のバージョンは 1.0 です。</description>
    </item>
    
    <item>
      <title>WebMatrix 2：ASP.NET と PHP</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/11/085125/</link>
      <pubDate>Tue, 11 Dec 2012 08:51:25 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/11/085125/</guid>
      <description>前回（WebMatrix 2：フォルダーから Web サイトを作ってみる - だるろぐ）は、空のフォルダーから Web サイトを作って HTML ファイルを配置し、それをローカル Web サーバー（IIS Express 7.5）でホストするところまで進めた。でも、静的な HTML だけではちょっとつまらないかな。「WebMatrix 2」では、サーバーサイドで動的に HTML を生成することもできる*1。“動的”というのは、要求に応じて異なる内容を出力できるということ。これができると、いろいろなメリットがある。
データベースと連携できるほかの Web サイトの情報を取り込んだり、Web サービスの API が利用できる*2Web サイト共通の部分（パラメーターやデザイン）が一元管理できる状況に応じて出力がカスタマイズできる（例: モバイル向けWebデザイン）世の中にはさまざまなサーバ・サイドプログラミング環境があるけれど、「WebMatrix 2」ではそのなかでも“**ASP.NET**”と“**PHP**”をサポートしている*3。空のフォルダーから作成した Web サイト でも簡単に利用できる。### ASP.NET（C#）*4  張子は“.cshtml”（Visual Basic の場合は *.vbhtml）。“Razor”と呼ばれるシンプルな構文で記述できる。
@{var s = &amp;#34;Hello! World&amp;#34;; // 追加}&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@s &amp;amp;lt;!-- 追加 --&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;  張子を省略してもアクセスできる。</description>
    </item>
    
    <item>
      <title>WebMatrix で自動アップデートのループ</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/11/074148/</link>
      <pubDate>Tue, 11 Dec 2012 07:41:48 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/11/074148/</guid>
      <description>んか「WebMatrix 2」の起動時に毎回「Microsoft SQL Server Compact 4.0 SP1 Scripting Tools（CTP1）」のアップデート通知が出る現象に出くわした。
    ンポーネント自体はインストールされているみたいなので、おそらく「Web Platform Installer 4.0」側の問題かな。利用に支障がなければこのまま放置しようと思う。</description>
    </item>
    
    <item>
      <title>WebMatrix 2：フォルダーから Web サイトを作ってみる</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/07/125835/</link>
      <pubDate>Fri, 07 Dec 2012 12:58:35 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/07/125835/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/12/02/042811&amp;quot;&amp;gt;「WebMatrix 2」の導入 - だるろぐ の続き。普通は_「それでは“テンプレート”または“アプリ ギャラリー”から Web サイトを新規作成しましょう」_という話になるのだと思うけれど、今回はちょっと趣向を変えてみようかな。
### フォルダーから Web サイトの作成  ず、デスクトップ（どこでもいいのだけど！）に空のフォルダーを作成します。
  にこのフォルダーのコンテキストメニューから、［Open as a Web Site with Microsoft WebMatrix］を選択。
  ると、「WebMatrix 2」が起動します。これで Web サイトが完成しました！（ぇ
  身は「WebMatrix 2」が勝手に追加する Robot.txt 以外何もないのだけど（この画面は、左下の［ファイル］というボタンを押すと表示されます）。「WebMatrix 2」では、指定したフォルダーが Web サイトのルートフォルダになります。あとはそこへ HTML ファイルや CSS ファイル（スタイルシート）、スクリプトファイル、画像ファイルなどを置いていけばいい*1。世の中には「マウス操作で簡単にカッコいい Web サイトが制作できる！」なんていう GUI ツールも多いですけど、ちゃんと HTML タグから学んで Web サイトを作っていきたい人にとって、「WebMatrix 2」は最良の選択肢の一つです。マウスでチョチョイ、というのも便利なんですけどね。
### コンテンツの追加これではあまりにも寂しいので、実際に簡単な Web ページを追加してみましょう。  ボンの［新規］ボタンを押して、HTML ファイルを追加します。名前は“index.html”とでもしておきます。
  いうのも、あらかじめ“既定のページ”に登録されたファイル名は、アクセスする際に名前を省略できるからです（カスタマイズ可能）。ファイル名を省略してアクセスすると、登録リストの上から順にファイルがあるかチェックされ、あればそれを返します。なければ“404 Not found”になるわけ。おっと、話がそれた。HTML ファイルを作成したらコードを記述します。</description>
    </item>
    
    <item>
      <title>「WebMatrix 2」の導入</title>
      <link>https://blog.daruyanagi.jp/entry/2012/12/02/042811/</link>
      <pubDate>Sun, 02 Dec 2012 04:28:11 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/12/02/042811/</guid>
      <description>Windows 環境で Web 開発*1を行うならば、まず利用を検討してみてほしいのが「WebMatrix 2」です。まぁ、ほかにもいろいろ便利なツールはあると思いますけど、これが一番楽ちんだと思います。だまされたと思って一度インストールしてみてください。
### 「WebMatrix 2」のダウンロード  a href=&amp;quot;http://www.microsoft.com/web/webmatrix/&amp;ldquo;&amp;gt;WebMatrix 2 からインストーラーをダウンロードして実行します。
### 「WebMatrix 2」のインストールインストーラーを実行すると、「Web Platform Installer 4.0」が起動します。  Web Platform Installer」は、Microsoft による Web 開発に必要なサーバー・フレームワーク・データベース・ツール・アプリケーションを手軽に導入するためのインストーラーです。
  Web Platform Installer」がセットアップされると、続いて「WebMatrix 2」のインストールへ移ります。
  インストール］ボタンを押せば、インストールが開始されます。
  Web Platform Installer」が便利なのは、「WebMatrix 2」の実行に必要なコンポーネントを勝手にダウンロードしてインストールしてくれるところです*2。
  なみに、現時点での最新版は「WebMatrix 2 Refresh 2」です。
  ンストールが完了しました。多くのコンポーネントが自動でインストールされているのがわかります。
  動はスタート画面から。頻繁に利用する場合は、“ピン留め”しておくと便利です。
### 「Web Platform Installer 4.0」について  Web Matrix 2」のインストールが終了すると、「Web Platform Installer 4.</description>
    </item>
    
    <item>
      <title>「Microsoft WebMatrix 2 Refresh 2」がやってきたので……</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/29/222048/</link>
      <pubDate>Thu, 29 Nov 2012 22:20:48 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/29/222048/</guid>
      <description>う結構前の話になりますが、WebMatrix 2 に2度目のアップデートが配信されました。
  Microsoft WebMatrix 2 Refresh 2 for Windows 8」というのだそうです。どこが変わったのか全然わからなかったので、ただ単にぼへーっとみていたのですが……（更新点をどこかに書いていてくれたら、職権みたいなものを濫用したりして、どこかのコーナーにぶち込んでアレしてこうしてできるのにさ！！）
  ういえば、さて、WebMatrix で OAuth 認証を……Σ(ﾟдﾟlll)ｶﾞｰﾝ - だるろぐ なんかが解決されているかもしれないなーなどとふと思いつき、再度チャレンジしてみました。WebMatrix で Facebook や Twitter へのログインをサポートする便利なライブラリがあるんですが、前回試したときは NuGet が古いといわれてインストールできなかったんですよね。
      果は……成功！　まぁ、もしかしたら NuGet パッケージ側に修正が入ったのかもしれず、WebMatrix のアップデートのおかげってわけではないのかもしれませんけど……。うわぁ、もう、何しちゃおっかな！　ネタを考えないと。</description>
    </item>
    
    <item>
      <title>WebMatrix で数式を表現する（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/16/044615/</link>
      <pubDate>Fri, 16 Nov 2012 04:46:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/16/044615/</guid>
      <description>WebMatrix で数式を表現する（１） - だるろぐ の続き。前回の方法は、Google の気分次第でいつでも廃止されちゃいます。というわけでもう少し調べたところ、MathJax.js という素敵な JavaScript ライブラリがあるそうなので、こっちを使うほうがいいのかも。
http://www.mathjax.org/MathJaxの使い方たとえばこんな感じ。  br/&amp;gt;
# Default.cshtml@{}&amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;script src=&amp;#34;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&amp;#34;&amp;gt;&amp;amp;lt;/script&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;\(\sum_{n=1}^\infty \frac{1}{n^2} = \frac{\pi^2}{6}\)&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```\(……\) で囲まれた部分が TeX 記法の数式として扱われ、文系人間にも読める形へ変換されます。もはや WebMatrix （ASP.NET Web Page）である必要すらない、とても汎用的な方法ですね！難点と言えば、複雑怪奇ゲロゲロな HTML タグが吐き出されることと、ちょっと余計な機能が多すぎるかな、といった点でしょうか。ほとんど難癖に近いですけれど。あと思いつくのは &amp;lt;a href=&amp;#34;http://blogs.wankuma.com/pizyumi/archive/2012/05/19/271826.aspx&amp;#34;&amp;gt;while(true);&amp;lt;/a&amp;gt; のような方法を利用して、サーバー側でレンダリングする方法でしょうか。そっちのほうが WebMatrix とは思いますが、ちょっとめんどくさいですね。</description>
    </item>
    
    <item>
      <title>WebMatrix で数式を表現する（１）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/16/042840/</link>
      <pubDate>Fri, 16 Nov 2012 04:28:40 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/16/042840/</guid>
      <description>まず考えられる方法は Google Chart Tools — Google Developers を利用することです。TeX の数式を画像ファイルに変換してくれます。
Mathematical Formulas - Infographics (Deprecated) — Google DevelopersDeprecated（非推奨）になっているのが気になりますけれど、まぁ、使えなくなるまで使えばいいんじゃないでしょうか。TeX による数式表現は業界標準（？）でもあるんで、万が一使えなくなってもいろいろ対処法はあるかと。あと、はてな記法でも使えるので覚えておくと使うことがあるかもしれない。必要なパラメーターは、cht=txchl=DATAで、DATA は TeX による数式表現を URL エンコードしたものになります。たとえばこんな感じ。```html# Default.cshtml@{
}
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;title&amp;gt;マイ サイトのタイトル&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;quot;~/favicon.ico&amp;rdquo; rel=&amp;quot;shortcut icon&amp;rdquo; type=&amp;quot;image/x-icon&amp;rdquo; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;img src=&amp;quot;http://chart.apis.google.com/chart?cht=tx&amp;amp;chl=@UrlEncode(@&amp;quot;\bar{H}{n+2}(x) = \sqrt{\frac{2}{n+2}} x \bar{H}{n+1}(x) \sqrt{\frac{n+1}{n+2}} \bar{H}_n(x)&amp;quot;);&amp;rdquo; /&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;\hoge：文字 hoge の埋め込み（\alpha で α）&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;\hoge{}：引数をとって hoge る（\sqrt{0} なら √ {0}、\frac{0}{1} なら分数 {0} / {1} ）&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;^{Hoge}：上付き文字（指数とか）&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;_{hoge}：下付き文字（添え字とか）&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;の4つだけ覚えている。あとはググる。&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### ヘルパー化さて、毎回イメージタグを書くのは不毛なので、これをヘルパー化することを考えましょう。たとえばこんな感じ。```html#App_Code\GoogleChart.</description>
    </item>
    
    <item>
      <title>Yahoo! の電力使用状況 API を試してみる。</title>
      <link>https://blog.daruyanagi.jp/entry/2012/11/02/192820/</link>
      <pubDate>Fri, 02 Nov 2012 19:28:20 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/11/02/192820/</guid>
      <description>次の Windows Store アプリのネタ、どうしようかなぁ……などと考えていたのだけど、まだトーストへプッシュ通知するアプリを試していなかった。冬はまた電力需給が逼迫しそうなので、ヤバくなったらデスクトップへ通知してくれるアプリなんかいいかもしれない。それにはまず、API の使い方を勉強しなきゃいけない。震災関連情報:電力使用状況API - Yahoo!デベロッパーネットワーク### とりあえずアプリの登録API キーをもらう。名前は適当に「Unagi（うなぎ）」にした。### サンプルコードを試すするとサンプルコードが吐き出された。これをぺったんこすればそのまま動くらしい。ちょっと拍子抜けだ。試しに WebMatrix でそのサンプルコードを貼り付けてみた。動いたし。HTML + JavaScript で簡単に作れるのならば、ストアアプリも HTML プロジェクトで作るといいのかもしれない。</description>
    </item>
    
    <item>
      <title>Windows Azure Web サイトが .NET Framework 4.5 に対応したそうなので、女の子を落としてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/31/210319/</link>
      <pubDate>Wed, 31 Oct 2012 21:03:19 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/31/210319/</guid>
      <description>Windows Azure Web サイト にて .NET 4.5 アプリケーションが配置可能になり、また Windows Azure クラウドサービスでも Windows Azure SDK 1.8 にて .NET Framework 4.5 および Guest OS 3.0 (Windows Server 2012 互換) のテンプレートが追加されています。2012 年 10 月の Windows Azure 一斉アップデート : .NET 4.5 ＆ Windows Sever 2012 対応、SDK 1.8 リリース、管理ポータル日本語対応 – 青い空の向こうへ Windows Azure Web サイトが .NET Framework 4.5 に対応したらしい。ついでに、管理ポータルが日本語に対応したそうな。ってことはですよ。_WebMatrix で女の子を落とす - だるろぐ をWindows Azure Web サイトへ配置できる！つまり、「Windows Azure で女の子が落せる」わけです。「親方！　空から女の子が！」_ってヤツですね！　なんと胸が熱い……。</description>
    </item>
    
    <item>
      <title>C# も神だった！　（もちろん、WebMatrix も神）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/31/194222/</link>
      <pubDate>Wed, 31 Oct 2012 19:42:22 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/31/194222/</guid>
      <description>0.1を10回足してみた。 PHPでの結果、１ JavaScriptでの結果、 0.9999999999999999 Pythonでの結果、0.9999999999999999 Rubyでの結果、1.0 Haskellでの結果0.9999999999999999 結論、PHPは神、その次、Ruby
 0.1を10回足してみた結果PHPが神と言う事が判明しました | WhiteHackerzBlog ハッカー養成学院 公式ブログ 何がいいたいのかよくわかんないのだけど、とりあえず C# で試してみた。
using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace ConsoleApplication1{class Program{static void Main(string[] args){Console.WriteLine(0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1);Console.ReadKey();}}}```&amp;lt;img src=&amp;#34;http://cdn-ak.f.st-hatena.com/images/fotolife/d/daruyanagi/20121031/20121031193448.png&amp;#34; alt=&amp;#34;f:id:daruyanagi:20121031193448p:plain&amp;#34; title=&amp;#34;f:id:daruyanagi:20121031193448p:plain&amp;#34; class=&amp;#34;hatena-fotolife&amp;#34;/&amp;gt;結論、**C# も神**。&amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt;### おまけ&amp;lt;img src=&amp;#34;http://cdn-ak.</description>
    </item>
    
    <item>
      <title>WebMatrix で女の子を落とす</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/20/213231/</link>
      <pubDate>Sat, 20 Oct 2012 21:32:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/20/213231/</guid>
      <description>wget http://localhost/onnnanoko.zip で女の子落とせる
&amp;mdash; Be玉🥀🐝🐈🖤🦔 (@BeMarble) October 19, 2012  れは羨ましい！　わしも女の子落としたい！――できれば、WebMatrix で。
### ヤりたいことまぁ、あらかじめ女の子を Zip で固めておいてアクセスし、「ほら、落ちてきました！」でもいいんだけど、せっかく WebMatrix でやるんだから圧縮ぐらいはオンデマンドでやってみたい。というわけで、http:// localhost: **** へアクセスするとGrirls フォルダに入っている女の子たちがZip でまるごと圧縮されて落ちてくる！（onnanoko.zip）が今回の目標。### 何も考えずに書いてみる```cs#Default.cshtml /* 全部消して以下のコードに置き換える */@using System.IO @using System.IO.Compression
@{ string dir = Server.MapPath(&amp;ldquo;~/Girls&amp;rdquo;); string zip = Server.MapPath(&amp;ldquo;~/Onnanoko.zip&amp;rdquo;);
// ~/Girls を ~/Onnanoko.zip へ圧縮ZipFile.CreateFromDirectory(dir, zip);// ~/Onnanoko.zip をダウンロードResponse.Redirect(&amp;quot;~/Onnanoko.zip&amp;quot;); }
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### .NET Framework 4.</description>
    </item>
    
    <item>
      <title>WebMatrix で PDF を出力</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/17/224555/</link>
      <pubDate>Wed, 17 Oct 2012 22:45:55 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/17/224555/</guid>
      <description>RazorPDFはASP.NET MVCのRazor ViewEngineを利用してPDFファイルを出力します。 ViewにはiTextXMLというXMLをPDFに変換するライブラリーを使用します。 もともとSparkというViewEngineにあった機能を移植したものになります。 ぱっと探してみましたけど、ソースコードがどうやら公開されていないですね。
 ASP.NET MVCでPDFを出力する（RazorPDF） « 84zume Works Razor と XML の組み合わせで PDF ドキュメントを出力できる。素敵だなぁ。ASP.NET MVC 向けなので、WebMatrix（ASP.NET Web Page）ではちょっと使えなさそうなのが残念だけど。でも、PDF を吐くだけだったら WebMatrix でもできるよ！（対抗意識調べてみると、「iTextSharp」というライブラリを使えばよさそう。ラッキーなことに NuGet も用意されていて、ライブラリのインストール自体は簡単。いつも通り、ASP.NET の「空のサイト」テンプレートでごにょごにょとサンプルを書いてみた。
# Default.cshtml@using iTextSharp.text@using iTextSharp.text.pdf@{// ドキュメントを作成 Document doc = new Document();// 作成したドキュメントと Response.OutputStream を // 結び付ける Writer オブジェクトを取得 PdfWriter.GetInstance(doc, Response.OutputStream);// 開け、ゴマ！ doc.Open();// あとは、チャプターを追加してみたり…… var p1 = new Paragraph(&amp;#34;Chapter 1.</description>
    </item>
    
    <item>
      <title>WebMatrixの拡張機能を作るぜー</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/12/223708/</link>
      <pubDate>Fri, 12 Oct 2012 22:37:08 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/12/223708/</guid>
      <description>だるさんより先に WebMatrix の拡張機能を作るか2012-10-12 15:51:09 via みについいや、それはそれでだいぶうれしいのだけど、「WebMatrixの拡張機能を作るぜー」をブログネタにしようと思ってたのに、書くことがなくなってしまう！というわけで、準備編だけでも書いて唾をつけておこうかなーと思っていたのだけど。WebMatrix 2 の拡張機能を作成する (1) - はじめに - しばやん雑記WebMatrix 2 の拡張機能を作成する (2) - IExtension と MEF - しばやん雑記WebMatrix 2 の拡張機能を作成する (3) - 通知・ダイアログ - しばやん雑記WebMatrix 2 の拡張機能を作成する (4) - リボン UI - しばやん雑記もう書いてあるやん。そういえば昔に読んだ気がするわ（爆&amp;gt;次回はダッシュボードの拡張について説明したいと思います。お疲れ様でした。 から300日以上経っているのは気にしない。
### WebMatrix Gallery@shibayan の記事から変わった点と言えば、WebMatrix Gallery という素敵なサイトができたことぐらいかな。WebMatrix Gallery に開発に必要なドキュメントがまとめられているので、目を通すとよいでしょう。それだけではなんなので、そのなかからいくつかつまんでみたいと思います。#### 拡張機能でできること&amp;gt;Available extensibility points: Look up the site&#39;s local path, URL, and application identifier Look up the currently active workspace (Site, Files, Databases, or Reports) Add items to the Site workspace dashboard Add groups and buttons to the ribbon Add a dialog box Add a shortcut menu for when a user right-clicks a file in the Files workspace Add status information to the notification bar In the editor, get and modify selected text in the active open file In the editor, get the location of the insertion point and insert text in the active open file</description>
    </item>
    
    <item>
      <title>WebMatrix/ASP.NET Web Pages で Jekyll っぽいものを</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/09/232117/</link>
      <pubDate>Tue, 09 Oct 2012 23:21:17 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/09/232117/</guid>
      <description>GitHub - jekyll/jekyll: Jekyll is a blog-aware static site generator in Ruby というのは、Markdown ドキュメントを置いておくとそれを HTML に変換しておいてくれる静的コンテンツの生成システムらしい。Jekyll ドキュメントはこんなかんじ。
---layout: posttitle: テスト投稿タイトルdate: 2012-04-01 09:00:00category : サンプルtags : [intro, 初心者, jekyll, tutorial]---テスト投稿本文- a- b- c[http://daruyanagi.net](http://daruyanagi.net/)```Markdown テキストの先頭に YAML Front-Matter と呼ばれる設定を書いておけば、タイトル・レイアウト・投稿日時・カテゴリ・タグといったメタデータを付与することもできる。なんだか便利臭がプンプンするぜ。さて、これを WebMatrix で HTML ドキュメントに変換してみようというのが今日のお題。&amp;lt;a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/09/27/213159&amp;quot;&amp;gt;SignalR + WebMatrix でサーバーフォルダの監視を行ってみる - だるろぐ&amp;lt;/a&amp;gt; などと組み合わせたら面白いものができそうな気がする。&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### 必要なライブラリ&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;MarkdownSharp&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;YamlSerializer for .NET（&amp;lt;a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/10/07/113945&amp;quot;&amp;gt;WebMatrix/ASP.NET Web Pages で YAML を扱う - だるろぐ&amp;lt;/a&amp;gt;）&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;どちらも NuGet で取得できる。&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### サンプルコード先ほどの Jekyll ドキュメントを ~/Default.</description>
    </item>
    
    <item>
      <title>WebMatrix/ASP.NET Web Pages で YAML を扱う</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/07/113945/</link>
      <pubDate>Sun, 07 Oct 2012 11:39:45 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/07/113945/</guid>
      <description>ちょっと YAML を使いたいなーというシーンがあったので、いろいろ調べたみた。
### YAML って？&amp;gt;YAML は XML よりも読みやすく、書きやすく、JSON よりも型にうるさく、しかも自由度がある、Ruby 使い達に人気の(?) データ記述形式です。 ほんとう？　それを確かめるためにちょっと比較してみました。例は XMLの論考: YAMLはXMLに改良を加える のものをベースに、XML-JSON相互変換ツール - Bluehawk&#39;s lab. で作成した JSON 形式のものを追加してあります。
#### XML で表現した場合```xmlxml version=&#34;1.0&#34;?id=&#34;kramnik&#34;name=&#34;Vladimir Kramnik&#34;rating=&#34;2700&#34;status=&#34;GM&#34; /id=&#34;fritz&#34;name=&#34;Deep Fritz&#34;rating=&#34;2700&#34;status=&#34;Computer&#34; /id=&#34;mertz&#34;name=&#34;David Mertz&#34;rating=&#34;1400&#34;status=&#34;Amateur&#34; /  2002-10-04 refid=&amp;quot;fritz&amp;rdquo; /&amp;gt; refid=&amp;quot;kramnik&amp;rdquo; /&amp;gt; Draw
&amp;lt;match&amp;gt;&amp;lt;/match&amp;gt;&amp;lt;date&amp;gt;&amp;lt;/date&amp;gt;2002-10-06refid=&amp;quot;kramnik&amp;quot; /&amp;gt;refid=&amp;quot;fritz&amp;quot; /&amp;gt;&amp;lt;result&amp;gt;&amp;lt;/result&amp;gt;White &amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### JSON で表現した場合```{&amp;quot;club&amp;quot;: {&amp;quot;players&amp;quot;: {&amp;quot;player&amp;quot;: [{&amp;quot;-id&amp;quot;: &amp;quot;kramnik&amp;quot;,&amp;quot;-name&amp;quot;: &amp;quot;Vladimir Kramnik&amp;quot;,&amp;quot;-rating&amp;quot;: &amp;quot;2700&amp;quot;,&amp;quot;-status&amp;quot;: &amp;quot;GM&amp;quot;},{&amp;quot;-id&amp;quot;: &amp;quot;fritz&amp;quot;,&amp;quot;-name&amp;quot;: &amp;quot;Deep Fritz&amp;quot;,&amp;quot;-rating&amp;quot;: &amp;quot;2700&amp;quot;,&amp;quot;-status&amp;quot;: &amp;quot;Computer&amp;quot;},{&amp;quot;-id&amp;quot;: &amp;quot;mertz&amp;quot;,&amp;quot;-name&amp;quot;: &amp;quot;David Mertz&amp;quot;,&amp;quot;-rating&amp;quot;: &amp;quot;1400&amp;quot;,&amp;quot;-status&amp;quot;: &amp;quot;Amateur&amp;quot;}]},&amp;quot;matches&amp;quot;: {&amp;quot;match&amp;quot;: [{&amp;quot;Date&amp;quot;: &amp;quot;2002-10-04&amp;quot;,&amp;quot;White&amp;quot;: { &amp;quot;-refid&amp;quot;: &amp;quot;fritz&amp;quot; },&amp;quot;Black&amp;quot;: { &amp;quot;-refid&amp;quot;: &amp;quot;kramnik&amp;quot; },&amp;quot;Result&amp;quot;: &amp;quot;Draw&amp;quot;},{&amp;quot;Date&amp;quot;: &amp;quot;2002-10-06&amp;quot;,&amp;quot;White&amp;quot;: { &amp;quot;-refid&amp;quot;: &amp;quot;kramnik&amp;quot; },&amp;quot;Black&amp;quot;: { &amp;quot;-refid&amp;quot;: &amp;quot;fritz&amp;quot; },&amp;quot;Result&amp;quot;: &amp;quot;White&amp;quot;}]}}}```ネストが深い。JavaScript との相性が抜群だが、いろいろユルい部分も多い。&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### YAML で表現した場合```yaml---players:Vladimir Kramnik: &amp;amp;amp;kramnikrating: 2700status: GMDeep Fritz: &amp;amp;amp;fritzrating: 2700status: ComputerDavid Mertz: &amp;amp;amp;mertzrating: 1400status: Amateurmatches:-Date: 2002-10-04White: *fritzBlack: *kramnikResult: Draw-Date: 2002-10-06White: *kramnikBlack: *fritzResult: White```タグがないし、ネストも深くないのでスッキリ。ただ、構造化データを記述する以外の用途には向かない。あと、参照の仕組み（アンカーとエイリアス、アドレスとポインタのようなもの）をもっているのがいい。これって、データベースをテキストに書きだしたり、オブジェクトをシリアライズするときにも便利だよね。&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://jp.</description>
    </item>
    
    <item>
      <title>未来の JavaScript を先取りする TypeScript</title>
      <link>https://blog.daruyanagi.jp/entry/2012/10/02/204834/</link>
      <pubDate>Tue, 02 Oct 2012 20:48:34 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/10/02/204834/</guid>
      <description>&amp;gt;Today, we’re introducing a new programming language that solves a very specific problem – getting JavaScript development to scale. That language is TypeScript. You can learn more about the TypeScript project, download an early preview, read and discuss the language specification, explore the online playground, and peruse the source of the compiler (on the TypeScript project site on CodePlex, with git).TypeScript: JavaScript Development at Application Scale – Somasegar&amp;amp;#39;s blog たまにこのブログに載せるコードでもわかるように、わしは JavaScript があんまりわかっていない。見様見真似で jQuery 使ったりするけれど、基本的なことがわかっていなさ過ぎて、キレイにモジュール化して書くことができない。だから、たくさん書くとすぐに破たんする。でも、TypeScript だったらちょっと何とかなるんじゃないか。そんな印象を受けた。なにより、JavaScript からそんなに離れていないのがいい。TypeScript は ECMAScript 5 のスーパーセットになっていて、付け足された部分も ECMAScript 6 で勧告されている仕様を先取りした形になっている。つまり、TypeScript というのは_未来の JavaScript を今の JavaScript へコンパイルする言語_なんだな。今までの知識が多少なりとも役に立つし、新たに勉強してもその努力が無駄になることはあるまい*1。そう考えると、俄然興味がわいてしまう。</description>
    </item>
    
    <item>
      <title>SignalR &#43; WebMatrix でサーバーフォルダの監視を行ってみる</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/27/213159/</link>
      <pubDate>Thu, 27 Sep 2012 21:31:59 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/27/213159/</guid>
      <description>SignalR の面白い使い方ってないかなーと思ってたのだけど、たとえば誰かがファイルをアップロードした時、同時接続している人たちにそれを知らせられたら面白くないかな？　と思いついた。さっそくやってみる。自分の作ったサンプルコード（SignalR Deep Dive ! に参加してきた＋WebMatrix で SignalR 動かしてみた - だるろぐ）をコピペして、必要な処理を足して、要らない部分を消して……以下のようなコードを書いてみた。
# ~/App_Code/SampleHub.csusing SignalR.Hubs;using System.IO;[HubName(&amp;#34;sample&amp;#34;)]public class SampleHub : Hub{public SampleHub(){var watcher = new FileSystemWatcher();watcher.Path = System.Web.HttpContext.Current.Server.MapPath(@&amp;#34;~/_Documents&amp;#34;);watcher.Filter = &amp;#34;*.txt&amp;#34;;watcher.NotifyFilter = NotifyFilters.FileName| NotifyFilters.DirectoryName| NotifyFilters.LastWrite;watcher.IncludeSubdirectories = false;watcher.Changed +=(o, s) =&amp;gt; { Clients.Echo(&amp;#34;なんかかわったで&amp;#34;); };watcher.Created +=(o, s) =&amp;gt; { Clients.Echo(&amp;#34;あたらしいのできたで&amp;#34;); };watcher.Deleted +=(o, s) =&amp;gt; { Clients.</description>
    </item>
    
    <item>
      <title>CSS / Javascript の Bunlde と Minify を WebMatrix で利用する（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/15/093030/</link>
      <pubDate>Sat, 15 Sep 2012 09:30:30 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/15/093030/</guid>
      <description>@chack411 さん曰く、 http://nuget.org/packages/Microsoft.AspNet.Web.Optimization を使うのが正しいそうです（ありがとうございます！）。また後日試してみましょう。CSS / Javascript の Bunlde と Minify を WebMatrix で利用する - だるろぐ というわけで試してみたよ。
### NuGet のインストール  言葉は「Optimization」！　検索で出てきた2番目の「Microsoft ASP.NET Web Optimization Framework」をインストールしよう。そうなんだ……前回は何も考えずに一番上をいれていたんだけど、これはどうやらディスコンみたいなんだ。話は変わるけど、NuGet で使いにくいのは、
どれを使うべきかどうやって使うのかがわかんないことだと思う。前者は［開発終了］フラグなんかをつけられるといいと思う*1し、評価システムがあれば助かると思った。後者は NuGet パッケージのルートに Markdown ファイルを置くだけで Web ページに簡単な ReadMe を表示できるとか*2、そういう仕組みがあればいいのかなぁ、と思う。まぁ、自分の NuGet に満足な（英語の！）解説を付けていない人が言えることではないけれど。  存関係で入ってくる「WebGrease」は、Minify *3を行うコマンドラインツールみたい。http://kenhaines.net/post/2012/06/09/WebGrease-As-seen-in-Visual-Studio-2012.aspxMicrosoft の中の人が作ってるみたいだね。
### 基本的な使い方```html# ~/Views/Shared/_SiteLayout.cshtml@using System.Web.Optimization // Web.config いじれば要らないかな
@{ // Script をバンドル BundleTable.Bundles.Add( new ScriptBundle(&amp;ldquo;~/Scripts/jQuery&amp;rdquo;) .</description>
    </item>
    
    <item>
      <title>WebMatrix 2 でレスポンシブな CSS グリッドを作ってみる</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/14/074439/</link>
      <pubDate>Fri, 14 Sep 2012 07:44:39 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/14/074439/</guid>
      <description>ebMatrix 2 は iPhone での見栄えも簡単にチェックできてなかなかいい。
### CSS グリッド最近、Twitter Bootstrap は大げさすぎるなぁ、もうちょっと軽量のグリッドシステムないかな、と思っていたのだけど、こういうのを見つけた。http://webdesignrecipes.com/css-grid-system-layout/ Complex Grid Example - JSFiddleいい感じかもしれない。```css.container { width: 940px; margin: 0 auto;}.grid1, .grid2, .grid3, .grid4, .grid5, .grid6, .grid7, .grid8, .grid9, .grid10, .grid11 {float: left;display: inline;margin-left: 20px;}.grid1 {width: 60px;}.grid2 {width: 140px;}.grid3 {width: 220px;}.grid4 {width: 300px;}.grid5 {width: 380px;}.grid6 {width: 460px;}.grid7 {width: 540px;}.</description>
    </item>
    
    <item>
      <title>DummyImage 1.0.0</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/11/070914/</link>
      <pubDate>Tue, 11 Sep 2012 07:09:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/11/070914/</guid>
      <description>ダミーイメージがもらえなくて激怒したので WebMatrix でスマートに解決してみたけど一部激怒した - だるろぐ で作成したヘルパーを NuGet として公開しました。https://nuget.org/packages/DummyImage使い方は簡単！
  br/&amp;gt;
// 幅だけ指定すると 16:9 になります@DummyImage.GetHtml(300) // 好みの属性を与えられます@DummyImage.GetHtml(300, attrs: new { Alt = &amp;#34;Alt Txet&amp;#34;, })// あとは Intellisense でもみてカスタマイズしてください@DummyImage.GetHtml(300, backBrush: System.Drawing.Brushes.AliceBlue);```あと、各種広告や解像度で一般的なサイズをキーワードで指定することもできます。&amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt;#### Ad Sizes&amp;lt;table&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Keyword	&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Shortcuts	&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Dimensions	&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Regular Expression&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;mediumrectangle	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;medrect	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;300×250	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(med)\w+(rec\w+)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;squarepopup	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;sqrpop	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;250×250	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(s\w+pop)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;verticalrectangle	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;vertrec	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;240×400	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(ver)\w+(rec)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;largerectangle	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;lrgrec	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;336×280	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(large or lrg)(rec)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;rectangle	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;rec	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;180×150	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; ^(rec)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;popunder	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;pop	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;720×300	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(pop)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;fullbanner	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;fullban	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;468×60	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(f\w+ban)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;halfbanner	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;halfban	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;234×60	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(h\w+ban)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;microbar	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;mibar	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;88×31	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(m\w+bar)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;button1	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;but1	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;120×90	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(b\w+1)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;button2	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;but2	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;120×60	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(b\w+2)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;verticalbanner	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;vertban	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;120×240	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(ver\w+ban)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;squarebutton	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;sqrbut	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;125×125	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(s\w+but)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;leaderboard	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;leadbrd	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;728×90	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(lea\w+rd)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;wideskyscraper	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;wiskyscrpr	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;160×600	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(w\w+sk\w+r)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;skyscraper	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;skyscrpr	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;120×600	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(sk\w+r)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;halfpage	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;hpge	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;300×600	&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;^(h\w+g)&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;第一引数に string をとるオーバーロードがあるので、それにつっこんでください。```cs@DummyImage.</description>
    </item>
    
    <item>
      <title>CSS / Javascript の Bunlde と Minify を WebMatrix で利用する</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/10/062101/</link>
      <pubDate>Mon, 10 Sep 2012 06:21:01 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/10/062101/</guid>
      <description>ほんとは OAuth を早く試してみたいのだけれど……残念ながらこの通りなので。NuGet Gallery にいくとこのバージョンは存在するのだけど、何がおかしいのだろうか。とりあえず報告しておいた。
### Bunlde ＋ Minify ＝ Optimizationさてはて。というわけで、最後にやってみたかった CSS / Javascript の Bunlde とMinify を試してみる。 Minify はコードの可読性のためにもうけられたコメントや改行なんかを取っ払ってファイルサイズを小さくすること。 Bundle はヘルパーやパーシャルビューからメインテンプレートにリソースを登録可能にする CSS / Javascript の管理機能だと思えばいいと思う。ちいさなリソースをまとめて（Bunlde）ドバッと送信しちゃえば、多少パフォーマンスも上がるしねぇ。あと、 jQuery なんかはファイル名にバージョンナンバーが含まれていて、アップデートするたびに手動でリンクも書き換えなくちゃならないのだけど、そういう管理も少し楽になる。```bundles.Add(new ScriptBundle(&#34;~/bundles/jquery&#34;, jqueryCdnPath).Include(&#34;~/Scripts/jquery-{version}.js&#34;));```### 公式の Optimization ライブラリとはいえ、最後にしたのにはわけがあって……名前がコロコロ変わっているうえ、まだ v1.0 に到達していないというありさま（http://nuget.org/packages/microsoft.web.optimization）。WebMatrix からも一応（一番古いのを）使うことはできるのだけど……もう少し様子見が必要かな。今回はそのまま突っ切っちゃうけど、将来的にはこんな感じにできるんだよっていう参考程度に。 MVC 4 だったらもう使えるのかなぁ。### Microsoft.Web.Optimizationまず、Microsoft.Web.Optimization をインストール。```# ＿AppStart.cshtml@using Microsoft.Web.Optimization
@{ var csses = new Bundle(&amp;ldquo;~/css&amp;rdquo;, typeof(CssMinify)); // 仮想パス csses.AddDirectory(&amp;ldquo;~/Content/&amp;quot;, &amp;ldquo;*.css&amp;rdquo;, true); // ファイル登録 BundleTable.</description>
    </item>
    
    <item>
      <title>WebMatrix で LESS を使おう！（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/09/172243/</link>
      <pubDate>Sun, 09 Sep 2012 17:22:43 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/09/172243/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/09/03/093520&amp;quot;&amp;gt;WebMatrix でユーザー認証機能（5） ―― ロール - だるろぐ なんかで使っているラベル用の CSS は LESS で書いている。変数とか関数とか使えないと、この程度の CSS を書くだけで簡単に破たんできるぜ……。で、どうやって使うのかというと……例えば、
&amp;amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;マイ サイトのタイトル&amp;amp;lt;/title&amp;gt;&amp;amp;lt;link href=&amp;#34;~/favicon.ico&amp;#34; rel=&amp;#34;shortcut icon&amp;#34;type=&amp;#34;image/x-icon&amp;#34; /&amp;gt;&amp;amp;lt;link href=&amp;#34;~/Content/StyleSheet.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;type=&amp;#34;text/css&amp;#34; /&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;&amp;amp;lt;div class=&amp;#34;message error&amp;#34;&amp;gt;エラーが発生しました。 &amp;amp;lt;/div&amp;gt;&amp;amp;lt;div class=&amp;#34;message info&amp;#34;&amp;gt;お知らせが1件あります。 &amp;amp;lt;/div&amp;gt;&amp;amp;lt;div class=&amp;#34;message warning&amp;#34;&amp;gt;注意してください。 &amp;amp;lt;/div&amp;gt;&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```こんな cshtml があるとする。次に、新規作成のダイアログで［すべて］タブを選択し、LESS ファイルを作成する。  スは ~/Content/StyleSheet.less （css → less にするだけ）だよ。あとはどんどん書いていくんだぜ～！　保存するたんびに「OrangeBits Compiler」（後述）が CSS （~/Content/StyleSheet.css）へ変換してくれるから楽ちんでいい。```cssbody {font-family: Meiryo, sans-serif;}.</description>
    </item>
    
    <item>
      <title>WebMatrix 2 のために OS を再インストールした</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/09/145506/</link>
      <pubDate>Sun, 09 Sep 2012 14:55:06 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/09/145506/</guid>
      <description>br/&amp;gt;
「Microsoft WebMatrix 2」が正式版に……ガッデム／(^o^)＼ - だるろぐWebMatrix 2 RTM ファーストインプレッション - だるろぐうちの環境ではどうも WebMatrix 2 の調子が悪いので、メインPC の OS をクリーンインストール。ついでに Windows 7 から Windows 8 へしてみたところ、何の不自由もなく動きました ／(＾o＾)＼それにしてもなぜ動かなかったのだろう、と昨日実家に帰ってお肉を食べながら考えていたのだけど、もしかしたらこのせいかもしれない。  くまでも予想にすぎないのだけれど、Visual Studio 2012 のプレリリース版が入っていたりする場合は、ちゃんと削除してから入れたほうがいいのかも。IIS や ASP.NET Web ページ関連のコンポーネントは共通しているものが多いと思うので。</description>
    </item>
    
    <item>
      <title>WebMatrix 2 RTM ファーストインプレッション</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/08/045120/</link>
      <pubDate>Sat, 08 Sep 2012 04:51:20 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/08/045120/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/09/07/221315&amp;quot;&amp;gt;「Microsoft WebMatrix 2」が正式版に……ガッデム／(^o^)＼ - だるろぐ でファーストインプレッションをすっかり書くのを忘れていた。テンプレートからサイトが新規に作成できない問題はすでにフォーラムへ報告しておいたので、既存の Web サイトを開いてみてほかに気付いた点を。
### テキストエディターはかなりよくなった WebMatrix2はパフォーマンスがかなり改善されてます。ときどきやたら反応が重かった問題に対応されてますので、ぜひお試しを— 帝国兵 (@superriver) 2012年9月6日
 少し使ってみたけれど、クリップボードへのコピーでもたついたり、ときどきかなり遅くなったり、挙げ句の果てはクラッシュするといったエディター関連の問題はかなり解消されたみたい。
  br/&amp;gt;
&amp;gt;あと、［Alt］キーでメニューのナビゲーションが出るのだけれど、そっちにフォーカスがとられて矩形選択や IME の切り替えに支障が出るのもなおしてほしいところかな。WebMatrix + ASP.NET Web Pages でキレイにコーディングしたい（5） - だるろぐ あんまり期待していなかったこの問題も見事に解消されていた。
  ME の切り替えで［Alt］＋［~］を利用しても、メニューナビゲーションにキーボードのフォーカスが奪われることがなくなった。最悪「そっちのキーバインド変えれば済むだろ」と言われるのを覚悟していたので、ちょっと嬉しい。
### ［ギャラリー］ボタンの改良  ャラリーボタンに「拡張機能」と「NuGet」がまとめられた。ただ、これは［ファイル］セクションを開いている場合のみ。［サイト］セクションを開いているとドロップダウンが現れず、「拡張機能ギャラリー」がいきなり起動する。この動作の違いは、ちょっと戸惑う。最初だけだけどね。
### リモートサイトの設定  からこんなんだっけ？　ちょっと自信はないけれど、わかりやすくなったと思う。 WebMatrix はもう完全に“Widows Azure Web Sites のクライアント”という位置づけなのだなぁ。
### コンポーネント・ライブラリのアップデート  リース候補版で作った Web サイトを開くと、“APS.NET Web ページ”をアップデートするかと聞かれる。どちらも試してみたけれど、問題なくアップデートできる。</description>
    </item>
    
    <item>
      <title>「Microsoft WebMatrix 2」が正式版に……ガッデム／(^o^)＼</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/07/221315/</link>
      <pubDate>Fri, 07 Sep 2012 22:13:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/07/221315/</guid>
      <description>今年 6 月、WebMatrix の最新リリースを Windows Azure Web サイトと組み合わせて、PHP サイトの作成に使用できるようになったことをブログ記事でお伝えしました。それに続き、今回、WebMatrix 2 がリリースされました。この記事では、主な機能の概要をご紹介すると共に、Windows Azure との統合についてご説明します。Windows Azure 対応の新機能を搭載した WebMatrix 2 をリリース - Windows Azure Team Blog (Japan) - Site Home - MSDN Blogs やったー＼(^o^)／心待ちにしていたのでいち早くお仕事としてお伝えしたかったのですが、今日はあいにくお休みでした。ほかの媒体のニュースを読んで楽しんでいただければと思います。こんなに愛しているのに！　正直ちょっと悲しい。はてなブログに引っ越してからは Google 検索での流入がほぼゼロ1、「WebMatrix」でぐぐってもヒットするのは75枚目という**“Google から見捨てられたブログ”の異名をもつ“だるろぐ”**2では、あまり速報するモチベーションもあがらないしね。今日はお酒飲んで本読んで、掃除して、洗濯して、寝た。さすがに悲しかったので、少しは検索順位があがると寂しさが紛れるなぁと思い、さっき Google ウェブマスターツールに登録してきました。おれも WebMatrix 2 正式版がやっとリリースされました - しばやん雑記 みたいに**「WebMatrix メイド」**で検索に引っかかるようにがんばろうかな。さしずめ**「WebMatrix ホモ」**あたりで頑張るか*3。で、肝心の「WebMatrix 2」ですけど。Web Platform Installer での表記が“リリース候補”のままだったり、新規テンプレートが作れなかったり、ちょっと悲しいことになっている。
DownloadManager Information: 0 : Adding product &amp;amp;#39;EmptySite&amp;amp;#39; to the cartDownloadManager Information: 0 : Starting install sequenceDownloadManager Information: 0 : Using cached file at C:\Users\Hidetoshi Yanagi\AppData\Local\Microsoft\Web Platform Installer\installers\EmptySite\***\EmptySite_ja.</description>
    </item>
    
    <item>
      <title>Twitter の埋め込みタイムラインを WebMatrix で利用する</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/07/212936/</link>
      <pubDate>Fri, 07 Sep 2012 21:29:36 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/07/212936/</guid>
      <description>br/&amp;gt;
&amp;gt;サイトの上に簡単にTwitterのタイムラインを表示できるツール「埋め込みタイムライン」の提供を始めました。ブログの隣に表示したり、＃ハッシュタグを使ったイベントのページに表示したり、スポーツの試合ページに参加選手のリストを使って選手のツイートを表示するなど、サイト上にリアルタイムのツイートを加えることができます。http://blog.jp.twitter.com/2012/09/blog-post.html   っそく WebMatrix 2 RC版（！）で試してみよう。Login on Twitter でウィジェットを作って cshtml へ貼り付けてみる。
### ちょっとした注意  *ガッデム／(^o^)＼**貼りつけたスクリプトに @ が含まれているときは注意だね。 Razor はこれを処理すべき変数・メソッドと解釈するので、当然エラーになる。 @ をそのまま出力したい場合は、
@@daruyanagi // -&amp;gt; &amp;quot;@daruyanagi&amp;quot; ```と @ を重ねて書けばいい。&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### もちろんヘルパーにしてみる……と思ったけれど、結局わざわざウィジェットページへ行かなければならないので、ヘルパーにしてもあまり美味しくないと思った。```cs# ~/App_Code/Twitter.EmbededTimeline.chtml@helper GetHtml(string id, string url, string text = null,int? width = null, int? height = null, string lang = null,string theme = null, string link_color = null,string[] related = null, string aria_polite = null){if (string.</description>
    </item>
    
    <item>
      <title>ダミーイメージがもらえなくて激怒したので WebMatrix でスマートに解決してみたけど一部激怒した</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/05/050157/</link>
      <pubDate>Wed, 05 Sep 2012 05:01:57 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/05/050157/</guid>
      <description>Web サイトのデザインを考えるとき、ダミーイメージは欠かせないよね。少なくとも、自分はそう。そんな悩める怠惰な子ブタたちのために、 http://dummyimage.com はある。こいつはパラメータを与えて URL を投げるだけで、いろんなサイズ・色のダミーイメージをじぇねれいと*1してくれるクールなサービスなんだ。
### もっとクールにでも、まさか WebMatrix を使っているおシャレさんのなかに、 &amp;lt;img src=&#34;htt... だなんて毎度いちいち手入力してるヤツはいないよな。もちろん、ヘルパーにしておいて自動補完機能に入力させるハズだ。機械でできることを手でやるのはアホのすることだ*2。```cs#~/App_Code/DummyImage.cshtml@helper GetHtml(string args, object attrs = null) { if (attrs != null) { attrs = string.Join(&amp;rdquo; &amp;ldquo;, attrs .GetType() .GetProperties() .Select(_ =&amp;gt; string.Format( &amp;ldquo;{0}=&amp;quot;{1}&amp;quot;&amp;quot;, _.Name, _.GetValue(attrs) ) ) ); } &amp;lt;img src=&amp;quot;http://www.dummyimage.com/@Html.Raw(@args)&amp;rdquo; @Html.Raw(attrs) /&amp;gt; }
```cs@DummyImage.GetHtml(&amp;quot;640x16:9&amp;quot;)```と書くだけ&amp;lt;a href=&amp;quot;#f3&amp;quot; name=&amp;quot;fn3&amp;quot; title=&amp;quot;実質的にはほとんど @ , dumm... , g, &amp;quot; 640x16:9&amp;quot;=&amp;quot;&amp;quot; と入力するだけ！&amp;quot;=&amp;quot;&amp;quot;&amp;gt;*3&amp;lt;/a&amp;gt;で、実行時に```cs&amp;amp;lt;img src=&amp;quot;http://www.dummyimage.com/640x16:9&amp;quot; /&amp;gt;```のような HTML コードへ展開される。画像タグに alt 属性をつけなければ瞬時に息絶える W3C 原理主義者や、 style を埋め込みたいなんていうわがままさんはこんな感じで書けばいい。```cs@DummyImage.</description>
    </item>
    
    <item>
      <title>さて、WebMatrix で OAuth 認証を……Σ(ﾟдﾟlll)ｶﾞｰﾝ</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/04/023414/</link>
      <pubDate>Tue, 04 Sep 2012 02:34:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/04/023414/</guid>
      <description>WebMatrix 2 では Twitter や Facebook など、外部サービスの OAuth 認証を使ってログインできるサイトも簡単に作れるらしい。というわけで試すことにした。いつもどおり Empty Site テンプレートから Webサイトを作成。ついで DotNetOpenAuth extension for ASP.NET (WebPages) を NuGet でインストール。ガッデム！／(^o^)＼ NuGet が古いらしいぞ。確かに Empty Site テンプレートに含まれるのは 1.6.2 と相当古い。とっくに 2.0 も出てるのにな。しかし、なんで［更新プログラム］のところに出てこないのだろう。自動でアップデートできないじゃないか。一度アンインストールして、再度インストールしてみるかな。&amp;gt;#### Dependencies Microsoft.AspNet.WebPages (≥ 2.0.20710.0 &amp;amp;&amp;amp; &amp;lt; 2.1) NuGet.Core (≥ 1.6.2 &amp;amp;&amp;amp; &amp;lt; 1.7)
 NuGet Gallery | Microsoft ASP.NET Web Pages 2 Administration 2.0.20713.0 ジーザス！／(^o^)＼ これが依存性地獄か！うまくいっているときには気にならないが、こういう状況になると WebMatrix に搭載されている NuGet クライアントは非常に非力かつ情報不足に感じられて、使うのが辛くなる。とりあえず、このパッケージが何をしているのかは知らんが、ぶっこ抜くことにした。なに、困ったら初めからやり直せば良い ( ｰ`дｰ´)ｷﾘｯ ＜失うものなどなにもないんだ！ウェルダン！＼(^o^)／ これで NuGet.Core のバージョンが 2.0.1 になった。これでもう一度インストールを……ゴッドイズデス！／(^o^)＼ NuGet.</description>
    </item>
    
    <item>
      <title>WebMatrix でユーザー認証機能（5） ―― ロール</title>
      <link>https://blog.daruyanagi.jp/entry/2012/09/03/093520/</link>
      <pubDate>Mon, 03 Sep 2012 09:35:20 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/09/03/093520/</guid>
      <description>br/&amp;gt;
WebMatrix でユーザー認証機能 ―― 準備編 - だるろぐWebMatrix でユーザー認証機能（2） ―― WebSecurityってどうやって使うんだ？ - だるろぐWebMatrix でユーザー認証機能（3） ―― なにはともあれユーザー登録しないと始まらん - だるろぐWebMatrix でユーザー認証機能（4） ―― ログインとログオフ - だるろぐとりあえずログイン機能があらかた実装できたけれど、これだとだれでもユーザーが作れてしまう。まぁ、そういうアプリもあるけど、“管理者”のみがユーザーを作成できるほうが望ましいこともある。そういった“管理者”権限を実現したいときにはどうするかというと、“ロール（Roles）”を使うんだな。### System.Web.Security.Rolesロールの作成方法については、ここらあたり（Adding Security and Membership to an ASP.NET Web Pages (Razor) Site | Microsoft Docs）が詳しい。その例だとロールの作成するためにデータベースを直接イジっていて、一瞬「あちゃー、コードでやろうと思ったら SQL 書かなきゃいけないのかな？」と思ってしまったけど、ちゃんと Roles を扱うクラスが用意されていた*1。http://msdn.microsoft.com/en-us/library/system.web.security.roles.aspxとりあえずさらっと目を通しておくとよさげ。#### Roles.RoleExists() / Roles.CreateRole()まず、 _AppStart.cshtml で“ロールがなければ作成する”という処理を追加してみた。```cs@{App.DATABASE = &#34;database&#34;; // &amp;lt;-- カッコ悪いし、App.TABLE_USERS = &#34;Users&#34;; // あとで静的クラスにまとめてApp.ROLE_ADMIN = &#34;</description>
    </item>
    
    <item>
      <title>SignalR を .NET（WPF）からも使ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/31/112958/</link>
      <pubDate>Fri, 31 Aug 2012 11:29:58 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/31/112958/</guid>
      <description>（SignalR 0.5.3 の）JavaScript のクライアントは .NET 向けの各種クライアントとほぼ同じ API となっています。SignalR 0.5.3 で変わった JavaScript クライアント - しばやん雑記 そういえば、前回（SignalR Deep Dive ! に参加してきた＋WebMatrix で SignalR 動かしてみた - だるろぐ）.NET から呼んでみるのを忘れてたよ。「ほぼ同じ」らしいのでこっちも試してみよう。WPF アプリケーションを作って、 NuGet で SignalR.Client をインストール。 Hub （サーバー側）のコードは前回のそのまま。
public partial class MainWindow : Window{HubConnection connection;IHubProxy sample;public MainWindow(){InitializeComponent();// サーバーに接続して sample ハブをげっと connection = new HubConnection(&amp;#34;http://localhost:63112/&amp;#34;);sample = connection.CreateProxy(&amp;#34;sample&amp;#34;);connection.Start(); /* この3つは順番を守ること！ */// sample ハブで Echo() が呼ばれたら…… sample.</description>
    </item>
    
    <item>
      <title>SignalR Deep Dive ! に参加してきた＋WebMatrix で SignalR 動かしてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/31/031730/</link>
      <pubDate>Fri, 31 Aug 2012 03:17:30 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/31/031730/</guid>
      <description>事を少し早くあがって、 @shibayan のリサイタルに参加してきました。最近ずっと眠れなくて、仕事中もずっと眠い状態だったけれど、結構面白かったので寝落ちせずにすんだよ（ぉ Video streaming by Ustream興味ある人は USTREAM をご覧あれ。わしもよくわからんけど、とりあえず SignalR （http://signalr.net/）というのは、
ASP.NET テクノロジをベースとした非同期でリアルタイムなサーバーとクライアントの双方向通信を実現するライブラリ、ってことでいいのかな。サーバーとクライアントの通信で利用される技術は、 SignalR が勝手にチョイスしてくれるみたい（モダンな環境なら WebSocket を、クラシカルな環境だったらポーリングを、ってな感じ）。詳しくはエロいひと、じゃなくて偉いひとに聞いて欲しい。ともあれ、忘れないうちにこれを WebMatrix で使ってみる。### サーバー側のコード```cs# ~/App_Code/SampleHub.csusing SignalR.Hubs; // &amp;lt;&amp;ndash; NuGet でインストールしる！
[HubName(&amp;ldquo;sample&amp;rdquo;)] // &amp;lt;&amp;ndash; あとで createProxy(&amp;ldquo;sample&amp;rdquo;) と使う public class SampleHub : Hub { private static string _message = &amp;ldquo;&amp;quot;;
private string Message{get { return _message; }set{_message = value;// 接続中のクライアントすべてに Echo() 命令を送るClients.</description>
    </item>
    
    <item>
      <title>寄り道： Rails の Flash っぽい機能を WebMatrix で使いたい（2） ―― @helper と @functions とわたし</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/30/040609/</link>
      <pubDate>Thu, 30 Aug 2012 04:06:09 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/30/040609/</guid>
      <description>寄り道： Rails の Flash っぽい機能を WebMatrix で使いたい - だるろぐ の話は続く。
# ~/_AppCode/Flash.cshtml@helper Read()/* Razor を書く */ {if (Session[&amp;#34;flash&amp;#34;] == null) { return; }// Razor では if 文の {} を省略できない。これ、マメな。 &amp;amp;lt;div class=&amp;#34;message info&amp;#34;&amp;gt;&amp;amp;lt;p&amp;gt;@Session[&amp;#34;flash&amp;#34;]&amp;amp;lt;/p&amp;gt;&amp;amp;lt;/div&amp;gt;Session[&amp;#34;flash&amp;#34;] = null;}@functions/* 通常の C# 構文を書く */ {public static void Write(string value){Session[&amp;#34;flash&amp;#34;] = value;}}```この @helper ってなんなんだろうな。便利なのはいいけれど、中身がわからないのは気持ち悪い。まずは Visual Studio のツールチップでのぞいてみた。  りあえず、 &amp;lt;code&amp;gt;@helper Hoge(args) {……}&amp;lt;/code&amp;gt; は &amp;lt;code&amp;gt;public static HelperResult Hoge(args) {……}&amp;lt;/code&amp;gt; （引数をとって HelperResult を返す＋なんらかの処理）ということのようだ。実際、 @helper Read() は @functions で表すこともできないことはない。```cs@functions{public static HelperResult Read(){return new HelperResult(w =&amp;gt;{if (Session[&amp;#34;flash&amp;#34;] == null) { return; }/* &amp;lt;div class=&amp;#34;message info&amp;#34;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;@Session[&amp;#34;flash&amp;#34;]&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt; */WriteLiteralTo(w, &amp;#34;\&amp;#34;message info\&amp;#34;&amp;gt;&amp;lt;p&amp;gt;&amp;#34;&amp;lt;/p&amp;gt;);WriteTo(w, Session[&amp;#34;flash&amp;#34;]); WriteLiteralTo(w, &amp;#34;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;#34;);Session[&amp;#34;flash&amp;#34;] = null;});}}```というわけで書いてみたのがこれ（参考：&amp;lt;a href=&amp;#34;http://shiba-yan.</description>
    </item>
    
    <item>
      <title>寄り道： Rails の Flash っぽい機能を WebMatrix で使いたい</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/29/201834/</link>
      <pubDate>Wed, 29 Aug 2012 20:18:34 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/29/201834/</guid>
      <description>Flash っていうのは、別に Adobe Flash Player のことなんかじゃなくて、
&amp;gt; ログイン時のウェルカムメッセージや、項目追加の成功通知など、ユーザに簡単な通知を行いたい時に利用する。 コントローラでflashメッセージを設定し、ビューで表示する。 flashは全体で見ればHash。あるキーに対する値としてメッセージを設定する。キーは自由に設定できるが、デフォルトとしてalertとnoticeがある。 設定したメッセージは、sessionに保存される。つまり、flashは、sessionを利用した機能の１つ。 普通のセッション変数では破棄するまで値は保持されるが、flash の場合は一度表示されるとアクション終了時に自動的に消去される。
 flashの使い方　〜Railsの基礎 - プログラマーkkの勉強/成長ブログ@ライブレボリューション というもの。ログアウト＋ホームへリダイレクトしたときに「Good bye!」って表示したい（でも、一度表示したら二度目からは表示しない）なんて場合、あるよね。ASP.NET Web Pages にもそういう仕組があるのかもしれないけれど、よくわからなかったので自分で実装してみた。本物の Flash はHash（C# なら Dictionary）らしいのだけれど、今回はそこまで高機能なのはいらないので、単に文字列を一つだけ保持することにする。
# Logout.cshtml@{WebSecurity.Logout();Session[&amp;#34;flash&amp;#34;] = &amp;#34;Good bye!&amp;#34;; // &amp;amp;lt;-- ココ！ Response.Redirect(Request[&amp;#34;ReturnUrl&amp;#34;] ?? &amp;#34;~/&amp;#34;);}```実装には Session を利用した。 Session[&amp;#34;flash&amp;#34;] にテキストを入れておけば、リダイレクトしたあとでも値を参照できる。```cs# ＿SiteLayout.cshtml&amp;amp;lt;body&amp;gt;@if (Session[&amp;#34;flash&amp;#34;] != null){&amp;amp;lt;div class=&amp;#34;message info&amp;#34;&amp;gt;&amp;amp;lt;p&amp;gt;@Session[&amp;#34;flash&amp;#34;]&amp;amp;lt;/p&amp;gt; // &amp;amp;lt;-- 読みだして…… &amp;amp;lt;/div&amp;gt;Session[&amp;#34;flash&amp;#34;] = null; // &amp;amp;lt;-- 消す！…… }@RenderBody()&amp;amp;lt;/body&amp;gt;```表示する側では、かならず Session[&amp;#34;flash&amp;#34;] をクリアしておく。これで Session[&amp;#34;flash&amp;#34;] の内容が表示されるのは一度きりになるはず。&amp;lt;img src=&amp;#34;http://cdn-ak.</description>
    </item>
    
    <item>
      <title>WebMatrix でユーザー認証機能（4） ―― ログインとログオフ</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/28/191129/</link>
      <pubDate>Tue, 28 Aug 2012 19:11:29 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/28/191129/</guid>
      <description>WebMatrix でユーザー認証機能（3） ―― なにはともあれユーザー登録しないと始まらん - だるろぐ で無事ユーザー登録ができ、ログインされた。という訳で今回はログアウトを実装しなければならない。
# Logout.cshtml@{WebSecurity.Logout();var returnUrl = Request.QueryString[&amp;#34;ReturnUrl&amp;#34;];Response.Redirect(returnUrl.IsEmpty() ? &amp;#34;~/&amp;#34; : returnUrl);}```おわり！　ほんとにこれだけだよ……。一応、 Logout?ReturnUrl=~/Account/Login なんかで ~/Account/Login へリダイレクトされるようにしてみたけど。ちなみに、ログイン処理は少し長くなった。```cs# Login.cshtml@{var name = &amp;#34;&amp;#34;;var password = &amp;#34;&amp;#34;;var rememberMe = true;Validation.RequireField(&amp;#34;name&amp;#34;, &amp;#34;You must specify an name address.&amp;#34;);Validation.RequireField(&amp;#34;password&amp;#34;, &amp;#34;You must specify a password.&amp;#34;);if (IsPost){name = Request.Form[&amp;#34;name&amp;#34;];password = Request.Form[&amp;#34;password&amp;#34;];rememberMe = Request.Form[&amp;#34;rememberMe&amp;#34;].AsBool();if (Validation.</description>
    </item>
    
    <item>
      <title>WebMatrix でユーザー認証機能（3） ―― なにはともあれユーザー登録しないと始まらん</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/25/003421/</link>
      <pubDate>Sat, 25 Aug 2012 00:34:21 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/25/003421/</guid>
      <description>br/&amp;gt;
WebMatrix でユーザー認証機能 ―― 準備編 - だるろぐWebMatrix でユーザー認証機能（2） ―― WebSecurityってどうやって使うんだ？ - だるろぐのんびりやっていこう。今回はユーザー登録するで。```cs@{var name = &#34;&#34;;var password = &#34;&#34;;var confirmPassword = &#34;&#34;;if (IsPost){name = Request.Form[&amp;quot;name&amp;quot;];password = Request.Form[&amp;quot;password&amp;quot;];confirmPassword = Request.Form[&amp;quot;confirmPassword&amp;quot;];// ここでバリデーション（値が妥当なものか検証）するif (Validation.IsValid()){if (WebSecurity.GetUserId(name) &amp;gt; -1){ModelState.AddFormError(&amp;quot;Username alredy exists&amp;quot;);}else{try{WebSecurity.CreateUserAndAccount(name, password, new { Name = name });WebSecurity.</description>
    </item>
    
    <item>
      <title>WebMatrix でユーザー認証機能（2） ―― WebSecurityってどうやって使うんだ？</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/24/105121/</link>
      <pubDate>Fri, 24 Aug 2012 10:51:21 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/24/105121/</guid>
      <description>さて、前回（WebMatrix でユーザー認証機能 ―― 準備編 - だるろぐ）準備した WebSecurity Helper ですけど、これってどうやって使うんでしょうね。ちょっとメタデータからプロパティやメソッドを引っ張ってみました。名前と引数をみるだけで使い方がだいたい分かる感じ。
using System;using System.Web;namespace WebMatrix.WebData{public static class WebSecurity{public static readonly string EnableSimpleMembershipKey;```WebSecurity は静的クラスです。“EnableSimpleMembershipKey”はよくわかりませんが、 readonly だしとくにわからなくても問題無さそう。 AppSetting から読み込んだキーを保存しているみたいですけどね。外部に公開してるんだから、どっかの外部クラスが使うんだろうか……。 ASP.NET の認証システムは全然わかってないけれど、おいおい解決していきたいです。```cspublic static int CurrentUserId { get; }public static string CurrentUserName { get; }public static bool HasUserId { get; }public static bool Initialized { get; }public static bool IsAuthenticated { get; }```お次はプロパティ群ですね。 CurrentUser に関するさまざまな情報を取得できます。 Initialized だけは &amp;lt;a href=&amp;#34;http://msdn.</description>
    </item>
    
    <item>
      <title>WebMatrix でユーザー認証機能 ―― 準備編</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/24/095023/</link>
      <pubDate>Fri, 24 Aug 2012 09:50:23 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/24/095023/</guid>
      <description>お次はユーザー認証機能に挑戦しますかね？　Webサイトでデータを扱うとき、ユーザー認証機能がなかったらだいぶ困る。というわけで、“Startar Site”テンプレートをみながら勉強しようかなぁ、と思ったのだけど……ナンテコッタイ／(^o^)＼　ソースを見てみたら文字化けしてたり改行が吹っ飛んでたりで、一部ソースコードがぶっ壊れていた。修正を試みたのだけれど、途中で「いや待て、“Empty Site”から自分で作ったほうが勉強になるかもしれない」と思い直し、まっさらなWebサイトを作ってユーザー認証機能を追加してみることにした。### データベースを作成まずはユーザー情報を格納するデータベースを作成。名前は……思いつかなかったから“database.sdf”でいいや。リネームした時のことを考えて、データベース名は App に格納しておくことにした。アプリケーションの起動時に実行される _AppStart.cshtml に記述しておく。```cs#_AppStart.cshtml@{ App.Database = &amp;ldquo;database&amp;rdquo;; // 拡張子は要らないっぽい }
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### ユーザー情報テーブルを作成次に、認証情報を保存しておくテーブルを作成する。 WebMatrix では WebSecurity Helper というお手軽な認証システムがあるらしい。“Startar Site”テンプレートでも利用されていたのでそれを使おう。 WebSecurity.InitializeDatabaseConnection() でユーザー情報を管理するテーブルが初期化されるみたい。```cs#_AppStart.cshtml@{App.Database = &amp;quot;database&amp;quot;;WebSecurity.InitializeDatabaseConnection(App.Database, // データベース名&amp;quot;Users&amp;quot;, // テーブル名&amp;quot;UserId&amp;quot;, // ID を格納するカラム&amp;quot;Name&amp;quot;, // 一意なユーザー名を格納するカラムtrue // テーブルがなかったら作れ);}```しかし、「WebSecurity などというクラスは知らない」と怒られてしまう。デフォルトでは入っていないのね……&amp;lt;img src=&amp;quot;http://cdn-ak.f.st-hatena.com/images/fotolife/d/daruyanagi/20120824/20120824093457.png&amp;quot; alt=&amp;quot;f:id:daruyanagi:20120824093457p:plain&amp;quot; title=&amp;quot;f:id:daruyanagi:20120824093457p:plain&amp;quot; class=&amp;quot;hatena-fotolife&amp;quot;/&amp;gt;“Startar Site”テンプレートを「Visual Studio」でみてみたら、 WebMatrix.WebData.dll というアセンブリが必要であるらしい。これもどうせ NuGet で取得できるんでしょ？ わかってる、わかってる！&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### Microsoft ASP.</description>
    </item>
    
    <item>
      <title>これまでのサンプルを NuGet パッケージにしてみました</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/22/073342/</link>
      <pubDate>Wed, 22 Aug 2012 07:33:42 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/22/073342/</guid>
      <description>WebMatrix でファイルのアップロード - だるろぐWebMatrix でファイルのアップロード（2） - だるろぐWebMatrix でファイルのアップロード（2） の補足 - だるろぐWebMatrix でファイルのアップロード（3） - FileUpload ヘルパーを使う - だるろぐ以上の内容を NuGet パッケージ（https://nuget.org/packages/DADIU/1.1.0）にしてみました*1。記事では端折った JavaScript なんかも含まれているので*2、もし興味があればみていただければと。### インストール方法  テンプレート］ボタンを押す。
  ンプレートを選択。好きなモノを選んでいいですが、試すだけなら“Empty Site”が無難ですね。
  ファイル］タブを選択。そうしないと［NuGet］ボタンが出てこないみたい*3。
  NuGet］ボタンを押す。
  ッケージの検索。検索結果はダウンロード数順になっているのかな？　かなり下の方にスクロールしないとでてこないです。もし検索されない場合はパッケージのソースも変えてみてください。コマンドラインでインストールできる方法も用意されたらいいですね*4。
  事パッケージを発見できたらインストール。パッケージ名いいのが思いつかなかったので、頭文字を並べただけです。
  回は依存パッケージのインストールも使ってみました（jQuery と HttpFileCollectionBaseExtension）。もしインストールされていない場合は自動で依存性が解決され、ダウンロード・セットアップされます。
  ンストールが成功（するといいな）！　いろいろファイルが追加されているはずです。
  ンプルは“DADIU.sample”にあるので、ブラウザーで実行してフォルダへアクセスしてください。対応ブラウザーは Google Chrome / FireFox （Opera/IE10？）です。「WebMatrix 2」ではインストール済みのブラウザーのなかから好きなブラウザーを選んで実行できるのが便利ですねぇ。
### これまでの記事のウソポイントぶっちゃけこのブログは結構ウソも書いています（ごめんなさい！）*5。あんまり完成度を意識してたら、アウトプットなんかできませんからね！*6　とはいえ、ほんとごめんなさい的な記述もあるので、気付いたところだけ直しておきます*7。#### NuGet Package Explorer  br/&amp;gt;</description>
    </item>
    
    <item>
      <title>NuGet Package Explorer で NuGet パッケージを作ってみた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/21/222147/</link>
      <pubDate>Tue, 21 Aug 2012 22:21:47 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/21/222147/</guid>
      <description>  NuGet Package Explorer*（http://npe.codeplex.com/）を使ってみたかったので、 WebMatrix でファイルのアップロード（3） - FileUpload ヘルパーを使う - だるろぐ で利用した HttpFileCollectionBase の拡張メソッドを NuGet パッケージにしてみた。 ClickOnce 形式のインストーラーになっていて、セットアップは簡単。やっぱ GUI で編集できるのはいいな。
/HttpFileCollectionBaseExtension.nuspeccontent/web.config.transformApp_Code/HttpFileCollectionBaseExtension.csReadMe.txt```というフォルダー階層にして .nuspec を開いたら、 &amp;amp;lt;Files&amp;gt; を書いてなくてちゃんと Contentが読み込まれた。なるほど。別に使い方は難しくないけれど、いくつか躓いたところもある。まず、メタデータ（.nuspec）を保存するのを忘れやすい。［Save］メニューは .nupack を保存するコマンドなので、 .nuspec を保存するには［Save metadata］メニューを利用する。  と、公開（push）の終了がわかりづらい。まぁ、重複して公開するとエラーになる（実害はない）のでわかるのだけれど。&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://nuget.org/packages/HttpFileCollectionBaseExtension&amp;quot;&amp;gt;NuGet Gallery | HttpFileCollectionBaseExtension 1.1.0&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/08/17/034631&amp;quot;&amp;gt;Highlight.js を NuGet パッケージにしてみました - だるろぐ&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード（4） - アップロードしたファイルの表示</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/21/092916/</link>
      <pubDate>Tue, 21 Aug 2012 09:29:16 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/21/092916/</guid>
      <description>そういえば、アップロードしたファイルの表示をやっていなかった*1。アップロードフォルダには画像ファイルしかないはずなので、今回は img タグで決め打ちしていいかな。
# List.cshtml@functions {private const string OUTPUT_DIR = &amp;#34;~/Files/&amp;#34;;}@{var dir = Server.MapPath(OUTPUT_DIR);var files = new System.IO.DirectoryInfo(dir).EnumerateFiles().Select((f) =&amp;gt; VirtualPathUtility.ToAbsolute(OUTPUT_DIR + f.Name));}&amp;amp;lt;!DOCTYPE html&amp;gt;&amp;amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt;&amp;amp;lt;title&amp;gt;&amp;amp;lt;/title&amp;gt;&amp;amp;lt;style&amp;gt;a {display: block;float: left;height: 48px; width: 48px;margin: 6px;text-align: center;}a img {max-height: 48px; max-width: 48px;border: none;}&amp;amp;lt;/style&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;body&amp;gt;@foreach (var file in files){&amp;amp;lt;a href=&amp;#34;@file&amp;#34;&amp;gt;&amp;amp;lt;img src=&amp;#34;@file&amp;#34; /&amp;gt;&amp;amp;lt;/a&amp;gt;}&amp;amp;lt;/body&amp;gt;&amp;amp;lt;/html&amp;gt;```結果はこんな感じ。&amp;lt;img src=&amp;#34;http://cdn-ak.</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード（2） の補足</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/20/210729/</link>
      <pubDate>Mon, 20 Aug 2012 21:07:29 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/20/210729/</guid>
      <description>  br/&amp;gt;
&amp;gt;デカいファイルをアップロードしようとすると発生するのだけれど、この例外をトラップするのが面倒……。無理やり頑張ってトラップしてみたのだけれど、 try 文がやたらネストするし、 Request に少しでもアクセスしようものなら発生するので IsAjax が取れずに少し困っている。WebMatrix でファイルのアップロード（2） - だるろぐ 思いついたのだけれど、無理してビューまたは Json を返そうとしなくてもステータスコードだけ返せばいいな。最初にわざとエラーを発生させるコードを書いてそこで return してしまえば、 try……catch 文のネストを減らせるし。
@{try // Catch Request-too-long Error {var dummy = Request.Files;}catch (Exception e){Response.StatusCode = (int) HttpStatusCode.InternalServerError;Response.Write(e.Message);return;}if (IsPost){：：```これをするとどうなるのかというと、  ず、デカいファイルを投げる（既定では約4MB以上）。  ーバーでエラーが発生し、ステータスコード（よくわからんけど5**）を返す。  .ajax() の error プロパティでそれを拾って……  TML を更新する。ブラウザーからアクセスしたときは、まぁ、なんかエラー画面が表示されるのだろう。とりあえずこれでいいか。</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード（3） - FileUpload ヘルパーを使う</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/20/202253/</link>
      <pubDate>Mon, 20 Aug 2012 20:22:53 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/20/202253/</guid>
      <description>まずはお詫びを。
  br/&amp;gt;
&amp;gt;ASP.NET Web Helpers Library という NuGet をインストールすると、（FileUpload ヘルパーを利用して）複数ファイルのアップロードに対応した Form タグを簡単に生成できる。でも、個人的にはあんまり好きじゃなかったので今回は使わなかった。なんか動的に生成されるノードの名前がカブってるし、あんまりよくわかんなかった。WebMatrix でファイルのアップロード - だるろぐ そしたらツッコミをもらった。
 だるさん、HTML の name 属性の値は重複してもいいんやで— しばやん (@shibayan) 2012年8月19日
 最初はなんのことかと思ったけど、 HttpFileCollection は NameObjectCollectionBase を継承している。 NameObjectCollectionBase は重複した複数のキーをもてるので、キーで値を取ろうとすると取りこぼしが発生する、ということみたい。
  かにせやな。 Key はひとつだけど、 Value は複数あるわ。というわけで、値をすべて取得する拡張メソッド（~/App_Code/HttpFileCollectionBaseExtension.cs）は
using System.Collections.Generic;using System.Web;public static class HttpFileCollectionBaseExtension{public static IEnumerable&amp;amp;lt;HttpPostedFileBase&amp;gt; ToEnumerable(this HttpFileCollectionBase target){foreach (var key in target.AllKeys) //--&amp;gt; Key で…… {yield return target[key];}}}```ではなくて、```csusing System.</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/20/020355/</link>
      <pubDate>Mon, 20 Aug 2012 02:03:55 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/20/020355/</guid>
      <description>まずはお詫びを。
&amp;gt;あと、最初から複数ファイルのアップデートに対応できるように記述している。WebMatrix でファイルのアップロード - だるろぐWebMatrix でファイルのアップロード - だるろぐ あれはウソだ。いや、複数ファイルのアップロード自体はできるのだけれど、結果を返す処理が単体ファイルを前提としていたので最後のファイルの結果しか得られない。正しくは、
var model = new List&amp;amp;lt;dynamic&amp;gt;();```とでもして、複数のファイルの結果を格納できるようにすべきだった。さてはて。このように Upload.cshtml はめでたく複数ファイルのアップロードに対応できたし、 Ajax には Json で応答するようにもなった。ならば、ドラッグ＆ドロップで複数ファイルのアップロードもしてみたいよね。というわけでやってみた。  期状態。  ァイルをドラッグ＆ドロップ。これにはもちろん、 Drag &amp;amp;amp; Drop の API を利用する。画像のプレビューは HTML5 の File Reader API を利用して実装してある。JavaScript は見よう見まねで書いてみたけれどなかなか難しい……けれど、 cshtml ならば自動補完機能の恩恵をうけることができるのでまだマシ。jQuery だと$.event.props.push(&#39;dataTransfer&#39;);
  jax でファイルを Upload.cshtml へ送ると、画面遷移なしで結果が表示される。これには FormData という仕組みを利用した。まぁ、ここで JavaScript の話をする気はないので本題に入るけど、これ。  カいファイルをアップロードしようとすると発生するのだけれど、この例外をトラップするのが面倒……。無理やり頑張ってトラップしてみたのだけれど、 try 文がやたらネストするし、 Request に少しでもアクセスしようものなら発生するので IsAjax が取れずに少し困っている&amp;lt;a href=&amp;quot;#f-b7512c63&amp;quot; name=&amp;quot;fn-b7512c63&amp;quot; title=&amp;quot;例外自体は IIS のリクエストのサイズ制限を緩和すれば抑制できるはず&amp;quot;&amp;gt;*1&amp;lt;/a&amp;gt;。```cs# Upload.</description>
    </item>
    
    <item>
      <title>WebMatrix でファイルのアップロード</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/19/130606/</link>
      <pubDate>Sun, 19 Aug 2012 13:06:06 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/19/130606/</guid>
      <description>今日は「WebMatrix 2」でファイルのアップロードを試してみた。なお、このサンプルは「Empty Sites」テンプレートを元に作成している。
### Delault.cshtml```html&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;rdquo; /&amp;gt; &amp;lt;title&amp;gt;マイ サイトのタイトル&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;~/Upload&amp;rdquo; method=&amp;quot;post&amp;rdquo; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt; &amp;lt;input type=&amp;quot;file&amp;rdquo; name=&amp;quot;upload&amp;rdquo; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;input type=&amp;quot;submit&amp;rdquo; name=&amp;quot;submit&amp;rdquo; /&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### Upload.cshtmlアップロード処理を行う cshtml はこんな感じにしてみた。ほんとは path が存在しなければ例外、 file のサイズが 0 ならば例外、 file が image/*** でなければ例外、といったチェックを入れるのだけれど、ソースが長くなるので割愛している。あと、最初から複数ファイルのアップデートに対応できるように記述している。```cs@using System.IO@functions {enum Result { Success, Error };}@{var result = Result.Error;var message = &amp;quot;You can use only POST method.</description>
    </item>
    
    <item>
      <title>HTML5 &#43; jQuery &#43; PHP 製の D&amp;amp;D 対応画像アップローダーを WebMatrix で試す</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/17/213414/</link>
      <pubDate>Fri, 17 Aug 2012 21:34:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/17/213414/</guid>
      <description>Creating a Complete HTML5 Drag and Drop File Uploader with jQuery | InsertHTMLドラッグ＆ドロップで画像ファイルをアップロードできるアプリってたまに公開されてますけど、ちょっと試したくても面倒ですよね。フロントエンドは HTML5 + jQuery なので Web ブラウザーだけで動きますけど、バックエンドはたいてい PHP スクリプトなので Web サーバーが必要です。つまり、
Web サーバーを動かすPHP のセットアップなんてことを、わざわざしなきゃいけないんですよ！　ちょっと試したいだけなのにね。そんなときは「WebMatrix 2」を使ってください（窓の杜 - 【NEWS】「WebMatrix 2」がリリース候補版に、“Node.js”サポートや“Azure”連携を追加）。デフォルトで PHP が有効で、サーバーだって IIS Express が利用できる。めっちゃ簡単ですよ！### 準備「Empty Site」テンプレートで Web サイトを作成します。画像アップロード先が“Images”フォルダなので、あらかじめ作成しておきましょう。そして、アップローダーをダウンロードして展開し、 Web サイトのルートにまるっとコピーします。これだけ。### 使ってみよう！Web サイトを実行して、画像ファイルをブラウザーにドラッグ＆ドロップしてください。なお、 Web ブラウザーは IE 以外で。 IE9 でもゴニョゴニョすれば使えるはず（HTML5Labs - Home）だけど、初期状態では残念ながら利用できません。ちゃんとアップロードされ……あれ？　複数ファイルのアップロードにも対応してるはずだけど、2つ目以降がちゃんとアップロードされていない。まぁ、いいや。こんな感じで簡単にお試しできるので入れておいて損はないんじゃないかな？</description>
    </item>
    
    <item>
      <title>Highlight.js を NuGet パッケージにしてみました</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/17/034631/</link>
      <pubDate>Fri, 17 Aug 2012 03:46:31 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/17/034631/</guid>
      <description>WebMatrix で Markdown を少しだけ拡張してみる - だるろぐ と App_Code でサブフォルダーを利用する - だるろぐ で扱った Highlight.js を NuGet パッケージにしてみました。最初は Highlight.js の NuGet パッケージは存在しないと思い込んでいたのですが、ただ検索のやり方が悪かったようで、「Highlight」というパッケージがあったり、似たような機能を実現できそうな「ColorCode」というパッケージもみつけたのですが、見なかったふりをします。 nuget.org はまだちょっと検索機能がイケてないような気がしますね（責任転嫁）。
### 準備#### nuget.org のアカウントを作成NuGet Gallery | Home でアカウントを作成してください。だいぶ前にやったのでやり方は忘れましたが、難しくはないはずです。  カウントページで API キーが取得できるので、それをローカル環境に登録します。
nuget.exe setApiKey ********-****-****-****-************nuget.exe push MyPackage.1.0.nupkg```NuGet.exe を入手（&amp;lt;a href=&amp;quot;http://nuget.codeplex.com/releases&amp;quot;&amp;gt;http://nuget.codeplex.com/releases&amp;lt;/a&amp;gt; NuGet.exe Command Line）して、1行目を実行すればOKです&amp;lt;a href=&amp;quot;#f-f45a0f4e&amp;quot; name=&amp;quot;fn-f45a0f4e&amp;quot; title=&amp;quot;初回起動時に実行ファイルのアップデートが行われます&amp;quot;&amp;gt;*1&amp;lt;/a&amp;gt;。&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### パッケージに含めるファイルを用意今回パッケージに含めるファイルは以下のとおりです。Highlight.js/
Highlight.js.nuspec &amp;amp;lt;-- あとで作りましょう！content/（ ~/ 以下に展開されます）App_Code/Highlight/Highlight.csLisence FilesContent/Highlight/Theme SkinsScripts/Highlight/hilight.</description>
    </item>
    
    <item>
      <title>WebMatrix で Markdown を少しだけ拡張してみる</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/16/155714/</link>
      <pubDate>Thu, 16 Aug 2012 15:57:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/16/155714/</guid>
      <description>前回（WebMatrix で Markdown を使おう！ - だるろぐ）は、「WebMatrix 2」で Markdown を使ってみました。ついでに静的クラスを用意して、コードも少しキレイにしてみました。最終的にはこんな感じです。
# Markdown.csusing System;using System.IO;using System.Text;using System.Web;/// &amp;amp;lt;summary&amp;gt;/// Summary description for ClassName/// &amp;amp;lt;/summary&amp;gt;public static class Markdown{private static readonly MarkdownSharp.Markdown md = new MarkdownSharp.Markdown();private static readonly Encoding encoding = Encoding.UTF8;public static HtmlString Parse(string input){return new HtmlString(md.Transform(input));}public static HtmlString LoadFromFile(string path){return Parse(File.ReadAllText(path, encoding));}}```で、 Web ページ側ではこんな感じに使います。```cs# Page.</description>
    </item>
    
    <item>
      <title>WebMatrix で Markdown を使おう！</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/16/043012/</link>
      <pubDate>Thu, 16 Aug 2012 04:30:12 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/16/043012/</guid>
      <description>**Markdown** は軽量マークアップ言語で、 テキストを HTML へ変換する記法および変換ツール（パーサー）を指します。 Markdown の記法は英文メールでよく利用されるテキスト装飾がヒントになっており、変換元テキストから変換したあとの HTML マークアップの見当がつけやすく、覚えるのが比較的容易です*1。最近では GitHub などで Wiki 記法として用いられることが多くなっているので、覚えておいて損はないです。 この Markdown パーサーを「WebMatrix 2」で使ってみましょう（所要時間5分）。
### 準備まず、 Empty Site テンプレートから新規サイトを作成し*2、適当にフォルダーを作って Markdown テキストのサンプルを配置します。  回、サンプルは http://tkns.homelinux.net/modules/manual/ja/data/markdown-sample.text （テキスト形式、UTF-8エンコード）をお借りしました。ちなみに、 “.md” や “.markdown” といった拡張子*3のファイルを「WebMatrix 2」で開くには、コンテキストメニューから［WebMatrix で開く］を選択します。つぎに、パーサーをインストール。 NuGet で「MarkdownSharp」パッケージを選択しましょう。
  a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/02/12/213437&amp;quot;&amp;gt;C# の Markdown エンジン - だるろぐ にはいくつかあるのですが、「MarkdownSharp」がもっとも無難だと思います。
  ンストールはとっても簡単。勝手にレポジトリからダウンロード・セットアップされます。ほかのパッケージが必要であれば*4、そのパッケージも自動でセットアップされます。パッケージは自分でも作れるので、やってみると面白いですネ。これで準備は完了。
### コーディングDefault.cshtml を開いて、以下のように記述します。 Markdown テキストのサンプルへのパスは適当に環境に合わせて変えてください*5。```cs@{var markdown = new MarkdownSharp.Markdown();var path = Server.</description>
    </item>
    
    <item>
      <title>WebMatrix で LESS を使おう！</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/15/161932/</link>
      <pubDate>Wed, 15 Aug 2012 16:19:32 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/15/161932/</guid>
      <description>**LESS** はスタイルシートで variables、mixins、operations、functions などを使えるように拡張した“The dynamic stylesheet language”です。ソースコードは“.less”ファイルに記述し、コンパイラで“.css”へ変換して利用します。変換はサーバーサイドだけでなく、 JavaScript を利用してクライアントサイドで行うことも可能*1。結局、何が言いたいかというと、大規模なスタイルシートを書く場合にあるとかんなり便利です。 「WebMatrix 2」ではこの LESS が簡単に使えるんですよネ。まずは、［拡張機能］ボタンから「OrangeBits Compiler」をインストール。あんまり関係ないけれど、［拡張機能］と［NuGet］は最初ちょっと混乱してしまうかもしれない。でもとりあえず、
［拡張機能］：「WebMatrix 2」そのものをパワーアップ［NuGet］：「WebMatrix 2」で編集している“プロジェクト”を簡単に拡張という感じでとらえておけばいいと思う。### .less ファイルを記述```css# Sample.less@theme-color: blue;
body { background-color: @theme-color; }
&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### .css ファイルへの自動コンパイル“Sample.less”を記述すると“Sample.css”が自動生成されるので、その中身を見てみよう。&amp;lt;img src=&amp;quot;http://cdn-ak.f.st-hatena.com/images/fotolife/d/daruyanagi/20120815/20120815160117.png&amp;quot; alt=&amp;quot;f:id:daruyanagi:20120815160117p:plain&amp;quot; title=&amp;quot;f:id:daruyanagi:20120815160117p:plain&amp;quot; class=&amp;quot;hatena-fotolife&amp;quot;/&amp;gt;ちゃんと @theme-color 変数が blue に置き換えられているのがわかる。```css/* -------------------------------------------------------------------------* !!! AUTOMATICALLY GENERATED CODE !!!* -------------------------------------------------------------------------* This file was automatically generated by the OrangeBits compiler.</description>
    </item>
    
    <item>
      <title>WebMatrix &#43; ASP.NET Web Pages でキレイにコーディングしたい（4）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/15/051237/</link>
      <pubDate>Wed, 15 Aug 2012 05:12:37 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/15/051237/</guid>
      <description>今見返してふと思ったのは、比較的簡単にテーマ機能なんかを実装できるなということ。ただデザインを変えたいがために、毎回一からこんなの作るのはアホらしい。WebMatrix + ASP.NET Web Pages でキレイにコーディングしたい - だるろぐ というわけで、今回はテーマ機能を（試しに）作ってみた。
  br/&amp;gt;
“~/Themes/”フォルダにテーマフォルダを作成（今回は Basic と Default）それぞれのテーマフォルダにレイアウトファイル、スタイルシート、リソースなどをまとめる“App.Theme”にテーマフォルダの名前を入れれば、サイト全体のテーマが切り替わるカッコいいか悪いかは知らないけど、とりあえず書いてみた。```cs# _AppStart.cshtml@{ /* Configure App Setting */ App.Theme = &amp;ldquo;Default&amp;rdquo;; }
@using System.IO;
@{ /* Define Utilities */ const string ThemeBaseDir = &amp;ldquo;~/Themes/&amp;quot;; const string ThemeLayoutFile = &amp;ldquo;_Layout.cshtml&amp;rdquo;;
App.GetThemePath = new Func&amp;amp;lt;string&amp;gt;(() =&amp;gt;VirtualPathUtility.ToAbsolute(Path.Combine(ThemeBaseDir, App.Theme)));App.GetLayoutPath = new Func&amp;amp;lt;string&amp;gt;(() =&amp;gt;VirtualPathUtility.</description>
    </item>
    
    <item>
      <title>WebMatrix &#43; ASP.NET Web Pages でキレイにコーディングしたい（3）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/10/012651/</link>
      <pubDate>Fri, 10 Aug 2012 01:26:51 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/10/012651/</guid>
      <description>だるさん、Razor には @functions って記法もあるんやで— しばやん (@shibayan) 2012年8月8日
 知ってたさ！　でも、なんか Func&amp;lt;&amp;gt; ってカッコいいから使ってみたかったんだよ！*1
### @functionsというわけで、レイアウトファイルで @functions を使ってみた。```cs&amp;lt;!DOCTYPE html&amp;lt;html lang=&amp;rdquo;@App.Language&amp;quot;&amp;gt; &amp;lt;head&amp;gt; : : &amp;lt;div id=&amp;quot;site-content&amp;quot;&amp;gt; &amp;lt;article id=&amp;quot;site-body&amp;quot;&amp;gt; @RenderBody() &amp;lt;/article&amp;gt; &amp;lt;aside id=&amp;quot;site-sidebar&amp;quot;&amp;gt; @RenderSideBar() &amp;lt;/aside&amp;gt; &amp;lt;/div&amp;gt;
 &amp;amp;lt;footer id=&amp;quot;site-footer&amp;quot;&amp;gt; @RenderFooter() &amp;lt;/footer&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;
@functions { public HelperResult RenderHeader() { return RenderPage(&amp;quot;_Header.cshtml&amp;rdquo;); } public HelperResult RenderNavigation() { return RenderPage(&amp;quot;_Navigation.cshtml&amp;rdquo;); } public HelperResult RenderSideBar() { return RenderPage(&amp;quot;_SideBar.cshtml&amp;rdquo;); } public HelperResult RenderFooter() { return RenderPage(&amp;quot;_Footer.</description>
    </item>
    
    <item>
      <title>WebMatrix &#43; ASP.NET Web Pages でキレイにコーディングしたい（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/08/035745/</link>
      <pubDate>Wed, 08 Aug 2012 03:57:45 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/08/035745/</guid>
      <description>あと、 @RenderPage(&amp;quot;_Footer.cshtml&amp;quot;) は @RenderFooter() などと記述できるとカッコいいな。「フッターはテーマフォルダ直下の“_Footer.cshtml”に書く」。なるべく規約ベースで。これも簡単にできそうだ。WebMatrix + ASP.NET Web Pages でキレイにコーディングしたい - だるろぐ これをやってみた。なんていうか、“_Footer.cshtml”なんて固定値、あんまりよく目にするところに書いておきたくない。
  br/&amp;gt;
### 拡張メソッドまずは拡張メソッドを試してみた。 WebPage クラスがあたかも最初から RenderFooter() をもっていたかのように見せかけるのが目的。“App_Code”フォルダを掘って、そのなかに C# クラスファイル（.cs）を作成する。 RenderBody() のシグネチャを参考にこういうのを作ってみた。```csusing System.Web.WebPages;static public class WebPageExtensions { static public HelperResult RenderFooter( this WebPage target, params object[] data) { return target.RenderPage(&amp;quot;_Footer.cshtml&amp;rdquo;, data); } }
```html::&amp;amp;lt;div id=&amp;quot;site-content&amp;quot;&amp;gt;&amp;amp;lt;article id=&amp;quot;site-body&amp;quot;&amp;gt;@RenderBody()&amp;amp;lt;/article&amp;gt;&amp;amp;lt;aside id=&amp;quot;site-sidebar&amp;quot;&amp;gt;@RenderPage(&amp;quot;_SideBar.cshtml&amp;quot;) &amp;lt;!-- 古い書き方 --&amp;gt;&amp;amp;lt;/aside&amp;gt;&amp;amp;lt;/div&amp;gt;&amp;amp;lt;footer id=&amp;quot;site-footer&amp;quot;&amp;gt;@this.</description>
    </item>
    
    <item>
      <title>WebMatrix &#43; ASP.NET Web Pages でキレイにコーディングしたい</title>
      <link>https://blog.daruyanagi.jp/entry/2012/08/07/054832/</link>
      <pubDate>Tue, 07 Aug 2012 05:48:32 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/08/07/054832/</guid>
      <description>Razor 構文を使用する ASP.NET Web Pages は web framework および WebMatrix の一部で、Windows を使用した Web サイトの構築で必要なすべてが含まれます。Download: Razor 構文を使用する ASP.NET Web Pages - Microsoft Download Center - Download Details WebMatrix + ASP.NET Web Pages でキレイにコーディングしたいなぁ、と思うのだけれど、どうするのが正しいのかよくわからない。自分なりのテンプレみたいなのがほしいんだけれどね。
### 設定の共通化まず、 Web サイト全体の設定は一元管理したい。たぶん、これは“_AppStart.cshtml”に記述するのが正しいのだろう。```cs@{App.Title = &#34;daruyanagi.net&#34;;App.Author = &#34;daruyanagi&#34;;App.Language = &#34;ja&#34;;App.Encoding = &#34;utf-8&#34;;App.Copyright = &#34;Copyright © 2012 daruyanagi. All rights reserved.&#34;;App.Description = &#34;This is the web site of Hidetoshi Yanagi a.</description>
    </item>
    
    <item>
      <title>#GoAzure の出落ち動画が公開されています</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/27/212854/</link>
      <pubDate>Fri, 27 Jul 2012 21:28:54 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/27/212854/</guid>
      <description>a href=&amp;quot;https://blog.daruyanagi.jp/entry/2012/06/30/211729&amp;quot;&amp;gt;#GoAzure に行ってきました！ - だるろぐ のセッション動画が公開されています（Go Azure | Channel 9）。
&amp;gt;出落ちとは何かと言うことについてご確認ください。Go Azure on Channel 9 | OPCDiary みんな確認すべきですネ。それは冗談としても、 Windows Azure って何か知りたい人にとっては必見の動画になっていると思います。この技術を無視するのは、本当にもったいないと思う！</description>
    </item>
    
    <item>
      <title>Windows Azure Web Sites と WebMatrix 2 の組み合わせはマーベラス！（2）</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/04/205252/</link>
      <pubDate>Fri, 27 Jul 2012 08:32:41 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/04/205252/</guid>
      <description>Windows Azure Web Sites と WebMatrix 2 の組み合わせはマーベラス！ - だるろぐ では、
&amp;gt;Azure で WordPress を導入した Web サイトを作成 → WebMatrix 2 でローカルにダウンロード → ごにょごにょして Azure へデプロイ という方法をとったけど、
&amp;gt;Azure で空の Web サイトを作成 → WebMatrix 2 でローカルにダウンロード → WordPress をインストールしてごにょごにょして Azure へデプロイ ということも可能らしい。 #GoAzure に行ってきました！ - だるろぐ ではそうしてた気がする。とういうことで、やってみた。
### Windows Azure Web サイトの作成Quick Create で新規 Web サイトを作成。右下にある［WebMatrix］ボタンを押すと、「WebMatrix 2」が起動して Azure 上の Web サイトがローカルにダウンロードされる。初回はコネクターアプリをインストールする必要があると思う。### WebMatrix 2 で WordPress のインストール「空のサイトやで！」と言われるので……WordPress をインストールする。何回も言わしてもらうけど、めっさ簡単やから。インストール完了！一度実行して、初回設定を済ましておこう。ついでに最新版へのアップデートもやっておく。### Windows Azure Web サイトへデプロイそれを次は Azure へ発行！　サーバー上のファイルを削除するオプションと、データベースの内容をアップロードするオプションを有効にしておこう。結果は……失敗！？　あれ、何がおかしいんだ…… (；´Д｀)```11:28:02: Adding setAcl (be-styles/wp-content).</description>
    </item>
    
    <item>
      <title>「WebMatrix 2」のアップデート</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/16/011825/</link>
      <pubDate>Mon, 16 Jul 2012 01:18:25 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/16/011825/</guid>
      <description>Windows Phone エミュレーターがアレなので…… - だるろぐ 、 Windows Phone アプリの開発はあきらめて「WebMatrix 2」を起動すると、アップデートがきていた。この PC には RC 版が入っていたはずなので、 RC 版のアップデートということなのかな。ここんところ触ってなかったので、忘れてしまった。何が変わっているのかイマイチよくわかんないけれど、 CSS でエラーが出まくったり、コードの自動補完がうまくいかないのがなおってるのかもしれない。ついでなので、ブログのテーマなんかを作ってみたりした。モバイル端末と共通のテーマにしたかったのだけど、シミュレーターのおかげでテストが楽ちんだな。</description>
    </item>
    
    <item>
      <title>WebMatrix のルーティング</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/06/174414/</link>
      <pubDate>Fri, 06 Jul 2012 17:44:14 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/06/174414/</guid>
      <description>### 保護されたファイル・フォルダ一部の特殊な意味を持つファイルやフォルダには、Webブラウザーからアクセスできない。逆に言えば、外部からアクセスされては困るファイルやフォルダは、特定のフォルダに格納したり、ファイル名を規約に従ってつければいい。#### bin にはアクセスできないbin にはコンパイルされたアセンブリが格納されているので、当然アクセスが禁止されている。#### App_Data / App_Code にはアクセスできない**App_Data**：アプリケーションのデータを格納（データベースなど）**App_Code**：アプリケーションのソースコードを格納（ヘルパーなど）外からみえたら困るので、やっぱりアクセスが禁止されている。#### 名前が「_」から始まるファイルにはアクセスできない**_AppStart.cshcml**：アプリケーションが起動するとき一度だけ実行される（グローバル変数の初期化、Web サービスの API キー格納など）**_PageStart.cshtml**：配置されたフォルダ以下にあるページが表示されるごとに実行される（レイアウトの指定やキャッシュコントロール、アクセス制御など）正直なところ _PageStart.cshtml でアクセス制御ができるのは知らなかったかも。今度使っちゃおう。```cs@{Response.CacheControl = &#34;no-cache&#34;;if (!WebSecurity.IsAuthenticated) {Response.Redirect(&amp;quot;~/Account/Login&amp;quot;);} }
&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://msdn.microsoft.com/ja-jp/asp.net/hh180208.aspx&amp;quot;&amp;gt;第 18 章 サイト全体の動作をカスタマイズする | Razor 構文と ASP.NET Web ページ&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;そのほか、レイアウトファイル（たとえば“_Layout.cshtml”）や部分ビュー（たとえば“_Partial.cshtml”）も、外部に公開する必要はないので名前の先頭に「_」をつけることが多い。また、一時的に Web ページを非公開にする場合にも、リネームだけで対応できるので便利。ちなみに、コードからはちゃんとアクセスできるのでご安心を。&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;### 名前の解決いくつかのルールはあるが、あまり難しくはない。工夫次第では URL をクール＆クリーンに保つことができる。&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;#### 静的な解決まずは、存在するファイル・フォルダへのアクセスの規則を確認する。&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;##### 拡張子ありのファイルアクセス&amp;lt;img src=&amp;quot;http://cdn-ak.</description>
    </item>
    
    <item>
      <title>Packets larger than max_allowed_packet are not allowed</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/06/031903/</link>
      <pubDate>Fri, 06 Jul 2012 03:19:03 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/06/031903/</guid>
      <description>昨日（XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → あと一歩まで行けた - だるろぐ、XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → 成功！ - だるろぐ）は XREA でホスティングしていた WordPress を WebMatrix で
&amp;gt;（XREA → ）Windows 8（WebMatrix） → Azure することに成功したので、今日は
&amp;gt;Azure → Windows 7（WebMatrix） を試してみることにした。 Windows 8 環境はよくフリーズするので、あまりサーバーをイジる作業をしたくない。すると、なんとまた失敗。「Packets larger than max_allowed_packet are not allowed」という見覚えのあるエラーが。
ERROR: リモート データベースをダウンロードできません。詳細については、&amp;quot;http://go.microsoft.com/fwlink/?LinkId=205387&amp;quot; を参照してください2:25:59: リモート データベースをダウンロードできません。詳細については、&amp;quot;http://go.microsoft.com/fwlink/?LinkId=205387&amp;quot; を参照してください2:25:59: 発行済みサイトをダウンロードできません。 リモート データベースをダウンロードできません。詳細については、&amp;quot;http://go.microsoft.com/fwlink/?LinkId=205387&amp;quot; を参照してください2:25:59: エラーの詳細:2:25:59: An error occurred during execution of the database script.</description>
    </item>
    
    <item>
      <title>XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → 成功！</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/05/022927/</link>
      <pubDate>Thu, 05 Jul 2012 02:29:27 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/05/022927/</guid>
      <description>（Windows 8 の Metro アプリ「黒板」で書いてみました*1）前回（XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → あと一歩まで行けた - だるろぐ）は、XREA/CoreServer の WordPress 環境をローカルに保存して、 WebMatrix で動作可能な状態までメンテナンスし、 Windows Azure Websites へアップロードするというフローで、 WordPress の引っ越しを目論んだ……が最後の最後で失敗した。そのときのエラーログの一部がこれ。
0:30:02: エラーの詳細:0:30:02: An error occurred during execution of the database script. The error occurred between the following lines of the script: &amp;quot;145&amp;quot; and &amp;quot;255&amp;quot;. The verbose log might have more information about the error. The command started with the following:0:30:02: &amp;quot;---- Dumping data for table `wp_morpheme````**wp_morpheme** テーブルってなんだろう。調べてみると、どうやら &amp;lt;a href=&amp;quot;http://wordpress.</description>
    </item>
    
    <item>
      <title>XREA/CoreServer の WordPress を Windows Azure Websites に移植してみる → あと一歩まで行けた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/07/05/015015/</link>
      <pubDate>Thu, 05 Jul 2012 01:50:15 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/07/05/015015/</guid>
      <description>近年どうもサポートに不安のある CoreServer で運用していた旧ブログを、最新のクラウドプラットフォーム Windows Azure Websites に引越させたいなぁ、と思っていろいろ画策してみた。Windows Azure の細かいところはまだよくわからないので、ここは WebMatrix の助けを借りようかと思う。結果的には、最後の最後で躓いちゃったけれど……惜しいところまでいったような気がする。
### XREA/CoreServer からデータをバックアップFTP 接続でファイルをローカルに保存。と、そのまえに MySQL データベースのダンプファイルを作成しておく。コントロールパネルのデータベースのところで［複製］ボタンみたいなのを押せば、ルートフォルダにダンプファイルが作成される。### Windows Azure Websites で WordPress サイトを作成・ダウンロードふつーに Windows Azure Websites で WordPress サイトを作成する。初期設定まで Azure 上でやっておいた。あとは WebMatrix でローカルへダウンロード。 Web サイトのボタンからダウンロードできるはず。これで、 Azure Websites に紐づけられた空の WordPress がローカルで動作する。### ファイルのコピーとデータベースのインポート、ローカルで WordPress を動作させる先ほどバックアップしたファイルを、Documents/Web Sites/site_name へコピー。つぎに、ダンプファイルをデータベースへインポートする。```mysql -u root -p DB_NAME &amp;lt; DUMP_FILE_NAME```WebMatrix のデータベースを開いて、旧Webサイトのドメインを“http://localhost:****”（テスト環境のIPアドレス）に書き換えておこう*1。この状態で［実行］してみるが……動かない。焦るなかれ。管理画面（/wp-admin）には入れる。どうやらテーマファイルが認識されていないようだ。デフォルトのテーマを Activate してみる。ちゃんと動いた！　WebMatrix では URL Rewrite が動かないようで、パーマリンクをカスタマイズしている場合、個別ページが見られないが、自分で Web.config を書き換えれば動きそうだ。これに関してはまた稿を改める。### Azure へ発行……失敗あとは Windows Azure Websites へもう一度アップロード（発行）してやれば引っ越しは完了！……のはずだが。```2012/07/05 0:120:18:17: Using ID &amp;#39;d4c71007-****&amp;#39; for connections to the remote server.</description>
    </item>
    
    <item>
      <title>#GoAzure に行ってきました！</title>
      <link>https://blog.daruyanagi.jp/entry/2012/06/30/211729/</link>
      <pubDate>Sat, 30 Jun 2012 21:17:29 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/06/30/211729/</guid>
      <description>Widows Azure ユーザー コミュニティ イベント “Go Azure” | MSDN 行ってきました！　2日目はいろいろあって……行くつもりで家は出たけど、結局そのまま帰って自宅観戦しました。まぁ、会いたい人には昨日会えたし、オンライン参戦でもいいかなと。よく考えたら、写真を使っていいのか聞くの忘れたんで*1、こっそり使っても大丈夫そうなのを1枚だけ掲げておきます。個人的なクライマックスもコレだったかな？（笑　今までやってみたいとは思っていたのだけど、なんとなく後回しになっていた Windows Azure ですが、「そろそろ本格的に始めるべきだなぁ」と思わせる内容でした。（クラウド先進事例に見るPaaS/IaaSを選んだ理由 - 自前のアプリも動く「PaaS型」「IaaS型」躍進：ITpro より引用）よくこの業界では SaaS / PaaS / IaaS というそうですけど（この言葉は昔勉強会で @normalian さんに教えてもらった気がします）、 Windows Azure では PaaS / IaaS という部分を扱うみたいですね。
SaaS：Hotmail / SkyDrive / Office Web Apps など**PaaS**：Web サイト（HTML / ASP.NET / PHP / node.js）**IaaS**：Vertual Machine（Windows / Linux）そのほかにも、 SQL データベース、仮想ネットワークなんてのもあるらしい。自社で管理しているサーバー（オンプレミス）と Windows Azure の境目がどんどんなくなって、違いは実体がどこにあるかというだけ。その点、攻殻機動隊みたいだなぁ、などというちょっと斜め上な感想も抱いたり。あとは人間がクラウドに行くだけだ！それはともかく。初心者やホビープログラマーにおすすめなのは、断然 Web サイト です。すでになじみのあるレンタルサーバーと使い勝手はほぼ一緒で、こと管理ポータルに至っては、それらよりもずっと使いやすい。バックボーンは Microsoft の仮想化技術なので、そんじゃそこらのホスティングサービスには負けない品質がある。そして、その利用をバックアップしてくれる素敵なツール「WebMatrix 2」がある。先ほどの図の PaaS の「アプリケーション」のところを拡大し（てぐちゃぐちゃにし）たと思ってください。辛うじてわかるとおり、「WebMatxix 2」では、大きく分けて4つのテクノロジーが利用できる。Pure HTMLNode.</description>
    </item>
    
    <item>
      <title>Windows Azure Web Sites と WebMatrix 2 の組み合わせはマーベラス！</title>
      <link>https://blog.daruyanagi.jp/entry/2012/06/27/005203/</link>
      <pubDate>Wed, 27 Jun 2012 00:52:03 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/06/27/005203/</guid>
      <description>今日は、 Windows Azure Web Sites でサクッと WordPress をセットアップしてみた - だるろぐ をローカルにダウンロード・管理する。やっと「WebMatrix 2」の登場だ！　またインストールしていない人はしておくように。窓の杜 - 【NEWS】「WebMatrix 2」がリリース候補版に、“Node.js”サポートや“Azure”連携を追加
### リモートサイトへの接続まず起動。［リモートサイト］を選択する。……とその前に、 Azure の管理ポータルで公開プロファイルをダウンロードしておく。なぜかというと……次で使うからだ。公開プロファイルを読み込めば、それだけで設定完了！　これすんごい楽チンじゃなイカ！#### ちょっとトラブル……しかし、うちの環境ではここで「WebMatrix 2」がフリーズ。原因は「Git for WebMatrix」だった。未導入の場合は問題なく作業を進められるんじゃいかな。うちの場合も、再起動すればそのまま作業を進めることができた。窓の杜 - 【REVIEW】バージョン管理システム「Git」を「WebMatrix 2」へ統合「Git for WebMatrix」話は変わるけど、拡張機能がクラッシュしたら次回起動時に無効化してくれるのは親切な設計だと思う。当たり前のことかもしれないけれど、当たり前にやってくれるアプリは少ない。まだリリース候補版だけど、なかなか完成度は高い。### Webサイトのダウンロード気を取り直して作業再開。リモート接続が完了したら、［ダウンロード］ボタンを押してWebサイトをローカルへダウンロード。「Web配置」を利用しているので、データベースの内容もダウンロードできるのがうれしい。本番（リモート）環境とローカル環境のデータが同期できるため、より近い状態でテストできる。リモートへのデータ反映も［発行］（アップロード）で行える。ダウンロードの際は、必要なパッケージのインストール（依存性解決）も勝手にやってくれる。多少時間がかかる場合があるけれども、ちょっと我慢しよう。今回はそんなに時間がかからなかった。### Webサイトの管理と再発行完成！　管理画面へのリンクがリボンに追加されている。あと、「WordPress」の独自関数を入力補完できるのも「WebMatrix 2」ならではといった感じ。今回は、 Azure でセットアップした「WordPress」のバージョンが少し古かったので、プラグイン・テーマともどもローカルでアップデートして、それを［発行］しておいた。リモートで直接アップデートするより、ローカルで一度相性を確認しておいたほうが安全だよね！</description>
    </item>
    
    <item>
      <title>WebMatrix 2 RC でサクッとWebサイトをオシャレにしてみた</title>
      <link>https://blog.daruyanagi.jp/entry/2012/06/20/060353/</link>
      <pubDate>Wed, 20 Jun 2012 06:03:53 +0000</pubDate>
      
      <guid>https://blog.daruyanagi.jp/entry/2012/06/20/060353/</guid>
      <description>みてくれたまえ。これが昨日までの http://download.daruyanagi.net/ だ。ワイルドだろ？*1　さすがにこれを放置するのも何なので、WebMatrix 2.0 Release Candidate でキレイにしてみることにした。
### なにはともあれインストールまず、WebMatrix 2 を WebMatrix 2 からダウンロードしてくれたまえ。うちの場合は、なんか2・3回インストーラーを実行するハメになったけど（なんでだ？）、まぁ、すんなり入る。### Webサイト側でリモート管理を有効にするレンタルサーバーはもちろん、ASP.NET がお安く使える 高機能・激安 Windows レンタルサーバー ExpressWeb を使ってるよな？　Web配置で楽をしましょう。設定ファイルをダウンロードしておくとあとで捗る。### WebサイトのダウンロードWebMatrix でリモートサイトを開く。さっきダウンロードしておいた設定ファイルを読みこめば、かなり楽ちん。リモート管理のアカウント情報を入力するだけで済む。無事接続できた。このまま作業をしてもいいのだけど、やっぱりローカルにコピーを作っておいたほうが何かと安全なのでダウンロードしておく。これがやたら時間かかる。なぜか使ってもいない MySQL もインストールされるし。まぁ、細かいことは気にしない。 ASP.NET 4 のインストールにも失敗したけど、とくに問題なく動いているみたい。@daruyanagi そういう時は、MySQLのサイトで日本のサーバーから落とすのが早いっす。
&amp;mdash; ウェブマトリクスマン(緑のタイツマン (@WebMatrixMan) June 19, 2012  ebMatrixman はほんとデキる子だな。
### Git for WebMatrix のインストールこの作業はスキップしていいのだけど、どうせならバージョン管理できるようにしておけばロールバックとか楽になるよね。というわけで、拡張機能ギャラリーから「Git for WebMatrix」をインストールしておく。リリース当初はハングアップしたりして大変だったけど、週明けのバージョンアップでかなり使えるようになった。### Twitter Bootstrap のインストールWebMatrix 2 では NuGet もよりお手軽に利用できるようになっている。どこかの誰かが作ってくれた便利ツールが自由に使えるというわけだ！　使わないなんて損、損。今回は、デザインセンスのない開発者御用達のCSSフレームワーク Twitter Bootstrap を利用してみた。 WebMatrix 2 は LESS なんかも扱えるから、今後はカスタマイズ可能な Bootstrap なんかも利用できるようになるかも。夢が広がる……### コーディングさて、ようやくコーディングのお時間なのだけど……基本的には Bootstrap, from Twitter （サンプル）のソースコードをガバっとコピペしてチョチョイのちょいとイジるだけ。一瞬で終わってしまった。#### _Layout.</description>
    </item>
    
  </channel>
</rss>